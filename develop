/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package et.com.ejb.ord.bean;

import et.com.ejb.atc.bean.CommonBean;
import et.com.ejb.atc.bean.SolSolicitudEstadosBean;
import et.com.ejb.atc.dto.VerificarExistenciaNitDto;
import et.com.ejb.atc.utils.Utils;
import et.com.ejb.cyr.bean.CyrCorteReconexionBean;
import et.com.ejb.data.GlobalConstant;
import et.com.ejb.lec.bean.LecInformacionAdicionalBean;
import et.com.ejb.ley.bean.LeyHistorialBean;
import et.com.ejb.med.bean.MedAsignaPrecintoBean;
import et.com.ejb.med.bean.MedMedidorBean;
import et.com.ejb.nuc.bean.NucConsumidorBean;
import et.com.ejb.ord.data.CommonConstant;
import et.com.ejb.ord.data.CommonMessage;
import et.com.ejb.ord.data.CommonResponse;
import et.com.ejb.ord.data.CommonInput;
import et.com.ejb.ord.dto.OrdDetalleDto;
import et.com.ejb.ord.dto.OrdCorteReconexionDto;
import et.com.ejb.ord.dto.OrdGeneracionDistribuidaDto;
import et.com.ejb.ord.dto.OrdKwhDiasDirectoDto;
import et.com.ejb.utils.CodigoVerificador;
import et.com.ejb.utils.GlobalUtils;
import et.com.ejb.utils.TextPrinter;
import et.com.jpa.atc.dao.AtcEstadosSectorDao;
import et.com.jpa.atc.dao.DataTable;
import et.com.jpa.atc.dao.InsInspeccionMaterialDao;
import et.com.jpa.atc.dao.OrdOrdenMaterialDao;
import et.com.jpa.atc.dao.SolDatosTecnicosDao;
import et.com.jpa.atc.dao.SolEstadoDao;

import et.com.jpa.atc.dao.SolServicioDao;
import et.com.jpa.atc.dao.SolSolicitudDao;
import et.com.jpa.atc.dao.SolSolicitudInspeccionDao;
import et.com.jpa.atc.dao.SolSolicitudOrdenDao;
import et.com.jpa.atc.dao.SolSolicitudTransformadorDao;
import et.com.jpa.atc.dao.UsuarioDto;
import et.com.jpa.cdp.dao.CdpOrdenesServicioDao;
import et.com.jpa.cyr.dao.CyrCorteReconexionDao;
import et.com.jpa.cyr.dao.CyrProgramaDao;
import et.com.jpa.entities.AtcEstadosSector;
import et.com.jpa.entities.CyrCorteReconexion;

import et.com.jpa.entities.FacCategoriaTarifa;
import et.com.jpa.entities.FacConceptoPeriodoControl;

import et.com.jpa.entities.FacItemFacturacion;
import et.com.jpa.entities.FacOtrosCargosTarifa;
import et.com.jpa.entities.InsInspeccionMaterial;
import et.com.jpa.entities.LecConsumidorPerdidasTrafo;
import et.com.jpa.entities.LeyHistorial;
import et.com.jpa.entities.MedAsignaSolicitud;
import et.com.jpa.entities.MedCodigoMedidor;
import et.com.jpa.entities.MedConclucion;
import et.com.jpa.entities.MedCt;
import et.com.jpa.entities.MedEstado;
import et.com.jpa.entities.MedKwhAdicionales;
import et.com.jpa.entities.MedMedidor;
import et.com.jpa.entities.MedMotivo;
import et.com.jpa.entities.MedPt;
import et.com.jpa.entities.NucActividadEconomica;
import et.com.jpa.entities.NucAgencia;
import et.com.jpa.entities.NucArea;
import et.com.jpa.entities.NucAreaCategoria;
import et.com.jpa.entities.NucAsignaAseo;
import et.com.jpa.entities.NucBarrio;
import et.com.jpa.entities.NucCartaFactura;
import et.com.jpa.entities.NucCategoria;
import et.com.jpa.entities.NucCiExpedido;
import et.com.jpa.entities.NucConsCon;
import et.com.jpa.entities.NucConsumidor;
import et.com.jpa.entities.NucConsumidorCondicion;
import et.com.jpa.entities.NucConsumidorContrato;
import et.com.jpa.entities.NucDatosTecnicos;
import et.com.jpa.entities.NucDepositoGarantia;
import et.com.jpa.entities.NucDocumentosSivel;
import et.com.jpa.entities.NucEstado;
import et.com.jpa.entities.NucLecturaMedidor;
import et.com.jpa.entities.NucMunicipio;
import et.com.jpa.entities.NucNivelDemanda;
import et.com.jpa.entities.NucNivelTension;
import et.com.jpa.entities.NucPoblacion;
import et.com.jpa.entities.NucProvincia;
import et.com.jpa.entities.NucRemesaPeriodoControl;
import et.com.jpa.entities.NucRuta;
import et.com.jpa.entities.NucSector;
import et.com.jpa.entities.NucServicio;
import et.com.jpa.entities.NucServicioCt;
import et.com.jpa.entities.NucServicioMedidor;
import et.com.jpa.entities.NucServicioPt;
import et.com.jpa.entities.NucSistema;
import et.com.jpa.entities.NucSistemaMedicion;
import et.com.jpa.entities.NucSubestado;
import et.com.jpa.entities.NucTipoDocumento;
import et.com.jpa.entities.NucVoltaje;
import et.com.jpa.entities.NucVoltajeCategoria;
import et.com.jpa.entities.OrdAsignaEquipo;
import et.com.jpa.entities.OrdDetalle;
import et.com.jpa.entities.OrdDocumento;
import et.com.jpa.entities.OrdEstado;
import et.com.jpa.entities.OrdInforme;
import et.com.jpa.entities.OrdMotivoConclucion;
import et.com.jpa.entities.OrdOrden;
import et.com.jpa.entities.OrdOrdenEstado;
import et.com.jpa.entities.OrdOrdenMaterial;
import et.com.jpa.entities.NucLocalidad;
import et.com.jpa.entities.OrdOrdenInforme;
import et.com.jpa.entities.OrdTipoOrden;
import et.com.jpa.entities.RecCodigoReclamo;
import et.com.jpa.entities.RecComunicacion;
import et.com.jpa.entities.RecReclamo;
import et.com.jpa.entities.RedPuesto;
import et.com.jpa.entities.RedTecnicaConsumidor;
import et.com.jpa.entities.RedTecnicaConsumidord;
import et.com.jpa.entities.SolDatosTecnicos;
import et.com.jpa.entities.SolEstado;
import et.com.jpa.entities.SolServicio;
import et.com.jpa.entities.SolSolicitud;
import et.com.jpa.entities.SolSolicitudInspeccion;
import et.com.jpa.entities.SolSolicitudOrden;
import et.com.jpa.entities.SolSolicitudTransformador;
import et.com.jpa.fac.dao.FacCargosConexionReconexionDao;
import et.com.jpa.fac.dao.FacCategoriaTarifaDao;
import et.com.jpa.fac.dao.FacConceptoPeriodoControlDao;
import et.com.jpa.fac.dao.FacControlTarifaDao;
import et.com.jpa.fac.dao.FacDepositoGarantiaDao;
import et.com.jpa.fac.dao.FacItemFacturacionDao;
import et.com.jpa.fac.dao.FacOtrosCargosTarifaDao;
import et.com.jpa.fac.dao.FacturacionParametros;
import et.com.jpa.lec.dao.LecConsumidorPerdidasTrafoDao;
import et.com.jpa.lec.dao.LecParametrosGeneralDao;
import et.com.jpa.med.dao.MedAsignaPrecintoDao;
import et.com.jpa.med.dao.MedAsignaSolicitudDao;
import et.com.jpa.med.dao.MedCodigoMedidorDao;
import et.com.jpa.med.dao.MedKwhAdicionalesDao;
import et.com.jpa.med.dao.MedMedidorDao;
import et.com.jpa.nuc.dao.NucCategoriaDao;
import et.com.jpa.nuc.dao.NucConsConDao;
import et.com.jpa.nuc.dao.NucConsumidorDao;
import et.com.jpa.nuc.dao.NucDatosTecnicosDao;
import et.com.jpa.nuc.dao.NucEstadoDao;
import et.com.jpa.nuc.dao.NucLecturaMedidorDao;
import et.com.jpa.nuc.dao.NucPeriodoControlDao;
import et.com.jpa.nuc.dao.NucRemesaPeriodoControlDao;
import et.com.jpa.nuc.dao.NucRutaDao;
import et.com.jpa.nuc.dao.NucSectorDao;
import et.com.jpa.nuc.dao.NucServicioDao;
import et.com.jpa.nuc.dao.NucServicioMedidorDao;
import et.com.jpa.nuc.dao.NucSubEstadoDao;
import et.com.jpa.ord.dao.OrdDetalleDao;
import et.com.jpa.ord.dao.OrdEstadoDao;
import et.com.jpa.ord.dao.OrdInformeDao;
import et.com.jpa.ord.dao.OrdOrdenDao;
import et.com.jpa.ord.dao.OrdOrdenEstadosDao;
import et.com.jpa.ord.dao.OrdOrdenInformeDao;
import et.com.jpa.ord.dao.OrdTipoOrdenDao;
import et.com.jpa.red.dao.RedTecnicaConsumidorDao;
import et.com.jpa.utils.LoggerManager;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.Connection;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.TimeZone;
import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.ejb.LocalBean;
import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.transaction.UserTransaction;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import et.com.jpa.lec.utils.LecturasParametros;
import et.com.jpa.ley.dao.LeyHistorialDao;
import et.com.jpa.med.dao.MedConclucionDao;
import et.com.jpa.med.dao.MedCtDao;
import et.com.jpa.med.dao.MedEstadoDao;
import et.com.jpa.med.dao.MedMotivoDao;
import et.com.jpa.med.dao.MedPtDao;
import et.com.jpa.nuc.dao.NucActividadEconomicaDao;
import et.com.jpa.nuc.dao.NucAgenciaDao;
import et.com.jpa.nuc.dao.NucAreaCategoriaDao;
import et.com.jpa.nuc.dao.NucAreaDao;
import et.com.jpa.nuc.dao.NucAsignaAseoDao;
import et.com.jpa.nuc.dao.NucBarrioDao;
import et.com.jpa.nuc.dao.NucCartaFacturaDao;
import et.com.jpa.nuc.dao.NucConsumidorCondicionDao;
import et.com.jpa.nuc.dao.NucDepositoGarantiaDao;
import et.com.jpa.nuc.dao.NucMunicipioDao;
import et.com.jpa.nuc.dao.NucNivelDemandaDao;
import et.com.jpa.nuc.dao.NucNivelTensionDao;
import et.com.jpa.nuc.dao.NucPoblacionDao;
import et.com.jpa.nuc.dao.NucProvinciaDao;
import et.com.jpa.nuc.dao.NucServicioCtDao;
import et.com.jpa.nuc.dao.NucServicioPtDao;
import et.com.jpa.nuc.dao.NucSistemaMedicionDao;
import et.com.jpa.nuc.dao.NucSistemaDao;
import et.com.jpa.nuc.dao.NucVoltajeCategoriaDao;
import et.com.jpa.nuc.dao.NucVoltajeDao;
import et.com.jpa.ord.dao.OrdAsignaEquipoDao;
import et.com.jpa.ord.dao.OrdMotivoConclucionDao;
import et.com.jpa.red.dao.RedPuestoDao;
import et.com.jpa.red.dao.RedTecnicaConsumidordDao;
import et.com.jpa.nuc.dao.NucCalendarioFeriadoDao;
import et.com.jpa.ord.dao.OrdDocumentoDao;
import et.com.jpa.rec.dao.RecReclamoDao;
import et.com.jpa.rec.dao.RecCodigoReclamoDao;
import et.com.jpa.nuc.dao.NucTipoDocumentoDao;
import et.com.jpa.nuc.dao.NucCiExpedidoDao;
import et.com.jpa.nuc.dao.NucDocumentosSivelDao;
import et.com.jpa.ord.dao.OrdOrdenControlDao;
import et.com.jpa.nuc.dao.NucLocalidadDao;
import java.io.File;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.math.RoundingMode;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;
import org.apache.commons.codec.binary.Base64;
import java.util.Optional;
import java.util.concurrent.TimeUnit;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.Predicate;

import javax.annotation.Resource;
import javax.ejb.EJBContext;
import org.apache.commons.io.FileUtils;
import net.sf.jasperreports.engine.type.OrientationEnum;

/**
 *
 * @author judith.quelca
 */
@Stateless
@LocalBean
public class OrdOrdenBean {

    /**
     * @return the objectList
     */
    public List<Object[]> getObjectList() {
        return objectList;
    }

    /**
     * @param objectList the objectList to set
     */
    public void setObjectList(List<Object[]> objectList) {
        this.objectList = objectList;
    }

    private static final LoggerManager LOG = LoggerManager.getLogger(OrdOrdenBean.class.getName());
    public UserTransaction userTransaction;
    @Resource
    private EJBContext context;
    @PersistenceContext(unitName = "com-PU")
    EntityManager em;
    CommonResponse cr;
    SolSolicitudDao solSolicitudDao;
    OrdOrdenEstadosDao ordOrdenEstadosDao;
    SolSolicitudOrdenDao solSolicitudOrdenDao;
    SolServicioDao solServicioDao;
    OrdOrdenDao ordOrdenDao;
    OrdEstadoDao ordEstadoDao;
    MedMedidorDao medmedidorDao;
    NucServicioMedidorDao nucServicioMedidorDao;
    NucLecturaMedidorDao nucLecturaMedidorDao;
    NucServicioDao nucServicioDao;
    RedTecnicaConsumidorDao redTecnicaConsumidorDao;
    OrdOrdenInformeDao ordOrdenInformeDao;
    InsInspeccionMaterialDao insInspeccionMaterialDao;
    SolDatosTecnicosDao solDatosTecnicosDao;
    OrdInformeDao ordInformeDao;
    OrdTipoOrdenDao ordTipoOrdenDao;
    NucDatosTecnicosDao nucDatosTecnicosDao;
    FacCargosConexionReconexionDao facCargosConexionReconexionDao;
    FacConceptoPeriodoControlDao facConceptoPeriodoControlDao;
    FacItemFacturacionDao facItemFacturacionDao;
    FacControlTarifaDao facControlTarifaDao;
    FacCategoriaTarifaDao facCategoriaTarifariaDao;
    FacOtrosCargosTarifaDao facOtrosCargosTarifaDao;
    NucPeriodoControlDao nucPeriodoControlDao;
    NucRemesaPeriodoControlDao nucRemesaPeriodoControlDao;
    NucConsumidorDao nucConsumidorDao;
    NucConsConDao nucConsConDao;
    OrdDetalleDao ordDetalleDao;
    NucEstadoDao nucEstadoDao;
    LecConsumidorPerdidasTrafoDao lecConsumidorPerdidasTrafoDao;
    MedMedidorDao medMedidorDao;
    MedAsignaSolicitudDao medAsignaSolicitudDao;
    MedAsignaPrecintoDao medAsignaPrecintoDao;
    SolSolicitudInspeccionDao solSolicitudInspeccionDao;
    MedCodigoMedidorDao medCodigoMedidorDao;
    AtcEstadosSectorDao atcEstadosSectorDao;
    NucRutaDao nucRutaDao;
    MedKwhAdicionalesDao medKwhAdicionalesDao;
    SolEstadoDao solEstadoDao;
    NucSubEstadoDao nucSubEstadoDao;
    CyrCorteReconexionDao cyrCorteReconexionDao;
    CyrProgramaDao cyrProgramaDao;
    NucCategoriaDao nucCategoriaDao;
    NucSectorDao nucSectorDao;
    NucAreaDao nucAreaDao;
    NucConsumidorCondicionDao nucConsumidorCondicionDao;
    NucNivelTensionDao nucNivelTensionDao;
    NucCartaFacturaDao nucCartaFacturaDao;
    OrdAsignaEquipoDao ordAsignaEquipoDao;
    MedCtDao medCtDao;
    MedPtDao medPtDao;
    SolSolicitudTransformadorDao solSolicitudTransformadorDao;
    NucServicioCtDao nucServicioCtDao;
    NucServicioPtDao nucServicioPtDao;
    LecParametrosGeneralDao lecParametrosGeneralDao;
    MedMotivoDao medMotivoDao;
    MedConclucionDao medConclucionDao;
    NucPoblacionDao nucPoblacionDao;
    NucBarrioDao nucBarrioDao;
    OrdMotivoConclucionDao ordMotivoConclucionDao;
    NucNivelDemandaDao nucNivelDemandaDao;
    NucAgenciaDao nucAgenciaDao;
    RedTecnicaConsumidordDao redTecnicaConsumidordDao;
    RedPuestoDao redPuestoDao;
    NucDepositoGarantiaDao nucDepositoGarantiaDao;
    FacDepositoGarantiaDao facDepositoGarantiaDao;
    private List<Object[]> objectList;
    NucActividadEconomicaDao nucActividadEconomicaDao;
    NucAreaCategoriaDao nucAreaCategoriaDao;
    NucVoltajeCategoriaDao nucVoltajeCategoriaDao;
    NucAsignaAseoDao nucAsignaAseoDao;
    OrdOrdenMaterialDao ordOrdenMaterialDao;
    NucVoltajeDao nucVoltajeDao;
    NucSistemaMedicionDao nucSistemaMedicionDao;
    MedEstadoDao medEstadoDao;
    NucMunicipioDao nucMunicipioDao;
    NucProvinciaDao nucProvinciaDao;
    NucCalendarioFeriadoDao nucCalendarioFeriadoDao;
    OrdOrdenEstadosDao ordOrdenEstadoDao;
    CdpOrdenesServicioDao cdpOrdenesServicioDao;
    OrdDocumentoDao ordDocumentoDao;
    RecReclamoDao recReclamoDao;
    RecCodigoReclamoDao recCodigoReclamoDao;
    NucTipoDocumentoDao nucTipoDocumentoDao;
    NucCiExpedidoDao nucCiExpedidoDao;
    NucDocumentosSivelDao nucDocumentosSivelDao;
    OrdOrdenControlDao ordOrdenControlDao;
    NucSistemaDao nucSistemaDao;
    LeyHistorialDao leyHistorialDao;
    NucLocalidadDao nucLocalidadDao;
    Calendar calendar = Calendar.getInstance();
    SimpleDateFormat formatDate = new SimpleDateFormat("yyyyMMddHHmm");

    @EJB
    OrdOrdenEstadosBean ordOrdenEstadosBean;
    @EJB
    SolSolicitudEstadosBean solSolicitudEstadosBean;

    @EJB
    LecInformacionAdicionalBean lecInformacionAdicionalBean;

    @EJB
    CyrCorteReconexionBean cyrCorteReconexionBean;

    @EJB
    MedAsignaPrecintoBean medAsignaPrecintoBean;

    @EJB
    LeyHistorialBean leyHistorialBean;

    @EJB
    CommonBean commonBean;

    @EJB
    MedMedidorBean medMedidorBean;

    @EJB
    OrdMantenimientoBean ordMantenimientoBean;

    @EJB
    NucConsumidorBean nucConsumidorBean;

    @Resource
    UserTransaction transaction;

    /**
     * Lista de constantes que guardan la cantidad de caracteres admitidos por
     * linea, haciendo un total de 12 unidades por linea y sumando 94
     * caracteres.
     */
    final static String SPACE = " ";
    final static String TAB = "	";
    final static String ENDLINE = "\n";
    final static String TOFILL = "...............";
    final static String TOFILLSHORT = "..........";
    final static String LINE = "________________";
    final static String TOCHECK = "...";
    final static String L12 = "%-94.94s";
    final static String LS12 = "%-94.94s";
    final static String L8 = "%-63.63s";
    final static String LS8 = "%-62.62s";
    final static String L7 = "%-56.56s";
    final static String LS7 = "%-55.55s";
    final static String L6 = "%-47.47s";
    final static String LS6 = "%-47.47s";
    final static String L4 = "%-32.32s";
    final static String LS4 = "%-31.31s";
    final static String L3 = "%-24.24s";
    final static String LS3 = "%-23.23s";
    final static String L2 = "%-16.16s";
    final static String LS2 = "%-15.15s";
    final static String L1 = "%-8.8s";
    final static String LS1 = "%-7.7s";
    final static String PX5 = "%-5.5s";
    final static String PX3 = "%-3.3s";
    final static String FILLMINUS = "---------------";

    protected Predicate<Integer> orderHasProject
            = type
            -> type == CommonConstant.ORDTIPOORDEN.CONTRATO_NUEVO
            || type == CommonConstant.ORDTIPOORDEN.CAMBIO_ACOMETIDA
            || type == CommonConstant.ORDTIPOORDEN.CAMBIO_ACOMETIDA_INTERNA
            || type == CommonConstant.ORDTIPOORDEN.TRASLADO_MISMA_CASA;

    @PostConstruct
    public void OrdOrdenBean() {
        TimeZone.setDefault(TimeZone.getTimeZone("UTC"));
        TimeZone.setDefault(TimeZone.getTimeZone("America/La_Paz"));
        solSolicitudDao = new SolSolicitudDao();
        ordOrdenEstadosDao = new OrdOrdenEstadosDao();
        nucLocalidadDao = new NucLocalidadDao();
        solSolicitudOrdenDao = new SolSolicitudOrdenDao();
        solServicioDao = new SolServicioDao();
        ordOrdenDao = new OrdOrdenDao();
        ordEstadoDao = new OrdEstadoDao();
        medmedidorDao = new MedMedidorDao();
        nucServicioMedidorDao = new NucServicioMedidorDao();
        nucLecturaMedidorDao = new NucLecturaMedidorDao();
        nucServicioDao = new NucServicioDao();
        redTecnicaConsumidorDao = new RedTecnicaConsumidorDao();
        ordOrdenInformeDao = new OrdOrdenInformeDao();
        insInspeccionMaterialDao = new InsInspeccionMaterialDao();
        solDatosTecnicosDao = new SolDatosTecnicosDao();
        ordInformeDao = new OrdInformeDao();
        ordTipoOrdenDao = new OrdTipoOrdenDao();
        nucDatosTecnicosDao = new NucDatosTecnicosDao();
        facConceptoPeriodoControlDao = new FacConceptoPeriodoControlDao();
        facCargosConexionReconexionDao = new FacCargosConexionReconexionDao();
        facItemFacturacionDao = new FacItemFacturacionDao();
        facControlTarifaDao = new FacControlTarifaDao();
        facCategoriaTarifariaDao = new FacCategoriaTarifaDao();
        facOtrosCargosTarifaDao = new FacOtrosCargosTarifaDao();
        nucPeriodoControlDao = new NucPeriodoControlDao();
        nucRemesaPeriodoControlDao = new NucRemesaPeriodoControlDao();
        nucConsumidorDao = new NucConsumidorDao();
        nucConsConDao = new NucConsConDao();
        ordDetalleDao = new OrdDetalleDao();
        nucEstadoDao = new NucEstadoDao();
        lecConsumidorPerdidasTrafoDao = new LecConsumidorPerdidasTrafoDao();
        medMedidorDao = new MedMedidorDao();
        medAsignaSolicitudDao = new MedAsignaSolicitudDao();
        medAsignaPrecintoDao = new MedAsignaPrecintoDao();
        solSolicitudInspeccionDao = new SolSolicitudInspeccionDao();
        medCodigoMedidorDao = new MedCodigoMedidorDao();
        atcEstadosSectorDao = new AtcEstadosSectorDao();
        nucRutaDao = new NucRutaDao();
        medKwhAdicionalesDao = new MedKwhAdicionalesDao();
        solEstadoDao = new SolEstadoDao();
        nucSubEstadoDao = new NucSubEstadoDao();
        cyrCorteReconexionDao = new CyrCorteReconexionDao();
        cyrProgramaDao = new CyrProgramaDao();
        nucCategoriaDao = new NucCategoriaDao();
        nucSectorDao = new NucSectorDao();
        nucAreaDao = new NucAreaDao();
        nucConsumidorCondicionDao = new NucConsumidorCondicionDao();
        nucNivelTensionDao = new NucNivelTensionDao();
        nucCartaFacturaDao = new NucCartaFacturaDao();
        ordAsignaEquipoDao = new OrdAsignaEquipoDao();
        medCtDao = new MedCtDao();
        medPtDao = new MedPtDao();
        nucServicioCtDao = new NucServicioCtDao();
        nucServicioPtDao = new NucServicioPtDao();
        solSolicitudTransformadorDao = new SolSolicitudTransformadorDao();
        lecParametrosGeneralDao = new LecParametrosGeneralDao();
        medMotivoDao = new MedMotivoDao();
        medConclucionDao = new MedConclucionDao();
        nucPoblacionDao = new NucPoblacionDao();
        nucBarrioDao = new NucBarrioDao();
        ordMotivoConclucionDao = new OrdMotivoConclucionDao();
        nucNivelDemandaDao = new NucNivelDemandaDao();
        nucAgenciaDao = new NucAgenciaDao();
        redTecnicaConsumidordDao = new RedTecnicaConsumidordDao();
        redPuestoDao = new RedPuestoDao();
        nucDepositoGarantiaDao = new NucDepositoGarantiaDao();
        facDepositoGarantiaDao = new FacDepositoGarantiaDao();
        nucActividadEconomicaDao = new NucActividadEconomicaDao();
        nucAreaCategoriaDao = new NucAreaCategoriaDao();
        nucVoltajeCategoriaDao = new NucVoltajeCategoriaDao();
        nucAsignaAseoDao = new NucAsignaAseoDao();
        ordOrdenMaterialDao = new OrdOrdenMaterialDao();
        nucVoltajeDao = new NucVoltajeDao();
        nucSistemaMedicionDao = new NucSistemaMedicionDao();
        medEstadoDao = new MedEstadoDao();
        nucMunicipioDao = new NucMunicipioDao();
        nucProvinciaDao = new NucProvinciaDao();
        nucCalendarioFeriadoDao = new NucCalendarioFeriadoDao();
        ordOrdenEstadoDao = new OrdOrdenEstadosDao();
        cdpOrdenesServicioDao = new CdpOrdenesServicioDao();
        ordDocumentoDao = new OrdDocumentoDao();
        recReclamoDao = new RecReclamoDao();
        recCodigoReclamoDao = new RecCodigoReclamoDao();
        nucTipoDocumentoDao = new NucTipoDocumentoDao();
        nucCiExpedidoDao = new NucCiExpedidoDao();
        nucDocumentosSivelDao = new NucDocumentosSivelDao();
        ordOrdenControlDao = new OrdOrdenControlDao();
        leyHistorialDao = new LeyHistorialDao();

        nucLocalidadDao.setEntityManager(em);
        solSolicitudDao.setEntityManager(em);
        ordOrdenEstadosDao.setEntityManager(em);
        solSolicitudOrdenDao.setEntityManager(em);
        solServicioDao.setEntityManager(em);
        ordOrdenDao.setEntityManager(em);
        ordEstadoDao.setEntityManager(em);
        medmedidorDao.setEntityManager(em);
        nucLecturaMedidorDao.setEntityManager(em);
        nucServicioDao.setEntityManager(em);
        redTecnicaConsumidorDao.setEntityManager(em);
        ordOrdenInformeDao.setEntityManager(em);
        insInspeccionMaterialDao.setEntityManager(em);
        solDatosTecnicosDao.setEntityManager(em);
        ordInformeDao.setEntityManager(em);
        nucServicioMedidorDao.setEntityManager(em);
        ordTipoOrdenDao.setEntityManager(em);
        nucDatosTecnicosDao.setEntityManager(em);
        facConceptoPeriodoControlDao.setEntityManager(em);
        facCargosConexionReconexionDao.setEntityManager(em);
        facItemFacturacionDao.setEntityManager(em);
        facControlTarifaDao.setEntityManager(em);
        facCategoriaTarifariaDao.setEntityManager(em);
        facOtrosCargosTarifaDao.setEntityManager(em);
        nucPeriodoControlDao.setEntityManager(em);
        nucRemesaPeriodoControlDao.setEntityManager(em);
        nucConsumidorDao.setEntityManager(em);
        nucConsConDao.setEntityManager(em);
        ordDetalleDao.setEntityManager(em);
        nucEstadoDao.setEntityManager(em);
        lecConsumidorPerdidasTrafoDao.setEntityManager(em);
        medMedidorDao.setEntityManager(em);
        medAsignaSolicitudDao.setEntityManager(em);
        medAsignaPrecintoDao.setEntityManager(em);
        solSolicitudInspeccionDao.setEntityManager(em);
        medCodigoMedidorDao.setEntityManager(em);
        atcEstadosSectorDao.setEntityManager(em);
        nucRutaDao.setEntityManager(em);
        medKwhAdicionalesDao.setEntityManager(em);
        solEstadoDao.setEntityManager(em);
        nucSubEstadoDao.setEntityManager(em);
        cyrCorteReconexionDao.setEntityManager(em);
        cyrProgramaDao.setEntityManager(em);
        nucCategoriaDao.setEntityManager(em);
        nucSectorDao.setEntityManager(em);
        nucAreaDao.setEntityManager(em);
        nucConsumidorCondicionDao.setEntityManager(em);
        nucNivelTensionDao.setEntityManager(em);
        nucCartaFacturaDao.setEntityManager(em);
        ordAsignaEquipoDao.setEntityManager(em);
        medCtDao.setEntityManager(em);
        medPtDao.setEntityManager(em);
        solSolicitudTransformadorDao.setEntityManager(em);
        nucServicioCtDao.setEntityManager(em);
        nucServicioPtDao.setEntityManager(em);
        lecParametrosGeneralDao.setEntityManager(em);
        medMotivoDao.setEntityManager(em);
        medConclucionDao.setEntityManager(em);
        nucPoblacionDao.setEntityManager(em);
        nucBarrioDao.setEntityManager(em);
        ordMotivoConclucionDao.setEntityManager(em);
        nucNivelDemandaDao.setEntityManager(em);
        nucAgenciaDao.setEntityManager(em);
        redTecnicaConsumidordDao.setEntityManager(em);
        redPuestoDao.setEntityManager(em);
        nucDepositoGarantiaDao.setEntityManager(em);
        facDepositoGarantiaDao.setEntityManager(em);
        nucActividadEconomicaDao.setEntityManager(em);
        nucAreaCategoriaDao.setEntityManager(em);
        nucVoltajeCategoriaDao.setEntityManager(em);
        nucAsignaAseoDao.setEntityManager(em);
        ordOrdenMaterialDao.setEntityManager(em);
        nucVoltajeDao.setEntityManager(em);
        nucSistemaMedicionDao.setEntityManager(em);
        medEstadoDao.setEntityManager(em);
        nucMunicipioDao.setEntityManager(em);
        nucProvinciaDao.setEntityManager(em);
        nucCalendarioFeriadoDao.setEntityManager(em);
        ordOrdenEstadoDao.setEntityManager(em);
        cdpOrdenesServicioDao.setEntityManager(em);
        ordDocumentoDao.setEntityManager(em);
        recReclamoDao.setEntityManager(em);
        recCodigoReclamoDao.setEntityManager(em);
        nucTipoDocumentoDao.setEntityManager(em);
        nucCiExpedidoDao.setEntityManager(em);
        nucDocumentosSivelDao.setEntityManager(em);
        ordOrdenControlDao.setEntityManager(em);
        nucSistemaDao = new NucSistemaDao();
        nucSistemaDao.setEntityManager(em);
        leyHistorialDao.setEntityManager(em);
    }

    private CommonResponse createOrdenInternaCambioAcometida(OrdOrden baseOrden, UsuarioDto _usuarioDto) throws Exception {
        cr = new CommonResponse();
        cr.setResult(GlobalConstant.RESULT_ERROR);
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        UsuarioDto usuarioDto = _usuarioDto;
        AtcEstadosSector atcEstadosSector;
        NucArea nucArea;
        NucConsumidor nucConsumidor;
        NucServicio nucServicio;
        NucServicioMedidor nucServicioMedidor;
        MedMedidor medMedidor = null;
        BigDecimal indConexion = null;
        //UserTransaction transaction = context.getUserTransaction();
        try {
            //transaction.begin();
            OrdTipoOrden ordTipoOrden = ordTipoOrdenDao.findByCodigo(CommonConstant.ORDTIPOORDEN.CAMBIO_ACOMETIDA_INTERNA);
            nucConsumidor = nucConsumidorDao.findById(baseOrden.getIdConsumidor().getId());
            nucServicio = nucServicioDao.findByIdConsumidor(nucConsumidor.getId(), CommonConstant.NUCTIPOSERVICIO.ENERGIA);
            nucServicioMedidor = nucServicioMedidorDao.findByMedidorConectado(nucServicio.getId());
            if (nucServicioMedidor != null) {
                medMedidor = medMedidorDao.findById(nucServicioMedidor.getIdMedidor().getId());
                indConexion = nucLecturaMedidorDao.findByServicioMedidor(nucServicioMedidor.getId()).getIndiceUltimo();
            } else {
                Function<Integer, OrdTipoOrden> tipoOrden = tipo -> Optional.ofNullable(ordTipoOrdenDao.findByCodigo(tipo)).orElse(new OrdTipoOrden());
                OrdTipoOrden tipoOrdenReha = tipoOrden.apply(CommonConstant.ORDTIPOORDEN.REHABILITACION);
                OrdTipoOrden tipoOrdenRehaFaltaPago = tipoOrden.apply(CommonConstant.ORDTIPOORDEN.REHABILITACION_FALTA_PAGO);
                BiFunction<Integer, Integer, OrdOrden> findByConsumidorTipoOrden = (idConsumidor, idTipoOrden) -> ordOrdenDao.findByConsumidorTipoOrden(idConsumidor, idTipoOrden);
                OrdOrden ultimaOrdenRehab = findByConsumidorTipoOrden.apply(nucConsumidor.getId(), tipoOrdenReha.getId()) != null
                        ? findByConsumidorTipoOrden.apply(nucConsumidor.getId(), tipoOrdenReha.getId())
                        : findByConsumidorTipoOrden.apply(nucConsumidor.getId(), tipoOrdenRehaFaltaPago.getId());

                if (ultimaOrdenRehab == null) {
                    cr.setResult(GlobalConstant.RESULT_WARNING);
                    cr.setResultMessage("El consumidor no cuenta con registro de medidor");
                    return cr;
                }
                indConexion = ultimaOrdenRehab.getIndConexion();
            }

            OrdOrden orden = new OrdOrden();
            //orden.setOrdOrdenMaterialList(baseOrden.getOrdOrdenMaterialList());
            orden.setCodigo(Utils.getNextNumber(em, OrdOrden.class, "codigo"));
            orden.setIdTipoOrden(ordTipoOrden);
            orden.setIdMedidorConexion(medMedidor);
            orden.setIndConexion(indConexion);
            orden.setIdConsumidor(nucConsumidor);
            orden.setIdEstado(ordEstadoDao.findByCodigoEstado(CommonConstant.ORDESTADO.PENDIENTE));
            //NucSector nucSector = nucSectorDao.findById(usuarioDto.getId_sector());
            NucSector nucSector = nucSectorDao.findById(1);
            orden.setIdSectorOrigen(nucSector);
            orden.setIdRuta(nucConsumidor.getIdRuta());
            nucArea = nucConsumidor.getIdRuta().getIdRemesa().getIdArea();
            atcEstadosSector = atcEstadosSectorDao.getSectorDestinoAtec(nucArea.getId(), null, null, orden.getIdEstado().getId(), CommonConstant.ORDESTADO.CAMPO, ordTipoOrden.getAsignaMedidor(), ordTipoOrden.getRetiraMedidor());
            if (atcEstadosSector != null) {
                orden.setIdSectorDestino(atcEstadosSector.getIdSector());
            }
            orden.setFechaRegistro(calendar.getTime());
            orden.setFechaActualizacion(calendar.getTime());
            orden.setUsuarioRegistro(usuarioDto.getId_usuario_security());
            orden.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
            NucAgencia nucAgencia = nucAgenciaDao.findById(usuarioDto.getId_agencia());
            orden.setIdAgencia(nucAgencia);
            orden.setRazonSocial(nucConsumidor.getRazonSocial());
            orden.setIdCategoria(nucServicio.getIdCategoria());
            orden.setIdNivelCalidad(nucServicio.getIdNivelCalidad());
            ordOrdenDao.create(orden);
            ordOrdenEstadosBean.updateEstadoOrden(orden, CommonConstant.ORDESTADO.PENDIENTE);
            if (baseOrden.getOrdOrdenMaterialList() != null && !baseOrden.getOrdOrdenMaterialList().isEmpty()) {
                for (OrdOrdenMaterial newOrdORdenMaterial : baseOrden.getOrdOrdenMaterialList()) {
                    OrdOrdenMaterial ordOrdenMaterial = new OrdOrdenMaterial();
                    ordOrdenMaterial.setIdMaterial(newOrdORdenMaterial.getIdMaterial());
                    ordOrdenMaterial.setIdOrden(orden);
                    ordOrdenMaterial.setCantidadEstimada(newOrdORdenMaterial.getCantidadEstimada());
                    ordOrdenMaterial.setCantidadReal(newOrdORdenMaterial.getCantidadEstimada());
                    ordOrdenMaterial.setPropiedadEmpresa(newOrdORdenMaterial.getPropiedadEmpresa());
                    ordOrdenMaterial.setFechaRegistro(calendar.getTime());
                    ordOrdenMaterial.setFechaActualizacion(calendar.getTime());
                    ordOrdenMaterial.setUsuarioRegistro(usuarioDto.getId_usuario_security());
                    ordOrdenMaterial.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                    ordOrdenMaterialDao.create(ordOrdenMaterial);
                }
            }
            cr.setResult(GlobalConstant.RESULT_SUCCESS);
            cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.SUCCESS);
            // transaction.commit();
        } catch (Exception e) {
            //transaction.rollback();
            e.printStackTrace();
        }
        return cr;
    }

    public Boolean createOrdenCampo(SolSolicitud solicitud, UsuarioDto _usuarioDto) {
        cr = new CommonResponse();
        Boolean isSaveOrden = false;
        cr.setResult(GlobalConstant.RESULT_ERROR);
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        UsuarioDto usuarioDto = _usuarioDto;
        try {
            SolServicio solServicio = solServicioDao.findByIdSolicitud(solicitud.getId());

            SolDatosTecnicos solDatosTecnicos = solDatosTecnicosDao.findByIdServicio(solServicio.getId());
            //NucServicio nucServicio = nucServicioDao.findByIdConsumidor(solServicio.getIdConsumidor().getId(), CommonConstant.NUCTIPOSERVICIO.ENERGIA);
            NucConsumidor nucConsumidor = nucConsumidorDao.findById(solServicio.getIdConsumidor().getId());

            NucArea nucArea = nucConsumidor.getIdRuta().getIdRemesa().getIdArea();
            NucServicio nucServicio = new NucServicio();
            NucServicioMedidor nucServicioMedidor = new NucServicioMedidor();
            NucLecturaMedidor nucLecturaMedidor = new NucLecturaMedidor();
            NucDatosTecnicos nucDatosTecnicos = new NucDatosTecnicos();
            Boolean asignaCTPT = false;
            if (solServicio.getIdConsumidor() != null) {
                nucServicio = nucServicioDao.findByIdConsumidor(solServicio.getIdConsumidor().getId(), CommonConstant.NUCTIPOSERVICIO.ENERGIA);
                nucDatosTecnicos = nucDatosTecnicosDao.findByIdServicio(nucServicio.getId());

                if (nucDatosTecnicos.getIdSistemaMedicion().getCodigo() == CommonConstant.NUCSISTEMAMEDICION.INDIRECTA_CON_MEDIDOR_CT_PT || nucDatosTecnicos.getIdSistemaMedicion().getCodigo() == CommonConstant.NUCSISTEMAMEDICION.SEMIDIRECTA_CON_MEDIDOR_CT) {
                    asignaCTPT = true;
                }
                nucServicioMedidor = nucServicioMedidorDao.findByMedidorConectado(nucServicio.getId());

                if (nucServicioMedidor != null) {
                    nucLecturaMedidor = nucLecturaMedidorDao.findByServicioMedidor(nucServicioMedidor.getId());
                }
            }
            if (solicitud != null && solServicio != null) {
                List<SolSolicitudOrden> solSolicitudOrdenList = solSolicitudOrdenDao.findByIdSolicitud(solicitud.getId());
                for (SolSolicitudOrden solicitudOrden : solSolicitudOrdenList) {
                    OrdTipoOrden ordTipoOrden = ordTipoOrdenDao.findById(solicitudOrden.getIdTipoOrden().getId());
                    OrdOrden orden = new OrdOrden();
                    isSaveOrden = false;
                    if (solDatosTecnicos != null && solDatosTecnicos.getPropiedaMedidorEmpresa() != null) {

                        if (!solDatosTecnicos.getPropiedaMedidorEmpresa()) {
                            MedAsignaSolicitud medAsignaSolicitud = medAsignaSolicitudDao.findByIdSolicitud(solicitud.getId());
                            if (medAsignaSolicitud != null) {
                                MedMedidor medMedidor = medMedidorDao.findById(medAsignaSolicitud.getIdMedidor().getId());

                                orden.setIdMedidorConexion(medAsignaSolicitud.getIdMedidor());
                                orden.setIndConexion(medMedidor.getIndiceEnergia());
                                orden.setMultiplicadorCalculado(medMedidor.getMultiplicadorCalculado());
                            }
                        }
                        orden.setFase1(solDatosTecnicos.getFase1());
                        orden.setFase2(solDatosTecnicos.getFase2());
                        orden.setFase3(solDatosTecnicos.getFase3());
                        orden.setFase4(solDatosTecnicos.getFase4());
                    }
                    orden.setCodigo(Utils.getNextNumber(em, OrdOrden.class, "codigo"));
                    orden.setIdTipoOrden(solicitudOrden.getIdTipoOrden());
                    orden.setIdConsumidor(solServicio.getIdConsumidor());
                    orden.setIdEstado(ordEstadoDao.findByCodigoEstado(CommonConstant.ORDESTADO.PENDIENTE));
                    orden.setIdSectorOrigen(solicitud.getIdSector());

                    int ordEstado = 0;
                    if ((solicitud.getIdTipoSolicitud().getCodigo() == et.com.ejb.atc.data.CommonConstant.SOLTIPOSOLICITUD.NUEVO_SUMINISTRO
                            && nucDatosTecnicos.getIdSistemaMedicion().getCodigo() != CommonConstant.NUCSISTEMAMEDICION.DIRECTA_SIN_MEDIDOR)
                            || solicitud.getIdTipoSolicitud().getCodigo() == et.com.ejb.atc.data.CommonConstant.SOLTIPOSOLICITUD.NUEVO_SUMINISTRO_GDI_COD
                            || new BigDecimal(new BigDecimal(ordTipoOrden.getCodigo()).intValue()).intValue() == CommonConstant.ORDTIPOORDEN.CAMBIO_MEDIDOR
                            || ordTipoOrden.getCodigo() == CommonConstant.ORDTIPOORDEN.INSTALACION_MEDIDOR
                            || (nucDatosTecnicos.getIdSistemaMedicion().getCodigo() != CommonConstant.NUCSISTEMAMEDICION.DIRECTA_SIN_MEDIDOR && nucServicioMedidor == null
                            && ordTipoOrden.getCodigo() == CommonConstant.ORDTIPOORDEN.REHABILITACION)) {
                        ordEstado = CommonConstant.ORDESTADO.ASIGNADA_MEDIDORES;
                    } else {
                        ordEstado = CommonConstant.ORDESTADO.PENDIENTE;
                    }
//                    OrdEstado ordEstados = ordEstadoDao.findByCodigoEstado(ordEstado);
                    SolEstado solEstado = solEstadoDao.findByCodigo(et.com.ejb.atc.data.CommonConstant.SOLESTADO.ORDEN_GENERADA);

                    AtcEstadosSector atcEstadosSector = atcEstadosSectorDao.getSectorDestinoAtec(nucArea.getId(), null, solEstado.getId(), ordEstado, null, ordTipoOrden.getAsignaMedidor(), asignaCTPT);
                    if (atcEstadosSector != null) {
                        orden.setIdSectorDestino(atcEstadosSector.getIdSector());
                    }

//                    orden.setIdPuesto(solDatosTecnicos.getIdPuesto());
//                    orden.setIdPoste(solDatosTecnicos.getIdPoste());
                    orden.setIdRuta(solServicio.getIdRuta());
                    orden.setIdVoltaje(solDatosTecnicos.getIdVoltajeAsignado());
                    orden.setIdNivelCalidad(solServicio.getIdNivelCalidad());
                    orden.setRazonSocial(nucConsumidor.getRazonSocial());
                    orden.setIdCategoria(solServicio.getIdCategoria());
                    orden.setFechaRegistro(calendar.getTime());
                    orden.setFechaActualizacion(calendar.getTime());
                    orden.setUsuarioRegistro(_usuarioDto.getId_usuario_security());
                    orden.setUsuarioActualizacion(_usuarioDto.getId_usuario_security());
                    NucAgencia nucAgencia = nucAgenciaDao.findById(usuarioDto.getId_agencia());
                    orden.setIdAgencia(nucAgencia);
                    //if (ordTipoOrden.getAsignaMedidor() && ordTipoOrden.getCodigo() != CommonConstant.ORDTIPOORDEN.CONTRATO_NUEVO) {
                    if (ordTipoOrden.getCodigo() != CommonConstant.ORDTIPOORDEN.CONTRATO_NUEVO) {
                        //Recupera medidor anterior para la orden que asignan medidor
                        if (nucServicioMedidor != null) {
                            if (ordTipoOrden.getCodigo() != CommonConstant.ORDTIPOORDEN.CAMBIO_MEDIDOR) {
                                orden.setIdMedidorConexion(nucServicioMedidor.getIdMedidor());
                            }

                            orden.setMultiplicadorCalculado(nucServicioMedidor.getIdMedidor().getMultiplicadorCalculado());
                            if (nucLecturaMedidor != null) {
                                if (ordTipoOrden.getCodigo() != CommonConstant.ORDTIPOORDEN.CAMBIO_MEDIDOR) {
                                    orden.setIndConexion(nucLecturaMedidor.getIndiceUltimo());
                                }
                            }
                        }
                    }

                    if (new BigDecimal(ordTipoOrden.getCodigo()).intValue() == CommonConstant.ORDTIPOORDEN.CAMBIO_MEDIDOR || ordTipoOrden.getRetiraMedidor()) {
                        //Recupera medidor anterior para la orden de cambio de medidor
                        if (nucServicioMedidor != null) {
                            orden.setMultiplicadorCalculado(nucServicioMedidor.getIdMedidor().getMultiplicadorCalculado());
                            orden.setIdMedidorDesconexion(nucServicioMedidor.getIdMedidor());
                            if (nucLecturaMedidor != null) {
                                orden.setIndDesconexion(nucLecturaMedidor.getIndiceUltimo());
                            }
                        }
                    }
                    isSaveOrden = ordOrdenDao.create(orden);
                    solicitudOrden.setOrdId(orden);
                    Boolean isSaveSolicitudOrden = solSolicitudOrdenDao.update(solicitudOrden);
                    if (isSaveOrden == true && isSaveSolicitudOrden == true) {
                        if ((solicitud.getIdTipoSolicitud().getCodigo() == et.com.ejb.atc.data.CommonConstant.SOLTIPOSOLICITUD.NUEVO_SUMINISTRO
                                && nucDatosTecnicos.getIdSistemaMedicion().getCodigo() != CommonConstant.NUCSISTEMAMEDICION.DIRECTA_SIN_MEDIDOR)
                                || new BigDecimal(new BigDecimal(ordTipoOrden.getCodigo()).intValue()).intValue() == CommonConstant.ORDTIPOORDEN.CAMBIO_MEDIDOR
                                || ordTipoOrden.getCodigo() == CommonConstant.ORDTIPOORDEN.INSTALACION_MEDIDOR
                                || solicitud.getIdTipoSolicitud().getCodigo() == et.com.ejb.atc.data.CommonConstant.SOLTIPOSOLICITUD.NUEVO_SUMINISTRO_GDI_COD
                                || (nucDatosTecnicos.getIdSistemaMedicion().getCodigo()
                                != CommonConstant.NUCSISTEMAMEDICION.DIRECTA_SIN_MEDIDOR
                                && nucServicioMedidor == null
                                && ordTipoOrden.getCodigo() == CommonConstant.ORDTIPOORDEN.REHABILITACION)) {
                            ordOrdenEstadosBean.updateEstadoOrden(orden, CommonConstant.ORDESTADO.ASIGNADA_MEDIDORES);
                        } else {
                            ordOrdenEstadosBean.updateEstadoOrden(orden, CommonConstant.ORDESTADO.PENDIENTE);
                        }

                        //Verifica si el cliente tiene CT / PT
                        if (new BigDecimal(ordTipoOrden.getCodigo()).intValue() == CommonConstant.ORDTIPOORDEN.CAMBIO_MEDIDOR || ordTipoOrden.getRetiraMedidor()) {
                            //Recupera medidor anterior para la orden de cambio de medidor o retiro de medidor
                            if (nucServicioMedidor != null) {
                                NucServicioCt nucServicioCt = nucServicioCtDao.findConectadoByIdServicio(nucServicio.getId());
                                NucServicioPt nucServicioPt = nucServicioPtDao.findConectadoByIdServicio(nucServicio.getId());
                                //Actualiza la tabla ordasignaequipo
                                OrdAsignaEquipo ordAsignaEquipo = new OrdAsignaEquipo();
                                ordAsignaEquipo.setIdOrden(orden);
                                if (nucServicioCt != null && nucServicioCt.getIdCt().getId() != null) {
                                    MedCt ct = medCtDao.findById(nucServicioCt.getIdCt().getId());
                                    ordAsignaEquipo.setIdMedCt(ct);
                                }
                                if (nucServicioPt != null && nucServicioPt.getIdPt().getId() != null) {
                                    MedPt pt = medPtDao.findById(nucServicioPt.getIdPt().getId());
                                    ordAsignaEquipo.setIdMedPt(pt);
                                }
                                ordAsignaEquipo.setIdMedidor(nucServicioMedidor.getIdMedidor());
                                ordAsignaEquipoDao.create(ordAsignaEquipo);
                            }
                        }
                        cr.setResult(GlobalConstant.RESULT_SUCCESS);
                        cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.SUCCESS);
                    }
                }
                solicitud.setFechaActualizacion(calendar.getTime());
                solicitud.setUsuarioActualizacion(_usuarioDto.getId_usuario_security());
                solSolicitudEstadosBean.updateEstadoSolicitud(solicitud, et.com.ejb.atc.data.CommonConstant.SOLESTADO.ORDEN_GENERADA, usuarioDto);
            } else {
                cr.setResult(GlobalConstant.RESULT_ERROR);
                cr.setResultMessage(CommonMessage.GLOBAL.ERROR.EMPTY_INPUT);
            }
        } catch (Exception e) {
            cr.setResultMessage(CommonMessage.GLOBAL.ERROR.ERROR);
            e.printStackTrace();
        }
        return isSaveOrden;
    }

    public CommonResponse findByCodigoEstado(CommonInput input) {
        cr = new CommonResponse();
        try {
            List<OrdOrden> ordOrdenList = ordOrdenDao.findByCodigoEstado(
                    input.getOrdOrden() != null ? input.getOrdOrden().getIdSectorDestino() != null ? input.getOrdOrden().getIdSectorDestino().getSigla() : null : null,
                    input.getOrdOrden() != null ? input.getOrdOrden().getIdTipoOrden() != null ? input.getOrdOrden().getIdTipoOrden().getId() : null : null,
                    input.getOrdEstado().getCodigo(),
                    input.getNucConsumidor() != null ? input.getNucConsumidor().getCodigo() : null,
                    input.getOrdOrden() != null ? input.getOrdOrden().getCodigo() : null);
            if (ordOrdenList != null && ordOrdenList.size() > 0) {
                cr.setOrdOrdenList(ordOrdenList);
                cr.setResult(CommonConstant.RESULT_SUCCESS);
                cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.SUCCESS);
            } else {
                cr.setResult(CommonConstant.RESULT_INFO);
                cr.setResultMessage(CommonMessage.GLOBAL.INFO.EMPTY_LIST);
            }
        } catch (Exception e) {
            cr.setResult(CommonConstant.RESULT_SUCCESS);
            cr.setResultMessage(e.getMessage());
            e.printStackTrace();
        }
        return cr;
    }

    public CommonResponse findAll() {
        cr = new CommonResponse();
        try {
            List<OrdOrden> ordOrdenList = ordOrdenDao.findAll();
            if (ordOrdenList != null && ordOrdenList.size() > 0) {
                cr.setOrdOrdenList(ordOrdenList);
                cr.setResult(CommonConstant.RESULT_SUCCESS);
                cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.SUCCESS);
            } else {
                cr.setResult(CommonConstant.RESULT_INFO);
                cr.setResultMessage(CommonMessage.GLOBAL.INFO.EMPTY_LIST);
            }
        } catch (Exception e) {
            cr.setResult(CommonConstant.RESULT_SUCCESS);
            cr.setResultMessage(e.getMessage());
            e.printStackTrace();
        }
        return cr;
    }

    public DataTable searchOrdenServicio(DataTable dataTable) {
        int rowsTotal = 0;
        DataTable dt = new DataTable();
        List<Object> resultList = new ArrayList<Object>();
        try {
            dt = dataTable;
            String search = "";
            HashMap map = null;
            if (dt.getSearch() != null && !dt.getSearch().equals("")) {
                map = new HashMap((Map) dt.getSearch());
                search = String.valueOf(map.get("value"));
            }
            resultList = ordOrdenDao.search(search, dt.getColumns(), dt.getOrder(), dt.getLength(), dt.getStart());
            if (resultList != null && resultList.size() > 0) {
                Iterator it = resultList.iterator();
                Object[] result = (Object[]) it.next();
                rowsTotal = ((BigInteger) result[result.length - 1]).intValue();
            }
            dt.setRecordsTotal(rowsTotal);
            dt.setRecordsFiltered(rowsTotal);
            dt.setData(resultList);
        } catch (Exception ex) {
            dt.setRecordsTotal(rowsTotal);
            dt.setRecordsFiltered(rowsTotal);
            dt.setData(resultList);
        }
        return dt;
    }

    public DataTable search(DataTable dataTable) {
        int rowsTotal = 0;
        DataTable dt = new DataTable();
        List<Object> resultList = new ArrayList<Object>();
        try {
            dt = dataTable;
            String search = "";
            String searchTipoOrden = "";
            String searchNroOrden = "";
            String searchSectorDestino = "";
            String searchAreaDestino = "";
            String searchRutaDesde = "";
            String searchRutaHasta = "";
            String searchFechaEstimada = "";
            String searchFechaEstimadaHasta = "";
            String searchFechaAlta = "";
            String searchFechaAltaHasta = "";
            String searchGeneracion = "";
            String searchGeneracionHasta = "";
            String filtro = "";
            String searchNroConsumidor = "";
            String corte = Integer.toString(CommonConstant.ORDTIPOORDEN.CORTE);
            String suspencionFaltaPago = Integer.toString(CommonConstant.ORDTIPOORDEN.SUSPENSION_FALTA_PAGO);
            String reconexion = Integer.toString(CommonConstant.ORDTIPOORDEN.RECONEXION);
            String rehabilitacion = Integer.toString(CommonConstant.ORDTIPOORDEN.REHABILITACION_FALTA_PAGO);
            String estadoAnulada = Integer.toString(CommonConstant.ORDESTADO.ANULADA);
            String estadoNoRealizada = Integer.toString(CommonConstant.ORDESTADO.NO_REALIZADA);
            String estadoCumplida = Integer.toString(CommonConstant.ORDESTADO.CUMPLIDA);
            String estadoPendienteAplicacion = Integer.toString(CommonConstant.ORDESTADO.PENDIENTE_APLICACION_SISTEMA);
            String estadoPendiente = Integer.toString(CommonConstant.ORDESTADO.PENDIENTE);
            String estadoReanudada = Integer.toString(CommonConstant.ORDESTADO.REANUDADA);
            String estadoCampo = Integer.toString(CommonConstant.ORDESTADO.CAMPO);
            String searchEstadoOrden = "";

            String searchProceso = "";
            HashMap map = null;
            if (dt.getSearch() != null && !dt.getSearch().equals("")) {
                map = new HashMap((Map) dt.getSearch());
                search = String.valueOf(map.get("value"));
                filtro = String.valueOf(map.get("filtro"));
                searchTipoOrden = String.valueOf(map.get("tipoOrden"));
                searchNroOrden = String.valueOf(map.get("nroOrden"));
                searchSectorDestino = String.valueOf(map.get("sectorDestino"));
                searchAreaDestino = String.valueOf(map.get("areaDestino"));
                searchRutaDesde = String.valueOf(map.get("rutaDesde"));
                searchRutaHasta = String.valueOf(map.get("rutaHasta"));
                searchFechaEstimada = String.valueOf(map.get("fechaEstimada"));
                searchFechaEstimadaHasta = String.valueOf(map.get("fechaEstimadaHasta"));
                searchFechaAlta = String.valueOf(map.get("fechaAlta"));
                searchFechaAltaHasta = String.valueOf(map.get("fechaAltaHasta"));
                searchGeneracion = String.valueOf(map.get("fechaGeneracion"));
                searchGeneracionHasta = String.valueOf(map.get("fechaGeneracionHasta"));
                searchProceso = String.valueOf(map.get("proceso"));
                searchEstadoOrden = String.valueOf(map.get("estadoOrden"));
                searchNroConsumidor = String.valueOf(map.get("nroConsumidor"));
            }
            if (filtro.equals("gestion")) {
                resultList = ordOrdenDao.searchByTipoOrden(search, searchTipoOrden, searchSectorDestino, searchAreaDestino, searchRutaDesde, searchRutaHasta, corte, suspencionFaltaPago, reconexion, rehabilitacion,
                        searchFechaEstimada, searchFechaEstimadaHasta, searchFechaAlta, searchFechaAltaHasta, dt.getColumns(), dt.getOrder(), dt.getLength(), dt.getStart(), searchEstadoOrden);
            } else if (filtro.equals("mantenimiento")) {
                resultList = ordOrdenDao.searchMantenimiento(search, searchProceso, corte, suspencionFaltaPago, reconexion, rehabilitacion, estadoCampo, estadoAnulada, estadoNoRealizada, estadoCumplida, estadoPendienteAplicacion, searchTipoOrden, searchNroOrden, searchGeneracion, searchGeneracionHasta, dt.getColumns(), dt.getOrder(), dt.getLength(), dt.getStart(), searchRutaDesde, searchRutaHasta, searchAreaDestino, searchNroConsumidor);
            } else if (filtro.equals("asignaTrabajo")) {
                resultList = ordOrdenDao.searchAsignaTrabajo(search, corte, suspencionFaltaPago, estadoPendiente, estadoReanudada, searchGeneracion, searchGeneracionHasta, dt.getColumns(), dt.getOrder(), dt.getLength(), dt.getStart());
            } else {
                resultList = ordOrdenDao.search2(search, searchTipoOrden, searchSectorDestino, searchAreaDestino, searchRutaDesde, searchRutaHasta, dt.getColumns(), dt.getOrder(), dt.getLength(), dt.getStart());
            }
            if (resultList != null && resultList.size() > 0) {
                Iterator it = resultList.iterator();
                Object[] result = (Object[]) it.next();
                rowsTotal = ((BigInteger) result[result.length - 1]).intValue();
            }
            dt.setRecordsTotal(rowsTotal);
            dt.setRecordsFiltered(rowsTotal);
            dt.setData(resultList);
        } catch (Exception ex) {
            dt.setRecordsTotal(rowsTotal);
            dt.setRecordsFiltered(rowsTotal);
            dt.setData(resultList);
        }
        return dt;
    }

    public DataTable searchInterna(DataTable dataTable) {
        int rowsTotal = 0;
        DataTable dt = new DataTable();
        List<Object> resultList = new ArrayList<Object>();
        try {
            dt = dataTable;
            String search = "";
            HashMap map = null;
            if (dt.getSearch() != null && !dt.getSearch().equals("")) {
                map = new HashMap((Map) dt.getSearch());
                search = String.valueOf(map.get("value"));
            }
            resultList = ordOrdenDao.searchInterna(search, dt.getColumns(), dt.getOrder(), dt.getLength(), dt.getStart());
            if (resultList != null && resultList.size() > 0) {
                Iterator it = resultList.iterator();
                Object[] result = (Object[]) it.next();
                rowsTotal = ((BigInteger) result[result.length - 1]).intValue();
            }
            dt.setRecordsTotal(rowsTotal);
            dt.setRecordsFiltered(rowsTotal);
            dt.setData(resultList);
        } catch (Exception ex) {
            dt.setRecordsTotal(rowsTotal);
            dt.setRecordsFiltered(rowsTotal);
            dt.setData(resultList);
        }
        return dt;
    }

    public DataTable searchCorteReconexion(DataTable dataTable) {
        int rowsTotal = 0;
        DataTable dt = new DataTable();
        List<Object> resultList = new ArrayList<Object>();
        try {
            dt = dataTable;
            String search = "";
            HashMap map = null;
            if (dt.getSearch() != null && !dt.getSearch().equals("")) {
                map = new HashMap((Map) dt.getSearch());
                search = String.valueOf(map.get("value"));
            }
            resultList = ordOrdenDao.searchCorteReconexion(search, dt.getColumns(), dt.getOrder(), dt.getLength(), dt.getStart());
            if (resultList != null && resultList.size() > 0) {
                Iterator it = resultList.iterator();
                Object[] result = (Object[]) it.next();
                rowsTotal = ((BigInteger) result[result.length - 1]).intValue();
            }
            dt.setRecordsTotal(rowsTotal);
            dt.setRecordsFiltered(rowsTotal);
            dt.setData(resultList);
        } catch (Exception ex) {
            dt.setRecordsTotal(rowsTotal);
            dt.setRecordsFiltered(rowsTotal);
            dt.setData(resultList);
        }
        return dt;
    }

    //Asignar medidor
    public CommonResponse asignarMedidor(CommonInput input) {
        cr = new CommonResponse();
        cr.setResult(GlobalConstant.RESULT_ERROR);
        Boolean isUpdateOrden = false;
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        try {
            OrdOrden ordOrden = input.getOrdOrden();
            if (ordOrden != null) {
                OrdOrden orden = ordOrdenDao.findById(ordOrden.getId());
                MedMedidor medMedidor = medmedidorDao.findById(ordOrden.getIdMedidorConexion().getId());
                Boolean asignaCTPT = false;
                NucServicio nucServicio = nucServicioDao.findByIdConsumidor(orden.getIdConsumidor().getId(), CommonConstant.NUCTIPOSERVICIO.ENERGIA);
                NucDatosTecnicos nucDatosTecnicos = nucDatosTecnicosDao.findByIdServicio(nucServicio.getId());
                if (nucDatosTecnicos.getIdSistemaMedicion().getCodigo() == CommonConstant.NUCSISTEMAMEDICION.INDIRECTA_CON_MEDIDOR_CT_PT || nucDatosTecnicos.getIdSistemaMedicion().getCodigo() == CommonConstant.NUCSISTEMAMEDICION.SEMIDIRECTA_CON_MEDIDOR_CT) {
                    asignaCTPT = true;
                }

                AtcEstadosSector atcEstadosSector = atcEstadosSectorDao.getSectorDestinoAtec(orden.getIdConsumidor().getIdRuta().getIdRemesa().getIdArea().getId(), null, null, orden.getIdEstado().getId(), CommonConstant.ORDESTADO.REVISADA, orden.getIdTipoOrden().getAsignaMedidor(), asignaCTPT);
                if (atcEstadosSector != null) {
                    orden.setIdSectorDestino(atcEstadosSector.getIdSector());
                }
                SolSolicitudOrden solSolicitudOrden = solSolicitudOrdenDao.findByIdOrden(ordOrden.getId());
                List<SolSolicitudOrden> solSolicitudOrdenList = solSolicitudOrdenDao.findByIdSolicitud(solSolicitudOrden.getIdSolicitud().getId());
                //VERIFICA QUE TODAS LAS ORDENES ESTEN LISTAS PARA SU IMPRESION
                Boolean isCumpleEstado = true;
                for (SolSolicitudOrden solicitudOrden : solSolicitudOrdenList) {
                    OrdOrden solOrden = solicitudOrden.getOrdId();

                    solOrden.setIdMedidorConexion(medMedidor);
                    solOrden.setIndConexion(medMedidor.getIndiceEnergia());
                    solOrden.setFechaAsignacionMedidor(calendar.getTime());
                    solOrden.setFechaActualizacion(calendar.getTime());// uncomment when datype timestamp without time zone
                    isUpdateOrden = ordOrdenDao.update(solOrden);
                }

                if (isUpdateOrden == true) {
                    ordOrdenEstadosBean.updateEstadoOrden(orden, CommonConstant.ORDESTADO.REVISADA);
                    Boolean isAsignaMedidor = medmedidorDao.updateAsignado(medMedidor.getId());
                    cr.setResult(GlobalConstant.RESULT_SUCCESS);
                    cr.setResultMessage(et.com.ejb.nuc.data.CommonMessage.GLOBAL.SUCCESS.SUCCESS);
                }

            } else {
                cr.setResult(GlobalConstant.RESULT_ERROR);
                cr.setResultMessage(CommonMessage.GLOBAL.ERROR.EMPTY_INPUT);
            }

        } catch (Exception e) {
            cr.setResultMessage(CommonMessage.GLOBAL.ERROR.ERROR);
            e.printStackTrace();
        }
        return cr;
    }

    public CommonResponse ejecutarOrden(CommonInput input) throws Exception {

        cr = new CommonResponse();
        cr.setResult(GlobalConstant.RESULT_ERROR);
        Boolean isUpdateOrden = false;
        Boolean isUpdateServicio = true;
        Boolean isUpdateMedidor = true;
        Boolean isUpdateMedidorControl = true;
        Boolean isUpdateMedidorDes = true;
        Boolean isUpdateRed = false;
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);

        UsuarioDto usuarioDto = input.getUsuarioDto();

        Boolean isUpdateCt = true;
        Boolean isUpdatePt = true;

        try {
            OrdOrden ordOrden = input.getOrdOrden();
            if (ordOrden == null) {
                cr.setResult(GlobalConstant.RESULT_ERROR);
                cr.setResultMessage(CommonMessage.GLOBAL.ERROR.EMPTY_INPUT);
                return cr;
            }
            OrdOrden orden = new OrdOrden();
            if (ordOrden.getId() != null) {
                orden = ordOrdenDao.findById(ordOrden.getId());
            } else {
                orden = ordOrdenDao.findByCodigoOrden(ordOrden.getCodigo());
            }
            orden.setNumeroProyectoMaterial(Optional.ofNullable(ordOrden.getNumeroProyectoMaterial()).orElse("0"));
            orden.setIdActividad(Optional.ofNullable(ordOrden.getIdActividad()).orElse(0));
            //VALIDA EL SECTOR DESTINO
            if (!usuarioDto.getId_sector().equals(orden.getIdSectorDestino().getId())) {
                cr.setResult(GlobalConstant.RESULT_WARNING);
                cr.setResultMessage(String.format(CommonMessage.ORDORDEN.WARNING.ORDEN_SECTOR_DESTINO));
                return cr;
            }
            OrdTipoOrden tipoOrden = orden.getIdTipoOrden();
            if (orden != null && (orden.getIdEstado().getCodigo().equals(CommonConstant.ORDESTADO.CAMPO)
                    || orden.getIdEstado().getCodigo().equals(CommonConstant.ORDESTADO.REVISADA)
                    || orden.getIdEstado().getCodigo().equals(CommonConstant.ORDESTADO.REANUDADA)
                    || orden.getIdEstado().getCodigo().equals(CommonConstant.ORDESTADO.REANUDADA_EMPRESA))) {

                MedMedidor medidor = orden.getIdMedidorConexion();
                MedMedidor medidorDes = orden.getIdMedidorDesconexion();
                NucServicio nucServicio = nucServicioDao.findByIdConsumidor(orden.getIdConsumidor().getId(), CommonConstant.NUCTIPOSERVICIO.ENERGIA);
                NucDatosTecnicos nucDatosTecnicos = nucDatosTecnicosDao.findByIdServicio(nucServicio.getId());
                int ordEstado = 0;
                Boolean recojoMedidor = false;
                Boolean isValidaOrdenes = false;
                Boolean motivoDemora = false;
                List<OrdOrdenInforme> ordOrdenInformeList = input.getOrdOrdenInformeList();
                List<InsInspeccionMaterial> insInspeccionMaterialList = input.getInsInspeccionMaterialList();
                List<OrdOrdenMaterial> ordOrdenMaterialList = input.getOrdOrdenMaterialList();

                SolSolicitudInspeccion solSolicitudInspeccion = new SolSolicitudInspeccion();
                SolSolicitud solicitud = new SolSolicitud();
                SolSolicitudOrden solSolicitudOrden = solSolicitudOrdenDao.findByIdOrden(orden.getId());
                MedEstado updateEstadoMedidor = new MedEstado();
                if (solSolicitudOrden != null) {
                    solicitud = solSolicitudOrden.getIdSolicitud();
                    solSolicitudInspeccion = solSolicitudInspeccionDao.findByIdSolicitudByEstadoInspeccion(solSolicitudOrden.getIdSolicitud().getId(), CommonConstant.INSESTADO.APROBADA_INSPECTOR);
                    if (solSolicitudInspeccion == null) {
                        solSolicitudInspeccion = solSolicitudInspeccionDao.findByIdSolicitudByEstadoInspeccion(solSolicitudOrden.getIdSolicitud().getId(), CommonConstant.INSESTADO.PROYECTO_CONCLUIDO);
                    }
                }

                //Actualiza la orden de servicio
                if (ordOrdenInformeList != null && !ordOrdenInformeList.isEmpty()) {
                    for (OrdOrdenInforme newOrdOrdenInforme : ordOrdenInformeList) {
                        OrdInforme ordInforme = ordInformeDao.findById(newOrdOrdenInforme.getIdInforme().getId());
                        OrdOrdenInforme ordOrdenInforme = new OrdOrdenInforme();
                        if (ordInforme.getResultadoTrabajo()) {
                            ordEstado = ordInforme.getIdEstadoAsignar().getCodigo();
                            if (ordEstado == CommonConstant.ORDESTADO.CUMPLIDA) {

                                Boolean isRutaCritica = this.validaRutaCritica(orden.getIdConsumidor().getIdRuta().getIdRemesa().getId());
                                if (isRutaCritica) {
                                    ordEstado = CommonConstant.ORDESTADO.PENDIENTE_APLICACION_SISTEMA;
                                } else {
                                    ejecutarOrdenRutaCritica(orden.getIdConsumidor());
                                }
                            }
                        }
                        if (ordInforme.getTipoTrabajo() && (ordInforme.getCodigo() == CommonConstant.TIPOTRABAJO.RECOJO_MEDIDOR || ordInforme.getCodigo() == CommonConstant.TIPOTRABAJO.MEDIDOR_PERDIDO)) {
                            recojoMedidor = true;
                        }
                        if (ordInforme.getMotivoDemora()) {
                            motivoDemora = true;
                        }

                        if (ordInforme.getTipoTrabajo()) {
                            updateEstadoMedidor = ordInforme.getIdEstadoMedidor();

                        }

                        ordOrdenInforme.setIdInforme(newOrdOrdenInforme.getIdInforme());
                        ordOrdenInforme.setIdOrden(orden);
                        ordOrdenInformeDao.create(ordOrdenInforme);
                    }
                }
                if (ordEstado == CommonConstant.ORDESTADO.CUMPLIDA || ordEstado == CommonConstant.ORDESTADO.PENDIENTE_APLICACION_SISTEMA) {
                    cr = this.validateOrdenes(input, ordEstado, motivoDemora, nucDatosTecnicos, recojoMedidor);

                    if (cr.getResult() == 0) { //TRABAJO REALIZADO

                        //Actualiza precintos
                        if (input.getMedRegularizacionConexionList() != null || input.getMedRegularizacionDesconexionList() != null || input.getMedRegularizacionConexionList1() != null || input.getMedRegularizacionDesconexionList1() != null) {
                            et.com.ejb.med.data.CommonInput commonInputMed = new et.com.ejb.med.data.CommonInput();
//                            input.getHeaderDto().setUid(input.getUsuarioDto().getId_usuario());

                            if (orden.getIdTipoOrden().getAsignaMedidor() && !orden.getIdTipoOrden().getRetiraMedidor() && nucDatosTecnicos.getIdSistemaMedicion().getCodigo() != CommonConstant.NUCSISTEMAMEDICION.DIRECTA_SIN_MEDIDOR
                                    || (orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.TRASLADO_MISMA_CASA || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.CAMBIO_ACOMETIDA || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.ANULACION_NEUTRO
                                    || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.SUSPENSION_DEFINITIVA || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.SUSPENSION_TEMPORAL || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.SUSPENSION_FALTA_PAGO || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.INSTALACION_MEDIDOR)) {
                                commonInputMed.setMedMedidor(orden.getIdMedidorConexion());
                                commonInputMed.setMedRegularizacionConexionList(input.getMedRegularizacionConexionList());
                                commonInputMed.setMedRegularizacionDesconexionList(input.getMedRegularizacionDesconexionList());
                                commonInputMed.setIsOrden(input.isIsOrden());
                                commonInputMed.setHeaderDto(input.getHeaderDto());
                                medAsignaPrecintoBean.regularizacion(commonInputMed);
                            }
                            if (orden.getIdTipoOrden().getAsignaMedidor() && orden.getIdTipoOrden().getRetiraMedidor() && nucDatosTecnicos.getIdSistemaMedicion().getCodigo() != CommonConstant.NUCSISTEMAMEDICION.DIRECTA_SIN_MEDIDOR) {
                                commonInputMed.setMedMedidor(orden.getIdMedidorDesconexion());
                                commonInputMed.setMedRegularizacionConexionList(input.getMedRegularizacionConexionList1());
                                commonInputMed.setMedRegularizacionDesconexionList(input.getMedRegularizacionDesconexionList1());
                                commonInputMed.setIsOrden(input.isIsOrden());
                                commonInputMed.setHeaderDto(input.getHeaderDto());
                                medAsignaPrecintoBean.regularizacion(commonInputMed);

                                commonInputMed.setMedMedidor(orden.getIdMedidorConexion());
                                commonInputMed.setMedRegularizacionConexionList(input.getMedRegularizacionConexionList());
                                commonInputMed.setMedRegularizacionDesconexionList(input.getMedRegularizacionDesconexionList());
                                commonInputMed.setIsOrden(input.isIsOrden());
                                commonInputMed.setHeaderDto(input.getHeaderDto());
                                medAsignaPrecintoBean.regularizacion(commonInputMed);
                            }
                            if (!orden.getIdTipoOrden().getAsignaMedidor() && orden.getIdTipoOrden().getRetiraMedidor() && recojoMedidor) {
                                commonInputMed.setMedMedidor(orden.getIdMedidorDesconexion());
                                commonInputMed.setMedRegularizacionConexionList(input.getMedRegularizacionConexionList1());
                                commonInputMed.setMedRegularizacionDesconexionList(input.getMedRegularizacionDesconexionList1());
                                commonInputMed.setIsOrden(input.isIsOrden());
                                commonInputMed.setHeaderDto(input.getHeaderDto());
                                medAsignaPrecintoBean.regularizacion(commonInputMed);
                            }
                        }
                        if (orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.CONTRATO_NUEVO_GDI) {
                            orden.setIndDesconexion(ordOrden.getIndDesconexion() == null ? orden.getIndDesconexion() : ordOrden.getIndDesconexion());
                            orden.setFechaCumplimiento(ordOrden.getFechaCumplimiento());
                            orden.setFechaTranscripcion(calendar.getTime());
                            orden.setFechaApliacacion(calendar.getTime());
                            orden.setFechaActualizacion(calendar.getTime());
                            orden.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                            orden.setIdOperadorCampo1(ordOrden.getIdOperadorCampo1());
                            orden.setIdOperadorCampo2(ordOrden.getIdOperadorCampo2());
                            orden.setObservacion(ordOrden.getObservacion());
                            orden.setFase1(ordOrden.getFase1());
                            orden.setFase2(ordOrden.getFase2());
                            orden.setFase3(ordOrden.getFase3());
                            orden.setFase4(ordOrden.getFase4());
                            ordOrdenDao.update(orden);
                            isUpdateMedidor = this.updateMedidor(orden, tipoOrden, medidor, ordEstado, 'C', usuarioDto);
                            Integer idConsumidor = orden.getIdConsumidor().getId();
                            //MedMedidor medidorControl = orden.getIdMedidorConexion();
                            OrdOrden ordenControl = ordOrdenDao.findByOrdenInstalacionControlGdi(idConsumidor);
                            MedMedidor medidorControl = ordenControl.getIdMedidorConexion();
                            ordenControl.setIndDesconexion(ordenControl.getIndDesconexion() == null ? ordenControl.getIndDesconexion() : ordenControl.getIndDesconexion());
                            ordenControl.setFechaCumplimiento(ordenControl.getFechaCumplimiento());
                            ordenControl.setFechaTranscripcion(calendar.getTime());
                            ordenControl.setFechaApliacacion(calendar.getTime());
                            ordenControl.setFechaActualizacion(calendar.getTime());
                            ordenControl.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                            ordenControl.setIdOperadorCampo1(orden.getIdOperadorCampo1());
                            ordenControl.setIdOperadorCampo2(orden.getIdOperadorCampo2());
                            ordenControl.setObservacion(orden.getObservacion());
                            ordenControl.setFase1(orden.getFase1());
                            ordenControl.setFase2(orden.getFase2());
                            ordenControl.setFase3(orden.getFase3());
                            ordenControl.setFase4(orden.getFase4());
                            ordOrdenDao.update(ordenControl);
                            isUpdateMedidorControl = this.updateMedidor(ordenControl, tipoOrden, medidorControl, ordEstado, 'C', usuarioDto);
                        } else {
                            orden.setIndDesconexion(ordOrden.getIndDesconexion() == null ? orden.getIndDesconexion() : ordOrden.getIndDesconexion());
                            orden.setFechaCumplimiento(ordOrden.getFechaCumplimiento());
                            orden.setFechaTranscripcion(calendar.getTime());
                            orden.setFechaApliacacion(calendar.getTime());
                            orden.setFechaActualizacion(calendar.getTime());
                            orden.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                            orden.setIdOperadorCampo1(ordOrden.getIdOperadorCampo1());
                            orden.setIdOperadorCampo2(ordOrden.getIdOperadorCampo2());
                            orden.setObservacion(ordOrden.getObservacion());
                            orden.setFase1(ordOrden.getFase1());
                            orden.setFase2(ordOrden.getFase2());
                            orden.setFase3(ordOrden.getFase3());
                            orden.setFase4(ordOrden.getFase4());

                            orden.setCoordConexionX(ordOrden.getCoordConexionX());
                            orden.setCoordConexionY(ordOrden.getCoordConexionY());
                            orden.setCoordMedicionX(ordOrden.getCoordMedicionX());
                            orden.setCoordMedicionY(ordOrden.getCoordMedicionY());

                            //Nro Sticker
                            if (orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.CORTE) {
                                orden.setNumeroSticker(ordOrden.getNumeroSticker());
                            }
                            //ACTUALIZA EL INDICE DE CONEXION EN REHABILITACIONES POR CONEXION ARBITRARIA
                            if (orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.RECONEXION || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.REHABILITACION || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.REHABILITACION_INTERNA || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.REHABILITACION_FALTA_PAGO) {
                                if (orden.getIndConexion() != null) {
                                    orden.setIndConexion(ordOrden.getIndDesconexion() == null ? (ordOrden.getIndConexion() != null ? ordOrden.getIndConexion() : orden.getIndConexion()) : ordOrden.getIndDesconexion());
                                    orden.setIndDesconexion(null);
                                }
                            }
                            //ACTUALIZA LA ORDEN DE SERVICIO
                            ordOrdenDao.update(orden);

                        }
                        if (orden.getIdTipoOrden().getId() == CommonConstant.ORDTIPOORDEN.SUSPENSION_FALTA_PAGO && recojoMedidor) {
                            this.verificarRehabilitacion(orden);
                        }
                        //this.
                        //Actualiza materiales de la inspeccion
                        if (insInspeccionMaterialList != null && !insInspeccionMaterialList.isEmpty()) {
                            for (InsInspeccionMaterial updateInsInspeccionMaterial : insInspeccionMaterialList) {
                                if (updateInsInspeccionMaterial.getId() != null) {
                                    InsInspeccionMaterial insInspeccionMaterial = insInspeccionMaterialDao.findById(updateInsInspeccionMaterial.getId());
                                    //if (insInspeccionMaterial != null) {
                                    insInspeccionMaterial.setCantidadReal(updateInsInspeccionMaterial.getCantidadReal());
                                    insInspeccionMaterial.setFechaActualizacion(calendar.getTime());
                                    insInspeccionMaterial.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                                    insInspeccionMaterialDao.update(insInspeccionMaterial);
                                } else {
                                    InsInspeccionMaterial newInsInspeccionMaterial = new InsInspeccionMaterial();
                                    newInsInspeccionMaterial.setIdMaterial(updateInsInspeccionMaterial.getIdMaterial());
                                    newInsInspeccionMaterial.setIdInspeccion(solSolicitudInspeccion.getIdInspeccion());
                                    newInsInspeccionMaterial.setCantidadEstimada(updateInsInspeccionMaterial.getCantidadReal());
                                    newInsInspeccionMaterial.setCantidadReal(updateInsInspeccionMaterial.getCantidadReal());
                                    newInsInspeccionMaterial.setPropiedadEmpresa(updateInsInspeccionMaterial.getPropiedadEmpresa());
                                    newInsInspeccionMaterial.setFechaRegistro(calendar.getTime());
                                    newInsInspeccionMaterial.setUsuarioRegistro(usuarioDto.getId_usuario_security());
                                    newInsInspeccionMaterial.setFechaActualizacion(calendar.getTime());
                                    newInsInspeccionMaterial.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                                    insInspeccionMaterialDao.create(newInsInspeccionMaterial);

                                }
                            }
                        }
                        if (ordOrdenMaterialList != null && !ordOrdenMaterialList.isEmpty()) {
                            for (OrdOrdenMaterial updateOrdOrdenMaterial : ordOrdenMaterialList) {
                                if (updateOrdOrdenMaterial.getId() != null) {
                                    OrdOrdenMaterial ordOrdenMaterial = ordOrdenMaterialDao.findById(updateOrdOrdenMaterial.getId());
                                    ordOrdenMaterial.setCantidadReal(updateOrdOrdenMaterial.getCantidadReal());
                                    ordOrdenMaterial.setFechaActualizacion(calendar.getTime());
                                    ordOrdenMaterial.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                                    ordOrdenMaterialDao.update(ordOrdenMaterial);
                                } else {
                                    OrdOrdenMaterial newOrdOrdenMaterial = new OrdOrdenMaterial();
                                    newOrdOrdenMaterial.setIdMaterial(updateOrdOrdenMaterial.getIdMaterial());
                                    newOrdOrdenMaterial.setIdOrden(orden);
                                    newOrdOrdenMaterial.setCantidadEstimada(updateOrdOrdenMaterial.getCantidadReal());
                                    newOrdOrdenMaterial.setCantidadReal(updateOrdOrdenMaterial.getCantidadReal());
                                    newOrdOrdenMaterial.setPropiedadEmpresa(updateOrdOrdenMaterial.getPropiedadEmpresa());
                                    newOrdOrdenMaterial.setFechaRegistro(calendar.getTime());
                                    newOrdOrdenMaterial.setUsuarioRegistro(usuarioDto.getId_usuario_security());
                                    newOrdOrdenMaterial.setFechaActualizacion(calendar.getTime());
                                    newOrdOrdenMaterial.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                                    ordOrdenMaterialDao.create(newOrdOrdenMaterial);

                                }
                            }
                        }
                        //Crea consumidor red tecnica
//                        if (orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.CONTRATO_NUEVO) {
//                            isUpdateRed = createRedTecnicaConsumidor(orden);
//                        }
                        //SI EL TIPO DE ORDEN ES CAMBIO DE MEDIDOR TIENE QUE ACTUALIZAR MOTIVO Y CONCLUSION
                        if (orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.CAMBIO_MEDIDOR
                                && input.getOrdMotivoConclucion() != null
                                && input.getOrdMotivoConclucion() != null) {
                            MedMotivo medMotivo = medMotivoDao.findById(input.getOrdMotivoConclucion().getIdMotivo().getId());
                            MedConclucion medConclucion = medConclucionDao.findById(input.getOrdMotivoConclucion().getIdConclucion().getId());

                            OrdMotivoConclucion ordMotivoConclucion = new OrdMotivoConclucion();
                            ordMotivoConclucion.setIdOrden(orden);
                            ordMotivoConclucion.setIdMotivo(medMotivo);
                            ordMotivoConclucion.setIdConclucion(medConclucion);
                            ordMotivoConclucion.setFechaRegistro(calendar.getTime());
                            ordMotivoConclucion.setFechaActualizacion(calendar.getTime());
                            ordMotivoConclucion.setUsuarioRegistro(usuarioDto.getId_usuario_security());
                            ordMotivoConclucion.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                            ordMotivoConclucionDao.create(ordMotivoConclucion);

                            if (ordOrden.getNroHojaRevision() != null) {
                                orden.setNroHojaRevision(ordOrden.getNroHojaRevision());
                            }
                            if (ordOrden.getNumeroEnsayo() != null) {
                                orden.setNumeroEnsayo(ordOrden.getNumeroEnsayo());
                            }
                        }

                        // Verifica si tiene equipo de medicion
                        OrdAsignaEquipo ordAsignaEquipo = new OrdAsignaEquipo();
                        if (orden.getIdMedidorConexion() != null) {
                            ordAsignaEquipo = ordAsignaEquipoDao.findByIdOrdenMedidor(orden.getId(), orden.getIdMedidorConexion().getId());
                        }
                        OrdAsignaEquipo ordAsignaEquipoAnt = new OrdAsignaEquipo();
                        if (orden.getIdMedidorDesconexion() != null) {
                            ordAsignaEquipoAnt = ordAsignaEquipoDao.findByIdOrdenMedidor(orden.getId(), orden.getIdMedidorDesconexion().getId());
                        }
                        //Actualiza el multiplicador del medidor
                        if (medidor != null && ordAsignaEquipo != null) {
                            if (orden.getMultiplicadorCalculado() == null || orden.getMultiplicadorCalculado().compareTo(new BigDecimal(0)) == 0) {
                                MedCodigoMedidor medCodigoMedidor = medCodigoMedidorDao.findById(medidor.getIdCodigoMedidor().getId());

                                BigDecimal multiplicadorCalculadoMed = medCodigoMedidor.getConstantePropia();
                                if (multiplicadorCalculadoMed.compareTo(new BigDecimal(0)) == 0) {
                                    multiplicadorCalculadoMed = new BigDecimal(1);
                                } else if (multiplicadorCalculadoMed == null) {
                                    NucServicioCt nucServicioCt = nucServicioCtDao.findConectadoByIdServicio(nucServicio.getId());
                                    NucServicioPt nucServicioPt = nucServicioPtDao.findConectadoByIdServicio(nucServicio.getId());

                                    if (nucServicioCt != null && nucServicioCt.getIdCt().getId() != null) {
                                        MedCt ct = medCtDao.findById(nucServicioCt.getIdCt().getId());
                                        multiplicadorCalculadoMed = multiplicadorCalculadoMed.multiply(ct.getRelacion());
                                    }
                                    if (nucServicioPt != null && nucServicioPt.getIdPt().getId() != null) {
                                        MedPt pt = medPtDao.findById(nucServicioPt.getIdPt().getId());
                                        multiplicadorCalculadoMed = multiplicadorCalculadoMed.multiply(pt.getRelacion());
                                    }

                                }
                                medidor.setMultiplicadorCalculado(multiplicadorCalculadoMed);
                                medMedidorDao.update(medidor);
                            } else {
                                medidor.setMultiplicadorCalculado(orden.getMultiplicadorCalculado());
                                medMedidorDao.update(medidor);
                            }

                        }

//                        if (orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.CONTRATO_NUEVO) {
//                            recojoMedidor = true;
//                        }
                        if (orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.CONTRATO_NUEVO || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.REHABILITACION_FALTA_PAGO
                                || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.REHABILITACION
                                || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.REHABILITACION_INTERNA
                                || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.INSTALACION_MEDIDOR) {
                            List<OrdOrdenEstado> ordenEstadoList = ordOrdenEstadosDao.getOrdenEstado(orden.getId(), CommonConstant.ORDESTADO.REVISADA);

                            if (ordenEstadoList != null && !ordenEstadoList.isEmpty()) {
                                recojoMedidor = true;

                            }
                        }
                        //Actualizar medidores y Actualiza historico de medidor ojo falta validar si va actualizar el indice
//                        if (orden.getIdTipoOrden().getAsignaMedidor() && !orden.getIdTipoOrden().getRetiraMedidor() && nucDatosTecnicos.getIdSistemaMedicion().getCodigo() != CommonConstant.NUCSISTEMAMEDICION.DIRECTA_SIN_MEDIDOR && recojoMedidor) {
                        if (orden.getIdTipoOrden().getAsignaMedidor() && !orden.getIdTipoOrden().getRetiraMedidor() && recojoMedidor) {
                            NucServicioMedidor nucServicioMedidorCon = nucServicioMedidorDao.findByMedidorConectadoMedidor(nucServicio.getId(), medidor.getId());
                            if (nucServicioMedidorCon == null) {
                                isUpdateMedidor = this.updateMedidor(orden, tipoOrden, medidor, ordEstado, 'C', usuarioDto);
                            }
                            if (ordAsignaEquipo != null) {
                                if (ordAsignaEquipo.getIdMedCt() != null && ordAsignaEquipo.getIdMedCt().getId() != null) {
                                    isUpdateCt = this.updateCT(orden, tipoOrden, ordAsignaEquipo, ordEstado, 'C', usuarioDto);
                                }
                                if (ordAsignaEquipo.getIdMedPt() != null && ordAsignaEquipo.getIdMedPt().getId() != null) {
                                    isUpdatePt = this.updatePT(orden, tipoOrden, ordAsignaEquipo, ordEstado, 'C', usuarioDto);
                                }
                            }
                        }
                        if (orden.getIdTipoOrden().getAsignaMedidor() && orden.getIdTipoOrden().getRetiraMedidor() && nucDatosTecnicos.getIdSistemaMedicion().getCodigo() != CommonConstant.NUCSISTEMAMEDICION.DIRECTA_SIN_MEDIDOR) {
                            NucServicioMedidor nucServicioMedidorDes = nucServicioMedidorDao.findByMedidor(medidorDes.getId());
                            NucLecturaMedidor nucLecturaMedidor = new NucLecturaMedidor();
                            if (nucServicioMedidorDes != null) {
                                nucLecturaMedidor = nucLecturaMedidorDao.findByServicioMedidor(nucServicioMedidorDes.getId());
                            }
                            Date fechaUltimoIndiceDes = new Date();
                            if (ordEstado == CommonConstant.ORDESTADO.CUMPLIDA) {
                                //CAMBIO DE MEDIDOR  - REGISTRA CONSUMO ADICIONAL
                                if (nucLecturaMedidor != null && nucLecturaMedidor.getIndiceUltimo() != null) {
                                    fechaUltimoIndiceDes = nucLecturaMedidor.getFechaUltimoIndice();
                                    //Actualiza el multiplicador calculado del medidor de desconexion
                                    if (medidorDes.getMultiplicadorCalculado() == null) {
                                        MedCodigoMedidor medCodigoMedidor = medCodigoMedidorDao.findById(medidorDes.getIdCodigoMedidor().getId());

                                        BigDecimal multiplicadorCalculadoMedDesc = medCodigoMedidor.getConstantePropia();
                                        if (multiplicadorCalculadoMedDesc.compareTo(new BigDecimal(0)) == 0) {
                                            multiplicadorCalculadoMedDesc = new BigDecimal(1);
                                        } else if (multiplicadorCalculadoMedDesc == null) {
                                            NucServicioCt nucServicioCt = nucServicioCtDao.findConectadoByIdServicio(nucServicio.getId());
                                            NucServicioPt nucServicioPt = nucServicioPtDao.findConectadoByIdServicio(nucServicio.getId());

                                            if (nucServicioCt != null && nucServicioCt.getIdCt().getId() != null) {
                                                MedCt ct = medCtDao.findById(nucServicioCt.getIdCt().getId());
                                                multiplicadorCalculadoMedDesc = multiplicadorCalculadoMedDesc.multiply(ct.getRelacion());
                                            }
                                            if (nucServicioPt != null && nucServicioPt.getIdPt().getId() != null) {
                                                MedPt pt = medPtDao.findById(nucServicioPt.getIdPt().getId());
                                                multiplicadorCalculadoMedDesc = multiplicadorCalculadoMedDesc.multiply(pt.getRelacion());
                                            }

                                        }
                                        medidorDes.setMultiplicadorCalculado(multiplicadorCalculadoMedDesc);
                                        medMedidorDao.update(medidorDes);
                                    }
                                    //CONSUMO ADICIONAL
                                    NucNivelDemanda nucNivelDemanda = nucNivelDemandaDao.findById(nucServicio.getIdCategoria().getIdNivelDemanda().getId());
                                    if (nucNivelDemanda.getCodigo() == CommonConstant.NIVEL_DEMANDA.PEQUENA || nucNivelDemanda.getCodigo() == CommonConstant.NIVEL_DEMANDA.MEDIANA) {
                                        if (nucNivelDemanda.getCodigo() == CommonConstant.NIVEL_DEMANDA.MEDIANA) {
                                            BigDecimal indiceBA = ordOrden.getEnergiaBloqueAlto() == null ? new BigDecimal(0) : ordOrden.getEnergiaBloqueAlto();
                                            BigDecimal indiceBM = ordOrden.getEnergiaBloqueMedio() == null ? new BigDecimal(0) : ordOrden.getEnergiaBloqueMedio();
                                            BigDecimal indiceBB = ordOrden.getEnergiaBloqueBajo() == null ? new BigDecimal(0) : ordOrden.getEnergiaBloqueBajo();

                                            BigDecimal indiceTotal = new BigDecimal(0);

                                            if (ordOrden.getIndDesconexion() == null) {
                                                ordOrden.setIndDesconexion(indiceBA.add(indiceBM).add(indiceBB));
                                            }
                                        }
                                        BigDecimal consumoAdicional = lecInformacionAdicionalBean.calcularConsumo(medidorDes.getId(), nucLecturaMedidor.getIndiceUltimo(), ordOrden.getIndDesconexion());
                                        if (consumoAdicional.compareTo(new BigDecimal(0)) > 0) {
                                            int tipo = LecturasParametros.TipoMedKwhAdicionales.CAMBIO_MEDIDOR;
                                            MedKwhAdicionales medKwhAdicionales = new MedKwhAdicionales();
                                            medKwhAdicionales.setIdConsumidor(orden.getIdConsumidor());
                                            medKwhAdicionales.setIdMedidor(medidorDes);//medidor
                                            medKwhAdicionales.setKwhAdicionales(consumoAdicional);
                                            medKwhAdicionales.setEstado(FacturacionParametros.EstadoKWhAdicionales.PENDIENTE.toString());
                                            medKwhAdicionales.setFechaActualizacion(calendar.getTime());
                                            medKwhAdicionales.setFechaRegistro(calendar.getTime());
                                            medKwhAdicionales.setUsuarioRegistro(usuarioDto.getId_usuario_security());
                                            medKwhAdicionales.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                                            medKwhAdicionales.setTipo(tipo);
                                            medKwhAdicionales.setIdOrden(orden.getId());
                                            medKwhAdicionalesDao.create(medKwhAdicionales);
                                        }
                                    }
                                    if (nucNivelDemanda.getCodigo() == CommonConstant.NIVEL_DEMANDA.GRANDEMANDA) {
                                        BigDecimal ultimoIndiceLectura = nucLecturaMedidor.getIndiceUltimo() == null ? new BigDecimal(0) : nucLecturaMedidor.getIndiceUltimo();
                                        BigDecimal ultimoIndiceBA = nucLecturaMedidor.getIndiceBloqueAltoUltimo() == null ? new BigDecimal(0) : nucLecturaMedidor.getIndiceBloqueAltoUltimo();
                                        BigDecimal ultimoIndiceBM = nucLecturaMedidor.getIndiceBloqueMedioUltimo() == null ? new BigDecimal(0) : nucLecturaMedidor.getIndiceBloqueMedioUltimo();
                                        BigDecimal ultimoIndiceBB = nucLecturaMedidor.getIndiceBloqueBajoUltimo() == null ? new BigDecimal(0) : nucLecturaMedidor.getIndiceBloqueBajoUltimo();
                                        BigDecimal indiceUltimoTotal = new BigDecimal(0);
                                        if (ultimoIndiceLectura.compareTo(new BigDecimal(0)) == 0) {
                                            indiceUltimoTotal = ultimoIndiceBA.add(ultimoIndiceBM).add(ultimoIndiceBB);
                                        } else {
                                            indiceUltimoTotal = ultimoIndiceLectura;
                                        }

                                        BigDecimal indiceBA = ordOrden.getEnergiaBloqueAlto() == null ? new BigDecimal(0) : ordOrden.getEnergiaBloqueAlto();
                                        BigDecimal indiceBM = ordOrden.getEnergiaBloqueMedio() == null ? new BigDecimal(0) : ordOrden.getEnergiaBloqueMedio();
                                        BigDecimal indiceBB = ordOrden.getEnergiaBloqueBajo() == null ? new BigDecimal(0) : ordOrden.getEnergiaBloqueBajo();

                                        BigDecimal indiceTotal = new BigDecimal(0);

                                        if (ordOrden.getIndDesconexion() == null) {
                                            ordOrden.setIndDesconexion(new BigDecimal(0));
                                        }

                                        if (ordOrden.getIndDesconexion().compareTo(new BigDecimal(0)) == 0) {
                                            indiceTotal = indiceBA.add(indiceBM).add(indiceBB);
                                            ordOrden.setIndDesconexion(indiceTotal);
                                        } else {
                                            indiceTotal = ordOrden.getIndDesconexion();
                                        }
                                        Integer idCategoria = nucServicio.getIdCategoria().getId();

                                        HashMap consumoAdicionalGD = lecInformacionAdicionalBean.calcularConsumoGD(idCategoria, medidorDes.getId(), indiceUltimoTotal, ultimoIndiceBA,
                                                ultimoIndiceBM, ultimoIndiceBB, indiceTotal, indiceBA, indiceBM, indiceBB);
                                        BigDecimal consumo = new BigDecimal(consumoAdicionalGD.get("consumo").toString());
                                        BigDecimal consumoAlto = new BigDecimal(consumoAdicionalGD.get("consumoAlto").toString());
                                        BigDecimal consumoMedio = new BigDecimal(consumoAdicionalGD.get("consumoMedio").toString());
                                        BigDecimal consumoBajo = new BigDecimal(consumoAdicionalGD.get("consumoBajo").toString());
                                        if (consumo.compareTo(new BigDecimal(0)) > 0 || consumoAlto.compareTo(new BigDecimal(0)) > 0 || consumoMedio.compareTo(new BigDecimal(0)) > 0 || consumoBajo.compareTo(new BigDecimal(0)) > 0) {

                                            int tipo = LecturasParametros.TipoMedKwhAdicionales.CAMBIO_MEDIDOR;
                                            MedKwhAdicionales medKwhAdicionales = new MedKwhAdicionales();
                                            medKwhAdicionales.setIdConsumidor(orden.getIdConsumidor());
                                            medKwhAdicionales.setIdMedidor(medidorDes);//medidor
                                            medKwhAdicionales.setKwhAdicionales(consumo);
                                            medKwhAdicionales.setKwhAdicionalesBa(consumoAlto);
                                            medKwhAdicionales.setKwhAdicionalesBb(consumoMedio);
                                            medKwhAdicionales.setKwhAdicionalesBb(consumoBajo);
                                            medKwhAdicionales.setEstado(FacturacionParametros.EstadoKWhAdicionales.PENDIENTE.toString());
                                            medKwhAdicionales.setFechaActualizacion(calendar.getTime());
                                            medKwhAdicionales.setFechaRegistro(calendar.getTime());
                                            medKwhAdicionales.setUsuarioRegistro(usuarioDto.getId_usuario_security());
                                            medKwhAdicionales.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                                            medKwhAdicionales.setTipo(tipo);
                                            medKwhAdicionales.setIdOrden(orden.getId());
                                            medKwhAdicionalesDao.create(medKwhAdicionales);
                                        }
                                    }

                                }
                            }
                            isUpdateMedidorDes = this.updateMedidor(orden, tipoOrden, medidorDes, ordEstado, 'D', usuarioDto);
                            isUpdateMedidor = this.updateMedidor(orden, tipoOrden, medidor, ordEstado, 'C', usuarioDto, fechaUltimoIndiceDes);

                            //Si tiene equipo de medicion
                            if (ordAsignaEquipoAnt != null) {
                                if (ordAsignaEquipoAnt.getIdMedCt() != null && ordAsignaEquipoAnt.getIdMedCt().getId() != null) {
                                    isUpdateCt = this.updateCT(orden, tipoOrden, ordAsignaEquipoAnt, ordEstado, 'D', usuarioDto);

                                }
                                if (ordAsignaEquipoAnt.getIdMedPt() != null && ordAsignaEquipoAnt.getIdMedPt().getId() != null) {
                                    isUpdatePt = this.updatePT(orden, tipoOrden, ordAsignaEquipoAnt, ordEstado, 'D', usuarioDto);

                                }
                            }
                            if (ordAsignaEquipo != null) {
                                if (ordAsignaEquipo.getIdMedCt() != null && ordAsignaEquipo.getIdMedCt().getId() != null) {

                                    isUpdateCt = this.updateCT(orden, tipoOrden, ordAsignaEquipo, ordEstado, 'C', usuarioDto);
                                }
                                if (ordAsignaEquipo.getIdMedPt() != null && ordAsignaEquipo.getIdMedPt().getId() != null) {

                                    isUpdatePt = this.updatePT(orden, tipoOrden, ordAsignaEquipo, ordEstado, 'C', usuarioDto);
                                }
                            }
                        }
                        if (!orden.getIdTipoOrden().getAsignaMedidor() && orden.getIdTipoOrden().getRetiraMedidor() && recojoMedidor) {

                            NucServicioMedidor nucServicioMedidorDes = nucServicioMedidorDao.findByMedidor(medidorDes.getId());
                            NucLecturaMedidor nucLecturaMedidor = new NucLecturaMedidor();
                            if (nucServicioMedidorDes != null) {
                                nucLecturaMedidor = nucLecturaMedidorDao.findByServicioMedidor(nucServicioMedidorDes.getId());
                            }
                            if (ordEstado == CommonConstant.ORDESTADO.CUMPLIDA) {
                                //SUSPENSIONES CON RECOJO DE MEDIDOR  - REGISTRA CONSUMO ADICIONAL
                                if (nucLecturaMedidor != null && nucLecturaMedidor.getIndiceUltimo() != null) {
                                    //Actualiza el multiplicador calculado del medidor de desconexion
                                    if (medidorDes.getMultiplicadorCalculado() == null) {
                                        MedCodigoMedidor medCodigoMedidor = medCodigoMedidorDao.findById(medidorDes.getIdCodigoMedidor().getId());

                                        BigDecimal multiplicadorCalculadoMedDesc = medCodigoMedidor.getConstantePropia();
                                        if (multiplicadorCalculadoMedDesc.compareTo(new BigDecimal(0)) == 0) {
                                            multiplicadorCalculadoMedDesc = new BigDecimal(1);
                                        } else if (multiplicadorCalculadoMedDesc == null) {
                                            NucServicioCt nucServicioCt = nucServicioCtDao.findConectadoByIdServicio(nucServicio.getId());
                                            NucServicioPt nucServicioPt = nucServicioPtDao.findConectadoByIdServicio(nucServicio.getId());

                                            if (nucServicioCt != null && nucServicioCt.getIdCt().getId() != null) {
                                                MedCt ct = medCtDao.findById(nucServicioCt.getIdCt().getId());
                                                multiplicadorCalculadoMedDesc = multiplicadorCalculadoMedDesc.multiply(ct.getRelacion());
                                            }
                                            if (nucServicioPt != null && nucServicioPt.getIdPt().getId() != null) {
                                                MedPt pt = medPtDao.findById(nucServicioPt.getIdPt().getId());
                                                multiplicadorCalculadoMedDesc = multiplicadorCalculadoMedDesc.multiply(pt.getRelacion());
                                            }

                                        }
                                        medidorDes.setMultiplicadorCalculado(multiplicadorCalculadoMedDesc);
                                        medMedidorDao.update(medidorDes);
                                    }
                                    BigDecimal indiceBA = ordOrden.getEnergiaBloqueAlto() == null ? new BigDecimal(0) : ordOrden.getEnergiaBloqueAlto();
                                    BigDecimal indiceBM = ordOrden.getEnergiaBloqueMedio() == null ? new BigDecimal(0) : ordOrden.getEnergiaBloqueMedio();
                                    BigDecimal indiceBB = ordOrden.getEnergiaBloqueBajo() == null ? new BigDecimal(0) : ordOrden.getEnergiaBloqueBajo();

                                    BigDecimal indiceTotal = new BigDecimal(0);

                                    if (ordOrden.getIndDesconexion() == null) {
                                        ordOrden.setIndDesconexion(indiceBA.add(indiceBM).add(indiceBB));
                                    }
                                    //CONSUMO ADICIONAL comentado a solicitud DELAPAZ 20.07.2021
                                    NucNivelDemanda nucNivelDemanda = nucNivelDemandaDao.findById(nucServicio.getIdCategoria().getIdNivelDemanda().getId());
                                    if (nucNivelDemanda.getCodigo() == CommonConstant.NIVEL_DEMANDA.PEQUENA || nucNivelDemanda.getCodigo() == CommonConstant.NIVEL_DEMANDA.MEDIANA) {
                                        if (nucNivelDemanda.getCodigo() == CommonConstant.NIVEL_DEMANDA.MEDIANA) {
                                            indiceBA = ordOrden.getEnergiaBloqueAlto() == null ? new BigDecimal(0) : ordOrden.getEnergiaBloqueAlto();
                                            indiceBM = ordOrden.getEnergiaBloqueMedio() == null ? new BigDecimal(0) : ordOrden.getEnergiaBloqueMedio();
                                            indiceBB = ordOrden.getEnergiaBloqueBajo() == null ? new BigDecimal(0) : ordOrden.getEnergiaBloqueBajo();

                                            indiceTotal = new BigDecimal(0);

                                            if (ordOrden.getIndDesconexion() == null) {
                                                ordOrden.setIndDesconexion(indiceBA.add(indiceBM).add(indiceBB));
                                            }
                                        }

                                        BigDecimal consumoAdicional = lecInformacionAdicionalBean.calcularConsumo(medidorDes.getId(), nucLecturaMedidor.getIndiceUltimo(), ordOrden.getIndDesconexion());
                                        if (consumoAdicional.compareTo(new BigDecimal(0)) > 0) {
                                            int tipo = LecturasParametros.TipoMedKwhAdicionales.CAMBIO_MEDIDOR;
                                            MedKwhAdicionales medKwhAdicionales = new MedKwhAdicionales();
                                            medKwhAdicionales.setIdConsumidor(orden.getIdConsumidor());
                                            medKwhAdicionales.setIdMedidor(medidorDes);//medidor
                                            medKwhAdicionales.setKwhAdicionales(consumoAdicional);
                                            medKwhAdicionales.setEstado(FacturacionParametros.EstadoKWhAdicionales.PENDIENTE.toString());
                                            medKwhAdicionales.setFechaActualizacion(calendar.getTime());
                                            medKwhAdicionales.setFechaRegistro(calendar.getTime());
                                            medKwhAdicionales.setUsuarioRegistro(usuarioDto.getId_usuario_security());
                                            medKwhAdicionales.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                                            medKwhAdicionales.setTipo(tipo);
                                            medKwhAdicionales.setIdOrden(orden.getId());
                                            medKwhAdicionalesDao.create(medKwhAdicionales);
                                        }
                                    }
                                    if (nucNivelDemanda.getCodigo() == CommonConstant.NIVEL_DEMANDA.GRANDEMANDA) {
                                        BigDecimal ultimoIndiceLectura = nucLecturaMedidor.getIndiceUltimo() == null ? new BigDecimal(0) : nucLecturaMedidor.getIndiceUltimo();
                                        BigDecimal ultimoIndiceBA = nucLecturaMedidor.getIndiceBloqueAltoUltimo() == null ? new BigDecimal(0) : nucLecturaMedidor.getIndiceBloqueAltoUltimo();
                                        BigDecimal ultimoIndiceBM = nucLecturaMedidor.getIndiceBloqueMedioUltimo() == null ? new BigDecimal(0) : nucLecturaMedidor.getIndiceBloqueMedioUltimo();
                                        BigDecimal ultimoIndiceBB = nucLecturaMedidor.getIndiceBloqueBajoUltimo() == null ? new BigDecimal(0) : nucLecturaMedidor.getIndiceBloqueBajoUltimo();
                                        BigDecimal indiceUltimoTotal = new BigDecimal(0);
                                        if (ultimoIndiceLectura.compareTo(new BigDecimal(0)) == 0) {
                                            indiceUltimoTotal = ultimoIndiceBA.add(ultimoIndiceBM).add(ultimoIndiceBB);
                                        } else {
                                            indiceUltimoTotal = ultimoIndiceLectura;
                                        }

                                        indiceBA = ordOrden.getEnergiaBloqueAlto() == null ? new BigDecimal(0) : ordOrden.getEnergiaBloqueAlto();
                                        indiceBM = ordOrden.getEnergiaBloqueMedio() == null ? new BigDecimal(0) : ordOrden.getEnergiaBloqueMedio();
                                        indiceBB = ordOrden.getEnergiaBloqueBajo() == null ? new BigDecimal(0) : ordOrden.getEnergiaBloqueBajo();

                                        indiceTotal = new BigDecimal(0);

                                        if (orden.getIndDesconexion().compareTo(new BigDecimal(0)) == 0) {
                                            indiceTotal = indiceBA.add(indiceBM).add(indiceBB);
                                        } else {
                                            indiceTotal = ordOrden.getIndDesconexion();
                                        }
                                        Integer idCategoria = nucServicio.getIdCategoria().getId();

                                        HashMap consumoAdicionalGD = lecInformacionAdicionalBean.calcularConsumoGD(idCategoria, medidorDes.getId(), indiceUltimoTotal, ultimoIndiceBA,
                                                ultimoIndiceBM, ultimoIndiceBB, indiceTotal, indiceBA, indiceBM, indiceBB);
                                        BigDecimal consumo = new BigDecimal(consumoAdicionalGD.get("consumo").toString());
                                        BigDecimal consumoAlto = new BigDecimal(consumoAdicionalGD.get("consumoAlto").toString());
                                        BigDecimal consumoMedio = new BigDecimal(consumoAdicionalGD.get("consumoMedio").toString());
                                        BigDecimal consumoBajo = new BigDecimal(consumoAdicionalGD.get("consumoBajo").toString());
                                        if (consumo.compareTo(new BigDecimal(0)) > 0 || consumoAlto.compareTo(new BigDecimal(0)) > 0 || consumoMedio.compareTo(new BigDecimal(0)) > 0 || consumoBajo.compareTo(new BigDecimal(0)) > 0) {

                                            int tipo = LecturasParametros.TipoMedKwhAdicionales.CAMBIO_MEDIDOR;
                                            MedKwhAdicionales medKwhAdicionales = new MedKwhAdicionales();
                                            medKwhAdicionales.setIdConsumidor(orden.getIdConsumidor());
                                            medKwhAdicionales.setIdMedidor(medidorDes);//medidor
                                            medKwhAdicionales.setKwhAdicionales(consumo);
                                            medKwhAdicionales.setKwhAdicionalesBa(consumoAlto);
                                            medKwhAdicionales.setKwhAdicionalesBb(consumoMedio);
                                            medKwhAdicionales.setKwhAdicionalesBb(consumoBajo);
                                            medKwhAdicionales.setEstado(FacturacionParametros.EstadoKWhAdicionales.PENDIENTE.toString());
                                            medKwhAdicionales.setFechaActualizacion(calendar.getTime());
                                            medKwhAdicionales.setFechaRegistro(calendar.getTime());
                                            medKwhAdicionales.setUsuarioRegistro(usuarioDto.getId_usuario_security());
                                            medKwhAdicionales.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                                            medKwhAdicionales.setTipo(tipo);
                                            medKwhAdicionales.setIdOrden(orden.getId());
                                            medKwhAdicionalesDao.create(medKwhAdicionales);
                                        }
                                    }

                                }
                            }

                            isUpdateMedidor = updateMedidor(orden, tipoOrden, medidorDes, ordEstado, 'D', usuarioDto);
                            //Si tiene equipo de medicion
                            if (ordAsignaEquipoAnt != null) {
                                if (ordAsignaEquipoAnt.getIdMedCt() != null && ordAsignaEquipoAnt.getIdMedCt().getId() != null) {
                                    isUpdateCt = this.updateCT(orden, tipoOrden, ordAsignaEquipoAnt, ordEstado, 'D', usuarioDto);

                                }
                                if (ordAsignaEquipoAnt.getIdMedPt() != null && ordAsignaEquipoAnt.getIdMedPt().getId() != null) {
                                    isUpdatePt = this.updatePT(orden, tipoOrden, ordAsignaEquipoAnt, ordEstado, 'D', usuarioDto);

                                }
                            }
                        }
                        if (ordEstado == CommonConstant.ORDESTADO.CUMPLIDA) {
                            //Actualiza el estado del servicio
                            isUpdateServicio = updateEstadoServicio(orden, tipoOrden, usuarioDto);

                            //GENERA CARGOS DE RECONEXION Y REHABILITACION
                            if (ordEstado == CommonConstant.ORDESTADO.CUMPLIDA) {
                                if (tipoOrden.getCodigo() == CommonConstant.ORDTIPOORDEN.RECONEXION || tipoOrden.getCodigo() == CommonConstant.ORDTIPOORDEN.REHABILITACION_FALTA_PAGO) {
                                    // ACTUALIZAR EL ESTADO
                                    System.out.println("orden rehabilitación" + orden.getCodigo() + " estado " + tipoOrden.getIdEstServCump().getId());
                                    NucEstado nucestado = nucEstadoDao.findByCodigo(CommonConstant.NUCESTADOS.CONECTADO);
                                    nucServicio.setIdSubestado(null);
                                    nucServicio.setIdEstado(nucestado);
                                    nucServicio.setFechaEstado(calendar.getTime());
                                    nucServicio.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                                    Boolean generaCargo = Optional.ofNullable(orden.getGeneraCargo()).orElse(true);
                                    if (generaCargo) {

                                        // ACTUALIZAR IMPORTES EN FACTURACION
                                        FacItemFacturacion facItemFacturacionRec = facItemFacturacionDao.findByCodigo(FacturacionParametros.ItemFacturacion.CARGORECONEXION.getCodigo());
                                        FacItemFacturacion facItemFacturacionReh = facItemFacturacionDao.findByCodigo(FacturacionParametros.ItemFacturacion.CARGOREHABILITACION.getCodigo());
                                        Integer facControlTarifaId = facControlTarifaDao.findByResVig();

                                        FacCategoriaTarifa facCategoriaTarifaria = facCategoriaTarifariaDao.findByIdControlTarifa(facControlTarifaId, nucServicio.getIdCategoria().getId());
                                        FacOtrosCargosTarifa facOtrosCargosTarifa = facOtrosCargosTarifaDao.findByIdCategoriaTarifa(facCategoriaTarifaria.getId(), facItemFacturacionReh.getId());

                                        BigDecimal importe = new java.math.BigDecimal(0);
                                        if (facOtrosCargosTarifa != null) {
                                            importe = facOtrosCargosTarifa.getImporte();

                                        } else {
                                            cr.setResultMessage(String.format(et.com.ejb.atc.data.CommonMessage.SOLSOLICITUDCARGOS.ERROR.ERROR_CARGO_CONEXION, facOtrosCargosTarifa));
                                        }
                                        if (tipoOrden.getCodigo() == CommonConstant.ORDTIPOORDEN.RECONEXION) {
                                            facConceptoPeriodoControlDao.insertarNuevoConcepto(orden.getIdConsumidor().getId(), FacturacionParametros.ItemFacturacion.CARGORECONEXION.getCodigo(), importe);
                                        } else {
                                            facConceptoPeriodoControlDao.insertarNuevoConcepto(orden.getIdConsumidor().getId(), FacturacionParametros.ItemFacturacion.CARGOREHABILITACION.getCodigo(), importe);
                                        }
                                    }

                                }
                            }
                        }

                        //PARA LA ACTUALIZACION DE LA TABLA DE CORTES/SUSPENSIONES CON SUS RESPECTIVAS RECONEXIONES Y REHABILITACIONES
                        if (tipoOrden.getCodigo() == CommonConstant.ORDTIPOORDEN.RECONEXION || tipoOrden.getCodigo() == CommonConstant.ORDTIPOORDEN.REHABILITACION_FALTA_PAGO) {
                            Boolean isEmpareja = this.emparejarCorteReconexiones(orden);
                        }

                        //ACTUALIZAR EL ESTADO DEL MEDIDOR
                        if (nucDatosTecnicos.getIdSistemaMedicion().getCodigo() != CommonConstant.NUCSISTEMAMEDICION.DIRECTA_SIN_MEDIDOR) {
                            if (tipoOrden.getCodigo() == CommonConstant.ORDTIPOORDEN.SUSPENSION_TEMPORAL || tipoOrden.getCodigo() == CommonConstant.ORDTIPOORDEN.SUSPENSION_DEFINITIVA || tipoOrden.getCodigo() == CommonConstant.ORDTIPOORDEN.SUSPENSION_FALTA_PAGO) {
                                if (orden.getIdMedidorDesconexion() != null) {
                                    MedMedidor updateMedidor = medmedidorDao.findById(orden.getIdMedidorDesconexion().getId());
                                    updateMedidor.setIdEstado(updateEstadoMedidor);
                                    medmedidorDao.update(updateMedidor);
                                }
                            }
                            if (tipoOrden.getCodigo() == CommonConstant.ORDTIPOORDEN.REHABILITACION || tipoOrden.getCodigo() == CommonConstant.ORDTIPOORDEN.REHABILITACION_INTERNA) {
                                MedMedidor updateMedidor = medmedidorDao.findById(orden.getIdMedidorConexion().getId());
                                updateMedidor.setIdEstado(updateEstadoMedidor);
                                medmedidorDao.update(updateMedidor);
                            }
                            if (tipoOrden.getCodigo() == CommonConstant.ORDTIPOORDEN.REHABILITACION_FALTA_PAGO) {
                                if (!recojoMedidor) {
                                    medMedidorBean.updateConexionConsumidor(orden.getIdMedidorConexion().getId(), orden.getIdConsumidor().getId(), usuarioDto.getId_usuario_security());
                                }
                            }
                        }

                        //ACTUALIZAR EL CORTE COMO EJECUTADO
                        CyrCorteReconexion cyrCorteReconexion = cyrCorteReconexionDao.findByIdCorte(orden.getId());
                        if (cyrCorteReconexion != null) {
                            cyrCorteReconexion.setEjecutado(true);
                            cyrCorteReconexion.setFechaReal(orden.getFechaCumplimiento());
                            cyrCorteReconexion.setFechaActualizacion(calendar.getTime());
                            cyrCorteReconexion.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                            if (tipoOrden.getCodigo() == CommonConstant.ORDTIPOORDEN.CORTE) {
                                cyrCorteReconexion.setDependencia("NO DEPENDE");
                            }
                            //Evalua si se va considerar para calidad
//                            if (cyrCorteReconexion.getSuspension()) {
//
//                            }
                            cyrCorteReconexionDao.update(cyrCorteReconexion);
                        }
                        //ACTUALIZA LAS FASES
                        if (tipoOrden.getCodigo() == CommonConstant.ORDTIPOORDEN.CONTRATO_NUEVO || tipoOrden.getCodigo() == CommonConstant.ORDTIPOORDEN.SUSPENSION_FALTA_PAGO || tipoOrden.getCodigo() == CommonConstant.ORDTIPOORDEN.REHABILITACION_FALTA_PAGO) {
                            nucDatosTecnicos.setFase1(orden.getFase1());
                            nucDatosTecnicos.setFase2(orden.getFase2());
                            nucDatosTecnicos.setFase3(orden.getFase3());
                            nucDatosTecnicos.setFase4(orden.getFase4());
                            nucDatosTecnicosDao.update(nucDatosTecnicos);
                        }
//                        if (isUpdateServicio && isUpdateMedidor && isUpdateMedidorDes) {

                        //ACTUALIZA EL HISTORCO DE ESTADOS
                        if (ordOrden.getObservacion() != null) {
                            ordOrdenEstadosBean.updateEstadoOrden(orden, ordEstado, ordOrden.getObservacion());
                        } else {
                            ordOrdenEstadosBean.updateEstadoOrden(orden, ordEstado);
                        }
                        //ACTUALIZA LAS ORDENES ASOCIADAS
                        Boolean isOrdenSolicitud = false;
                        if (solSolicitudOrden != null) {
                            SolServicio solServicio = solServicioDao.findByIdSolicitud(solSolicitudOrden.getIdSolicitud().getId());
                            SolDatosTecnicos solDatosTecnicos = solDatosTecnicosDao.findByIdServicio(solServicio.getId());
                            //Boolean isActualizaCategoria = false;
                            List<SolSolicitudOrden> solSolicitudOrdenList = solSolicitudOrdenDao.findByIdSolicitud(solSolicitudOrden.getIdSolicitud().getId());
                            for (SolSolicitudOrden solicitudOrden : solSolicitudOrdenList) {
                                if (orden.getId().compareTo(solicitudOrden.getOrdId().getId()) != 0) {
                                    ejecutarOrdenesAsociada(orden, solicitudOrden.getOrdId());
                                }
                                isOrdenSolicitud = true;

                                if (ordEstado == CommonConstant.ORDESTADO.CUMPLIDA) {
                                    NucConsumidor consumidor = nucConsumidorDao.findById(solServicio.getIdConsumidor().getId());
                                    if (solicitudOrden.getIdSolicitud().getIdTipoSolicitud().getCodigo() == et.com.ejb.atc.data.CommonConstant.SOLTIPOSOLICITUD.REHABILITACION_SERVICIO
                                            || solicitudOrden.getIdSolicitud().getIdTipoSolicitud().getCodigo() == et.com.ejb.atc.data.CommonConstant.SOLTIPOSOLICITUD.NUEVO_SUMINISTRO) {
                                        //VERIFICA CANTIDAD DE VARIOS SERVICIOS
                                        //this.validaVariosServicios(solServicio.getIdConsumidor(), solServicio.getIdCategoria());

                                        List<NucConsumidor> nucConsumidorList = nucConsumidorDao.getVariosServicio(consumidor.getNumeroDocumento(), consumidor.getRazonSocial(), 2, 99);
                                        nucConsumidorBean.applyVariosServiciosMasivo(nucConsumidorList, true, usuarioDto);
                                    }
                                    //Verificar si tiene un cambio de categoria para aplicar
                                    if (solicitudOrden.getIdSolicitud().getIdTipoSolicitud().getCodigo() == et.com.ejb.atc.data.CommonConstant.SOLTIPOSOLICITUD.CAMBIO_TARIFA || solicitudOrden.getIdSolicitud().getIdTipoSolicitud().getCodigo() == et.com.ejb.atc.data.CommonConstant.SOLTIPOSOLICITUD.TRASLADO_MISMA_CASA || solicitudOrden.getIdSolicitud().getIdTipoSolicitud().getCodigo() == et.com.ejb.atc.data.CommonConstant.SOLTIPOSOLICITUD.INCREMENTO_CARGA) {
//                                        SolServicio solServicio = solServicioDao.findByIdSolicitud(solicitudOrden.getIdSolicitud().getId());
//                                        SolDatosTecnicos solDatosTecnicos = solDatosTecnicosDao.findByIdServicio(solServicio.getId());

                                        //Actualiza campos a nucleo servicio
                                        if (nucServicio != null) {
                                            nucServicio.setIdCategoria(solServicio.getIdCategoria());
                                            nucServicio.setFechaActualizacion(calendar.getTime());
                                            consumidor.setIdActividadEconomica(solServicio.getIdActividadEconomica());
                                            nucConsumidorDao.update(consumidor);

//                                            //VERIFICA CANTIDAD DE VARIOS SERVICIOS
//                                            this.validaVariosServicios(solServicio.getIdConsumidor(), solServicio.getIdCategoria());
                                            //ACTUALIZA LA CATEGORIA DE ASEO
                                            Boolean isCotizaTAS = this.verificaCotizaTAS(orden.getIdConsumidor().getIdRuta());
                                            if (isCotizaTAS) {
                                                NucServicio servicioTAS = nucServicioDao.findByIdConsumidor(orden.getIdConsumidor().getId(), CommonConstant.NUCTIPOSERVICIO.TAS);
                                                NucAsignaAseo nucAsignaAseo = nucAsignaAseoDao.findByAreaCategoria(orden.getIdConsumidor().getIdRuta().getIdRemesa().getIdArea().getId(), solServicio.getIdCategoria().getId());
                                                NucEstado nucEstadoConectado = nucEstadoDao.findByCodigo(CommonConstant.NUCESTADOS.CONECTADO);

                                                if (servicioTAS != null) {

                                                    servicioTAS.setIdConsumidor(orden.getIdConsumidor());
                                                    servicioTAS.setIdCategoria(nucAsignaAseo.getIdCategoriaAseo());
                                                    servicioTAS.setIdEstado(nucEstadoConectado);
                                                    servicioTAS.setFechaEstado(calendar.getTime());
                                                    servicioTAS.setFechaRegistro(calendar.getTime());
                                                    servicioTAS.setFechaActualizacion(calendar.getTime());
                                                    servicioTAS.setUsuarioRegistro(usuarioDto.getId_usuario_security());
                                                    servicioTAS.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                                                    nucServicioDao.update(servicioTAS);
                                                } else {

                                                    if (nucAsignaAseo != null) {
                                                        NucServicio nucServicioTAS = new NucServicio();
                                                        nucServicioTAS.setIdConsumidor(orden.getIdConsumidor());
                                                        nucServicioTAS.setIdCategoria(nucAsignaAseo.getIdCategoriaAseo());
                                                        nucServicioTAS.setIdEstado(nucEstadoConectado);
                                                        nucServicioTAS.setFechaEstado(calendar.getTime());
                                                        nucServicioTAS.setFechaRegistro(calendar.getTime());
                                                        nucServicioTAS.setFechaActualizacion(calendar.getTime());
                                                        nucServicioTAS.setUsuarioRegistro(usuarioDto.getId_usuario_security());
                                                        nucServicioTAS.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                                                        nucServicioDao.create(nucServicioTAS);
                                                    }
                                                }
                                            }

                                            //Verifica si el tipo de categoria es domiciliaria para continuar con el beneficio de la ley 1886
                                            NucCategoria nucCategoria = nucCategoriaDao.findById(solServicio.getIdCategoria().getId());
                                            if (nucCategoria.getIdTipoCategoria().getId().compareTo(et.com.ejb.atc.data.CommonConstant.NUCTIPOCATEGORIA.DOMICILIARIO) != 0) {
                                                leyHistorialBean.darBajaBeneficioDesdeSolicitud(orden.getIdConsumidor().getId(), et.com.ejb.ley.data.CommonConstant.CodigoMotivoBajaLey1886.CAMBIOCATEGORIA, "", solicitud.getUsuarioActualizacion(), solicitud.getIdAgencia().getId());
                                            }

                                        }

                                        //Actualiza campos a nucleo datos tecnicos
                                        Boolean isUpdateDatosTecnicos = false;
                                        if (nucDatosTecnicos != null) {
                                            nucDatosTecnicos.setIdSistemaMedicion(solDatosTecnicos.getIdSistemaMedicion());
                                            nucDatosTecnicos.setIdPuntoSuministro(solDatosTecnicos.getIdPuntoSuministro());
                                            nucDatosTecnicos.setIdPuntoMedida(solDatosTecnicos.getIdPuntoMedida());
                                            nucDatosTecnicos.setIdVoltajeAsignado(solDatosTecnicos.getIdVoltajeAsignado());
                                            nucDatosTecnicos.setIdVoltajeRed(solDatosTecnicos.getIdVoltajeRed());
                                            nucDatosTecnicos.setPotenciaMaximaDeclarada(solDatosTecnicos.getPotenciaMaximaDeclarada());
                                            nucDatosTecnicos.setPotenciaPuntaDeclarada(solDatosTecnicos.getPotenciaPuntaDeclarada());
                                            nucDatosTecnicos.setIdPuntoSuministro(solDatosTecnicos.getIdPuntoSuministro());
                                            nucDatosTecnicos.setCapacidadInstalada(solDatosTecnicos.getCapacidadInstalada());
                                            nucDatosTecnicos.setPotenciaDemandada(solDatosTecnicos.getPotenciaDemandada());
                                            nucDatosTecnicos.setIdFormaConexion(solDatosTecnicos.getIdFormaConexion());
                                            nucDatosTecnicos.setFase1(orden.getFase1());
                                            nucDatosTecnicos.setFase2(orden.getFase2());
                                            nucDatosTecnicos.setFase3(orden.getFase3());
                                            nucDatosTecnicos.setFase4(orden.getFase4());
                                            isUpdateDatosTecnicos = nucDatosTecnicosDao.update(nucDatosTecnicos);
                                        }

                                    }
                                }
                            }
                            if (isOrdenSolicitud) {
                                solicitud.setFechaActualizacion(orden.getFechaCumplimiento());
                                if (ordEstado == CommonConstant.ORDESTADO.CUMPLIDA) {
                                    solSolicitudEstadosBean.updateEstadoSolicitud(solicitud, et.com.ejb.atc.data.CommonConstant.SOLESTADO.CUMPLIDA, usuarioDto);
                                } else {
                                    solSolicitudEstadosBean.updateEstadoSolicitud(solicitud, et.com.ejb.atc.data.CommonConstant.SOLESTADO.SOL_PENDIENTE_APLICAC_SIS, usuarioDto);
                                }
                            }

                            //Verifica si tiene transformador
                            //NucConsumidor nucConsumidor = nucConsumidorDao.findById(orden.getIdConsumidor().getId());
                            List<SolSolicitudTransformador> solTransformadorList = solSolicitudTransformadorDao.findByIdSolicitud(solSolicitudOrden.getIdSolicitud().getId());
                            for (SolSolicitudTransformador solTransformador : solTransformadorList) {
                                LecConsumidorPerdidasTrafo newLecConsumidorPerdidasTrafo = new LecConsumidorPerdidasTrafo();
                                newLecConsumidorPerdidasTrafo.setIdConsumidor(orden.getIdConsumidor());
                                newLecConsumidorPerdidasTrafo.setTrafoNro(solTransformador.getNumeroTrafo().toString());
                                newLecConsumidorPerdidasTrafo.setTrafoFechaAlta(calendar.getTime());
                                newLecConsumidorPerdidasTrafo.setTrafoCapacidad(solTransformador.getCapacidad());
                                newLecConsumidorPerdidasTrafo.setTrafoPropiedad(solTransformador.getPropiedadEmpresa() == true ? 'E' : 'C');
                                newLecConsumidorPerdidasTrafo.setEstado(1);
                                newLecConsumidorPerdidasTrafo.setFechaRegistro(calendar.getTime());
                                newLecConsumidorPerdidasTrafo.setUsuarioRegistro(usuarioDto.getId_usuario_security());
                                lecConsumidorPerdidasTrafoDao.create(newLecConsumidorPerdidasTrafo);
                            }
                        }
                        isUpdateServicio = nucServicioDao.update(nucServicio);
                        cr.setResult(GlobalConstant.RESULT_SUCCESS);
                        cr.setResultMessage(et.com.ejb.nuc.data.CommonMessage.GLOBAL.SUCCESS.SUCCESS);
//                        }
                    } else {
                        cr.setResultMessage(cr.getResultMessage());
                        cr.setResult(GlobalConstant.RESULT_WARNING);
                    }
                } else {

                    //TRABAJO NO REALIZADO O SUSPENDIDA
                    //TRABAJO NO REALIZADO DE RECONEXION O REHABILITACION
                    if (tipoOrden.getCodigo() == CommonConstant.ORDTIPOORDEN.RECONEXION || tipoOrden.getCodigo() == CommonConstant.ORDTIPOORDEN.REHABILITACION_FALTA_PAGO) {
                        cr.setResultMessage(CommonMessage.ORDORDEN.ERROR.REHABILITACION_NO_REHALIZADA);
                        cr.setResult(CommonConstant.RESULT_WARNING);
                    } else {

                        NucConsumidor nucConsumidor = nucConsumidorDao.findById(orden.getIdConsumidor().getId());

                        NucArea nucArea = nucConsumidor.getIdRuta().getIdRemesa().getIdArea();
                        Boolean asignaCTPT = false;
                        if (nucDatosTecnicos != null) {
                            if (nucDatosTecnicos.getIdSistemaMedicion().getCodigo() == CommonConstant.NUCSISTEMAMEDICION.INDIRECTA_CON_MEDIDOR_CT_PT || nucDatosTecnicos.getIdSistemaMedicion().getCodigo() == CommonConstant.NUCSISTEMAMEDICION.SEMIDIRECTA_CON_MEDIDOR_CT) {
                                asignaCTPT = true;
                            }
                        }
                        AtcEstadosSector atcEstadosSector = atcEstadosSectorDao.getSectorDestinoAtec(nucArea.getId(), null, null, orden.getIdEstado().getCodigo(), ordEstado, orden.getIdTipoOrden().getAsignaMedidor(), asignaCTPT);
                        if (atcEstadosSector != null) {
                            orden.setIdSectorDestino(atcEstadosSector.getIdSector());
                        }
                        orden.setFechaCumplimiento(ordOrden.getFechaCumplimiento());
                        orden.setFechaTranscripcion(calendar.getTime());
                        orden.setFechaApliacacion(calendar.getTime());
                        orden.setFechaActualizacion(calendar.getTime());
                        orden.setIdOperadorCampo1(ordOrden.getIdOperadorCampo1());
                        orden.setIdOperadorCampo2(ordOrden.getIdOperadorCampo2());
                        orden.setObservacion(ordOrden.getObservacion());
                        orden.setUsuarioActualizacion(usuarioDto.getId_usuario_security());

                        ordOrdenDao.update(orden);
                        if (ordOrden.getObservacion() != null) {

                            ordOrdenEstadosBean.updateEstadoOrden(orden, ordEstado, ordOrden.getObservacion());
                        } else {
                            ordOrdenEstadosBean.updateEstadoOrden(orden, ordEstado);
                        }

                        //ACTUALIZA LAS ORDENES ASOCIADAS
                        Boolean isOrdenSolicitud = false;

                        if (solSolicitudOrden != null) {
                            List<SolSolicitudOrden> solSolicitudOrdenList = solSolicitudOrdenDao.findByIdSolicitud(solSolicitudOrden.getIdSolicitud().getId());
                            for (SolSolicitudOrden solicitudOrden : solSolicitudOrdenList) {
                                ejecutarOrdenesAsociada(orden, solicitudOrden.getOrdId());
                                isOrdenSolicitud = true;
                            }
                            if (isOrdenSolicitud && ordEstado == CommonConstant.ORDESTADO.NO_REALIZADA) {
                                solicitud.setFechaActualizacion(orden.getFechaCumplimiento());
                                solSolicitudEstadosBean.updateEstadoSolicitud(solicitud, et.com.ejb.atc.data.CommonConstant.SOLESTADO.CUMPLIDA, usuarioDto);
                            }
                            if (isOrdenSolicitud && ordEstado == CommonConstant.ORDESTADO.SUSPENDIDA || isOrdenSolicitud && ordEstado == CommonConstant.ORDESTADO.SUSPENDIDA_EMPRESA) {
                                solicitud.setFechaActualizacion(orden.getFechaCumplimiento());
                                solSolicitudEstadosBean.updateEstadoSolicitud(solicitud, et.com.ejb.atc.data.CommonConstant.SOLESTADO.ORDEN_SUSPENDIDA, usuarioDto);

                                //CREA DOCUMENTOS ADJUNTOS
                                List<OrdDocumento> ordDocumentoList = input.getOrdDocumentoList();
                                if (ordDocumentoList != null) {
                                    for (OrdDocumento ordDocumento : ordDocumentoList) {
                                        byte[] data = Base64.decodeBase64(ordDocumento.getArchivo());
                                        try {
                                            Files.createDirectories(Paths.get(CommonConstant.PATH_ORDENES_IMAGENES));
                                            String filename = ordDocumento.getNombre() + '_' + Calendar.getInstance().getTimeInMillis();
                                            OutputStream stream = new FileOutputStream(CommonConstant.PATH_ORDENES_IMAGENES + filename);
                                            stream.write(data);
                                            ordDocumento.setNombre(filename);
                                            ordDocumento.setArchivo(null);
                                        } catch (Exception e) {
                                            e.printStackTrace();
                                        }
                                        ordDocumento.setIdOrden(orden);
                                        ordDocumento.setContentType(ordDocumento.getContentType());
                                        ordDocumento.setFechaRegistro(calendar.getTime());
                                        ordDocumento.setFechaActualizacion(calendar.getTime());
                                        if (input.getUsuarioDto() != null) {
                                            ordDocumento.setUsuarioRegistro(input.getUsuarioDto().getId_usuario_security());
                                            ordDocumento.setUsuarioActualizacion(input.getUsuarioDto().getId_usuario_security());
                                        }
                                        OrdOrdenEstado ordOrdenEstado = ordOrdenEstadosDao.getOrdenEstadoAnterior(orden.getId()).get(0);
                                        ordDocumento.setReferencia(ordOrdenEstado.getId().toString());

                                        ordDocumentoDao.create(ordDocumento);

                                    }
                                }
                            }
                        }
                        cr.setResult(GlobalConstant.RESULT_SUCCESS);
                        cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.SUCCESS);
                    }
                }
            } else {
                cr.setResult(GlobalConstant.RESULT_WARNING);
                cr.setResultMessage(String.format(CommonMessage.ORDORDEN.WARNING.ESTADO_INCORRECTO_MODIFICACION_DENEGADA, orden.getIdEstado().getDescripcion()));

            }
            //transaction.commit();            
        } catch (Exception e) {
            cr.setResult(CommonConstant.RESULT_ERROR);
            cr.setResultMessage(CommonMessage.GLOBAL.ERROR.ERROR);
            e.printStackTrace();
            transaction.rollback();
        }
        return cr;
    }

    public CommonResponse ejecutarOrdenInfructuosa(CommonInput input) throws Exception {
        cr = new CommonResponse();
        cr.setResult(GlobalConstant.RESULT_ERROR);

        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);

        UsuarioDto usuarioDto = input.getUsuarioDto();

        try {
            OrdOrden ordOrden = input.getOrdOrden();
            if (ordOrden == null) {
                cr.setResult(GlobalConstant.RESULT_ERROR);
                cr.setResultMessage(CommonMessage.GLOBAL.ERROR.EMPTY_INPUT);
                return cr;
            }
            OrdOrden orden = new OrdOrden();
            if (ordOrden.getId() != null) {
                orden = ordOrdenDao.findById(ordOrden.getId());
            } else {
                orden = ordOrdenDao.findByCodigoOrden(ordOrden.getCodigo());
            }
            //VALIDA EL SECTOR DESTINO
//            if (!usuarioDto.getId_sector().equals(orden.getIdSectorDestino().getId())) {
//                cr.setResult(GlobalConstant.RESULT_WARNING);
//                cr.setResultMessage(String.format(CommonMessage.ORDORDEN.WARNING.ORDEN_SECTOR_DESTINO));
//                return cr;
//            }
            if (orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.RECONEXION || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.REHABILITACION_FALTA_PAGO) {

                OrdTipoOrden tipoOrden = orden.getIdTipoOrden();
                if (orden != null && (orden.getIdEstado().getCodigo().equals(CommonConstant.ORDESTADO.CAMPO))) {

                    List<OrdOrdenInforme> ordOrdenInformeInput = input.getOrdOrdenInforme();
                    for (OrdOrdenInforme OrdOrdenInforme : ordOrdenInformeInput) {
                        OrdOrdenInforme ordOrdenInforme = new OrdOrdenInforme();
                        ordOrdenInforme.setIdInforme(OrdOrdenInforme.getIdInforme());
                        ordOrdenInforme.setIdOrden(orden);
                        ordOrdenInformeDao.create(ordOrdenInforme);
                    }

                    OrdEstado ordEstado = ordEstadoDao.findByCodigoEstado(CommonConstant.ORDESTADO.SUSPENDIDA);
                    NucConsumidor nucConsumidor = nucConsumidorDao.findById(orden.getIdConsumidor().getId());
                    orden.setIdEstado(ordEstado);
                    orden.setFechaCumplimiento(ordOrden.getFechaCumplimiento());
                    orden.setFechaTranscripcion(calendar.getTime());
                    orden.setFechaApliacacion(calendar.getTime());
                    orden.setFechaActualizacion(calendar.getTime());
//                    orden.setIdOperadorCampo1(ordOrden.getIdOperadorCampo1());
//                    orden.setIdOperadorCampo2(ordOrden.getIdOperadorCampo2());
                    orden.setObservacion(ordOrden.getObservacion());
//                    orden.setUsuarioActualizacion(usuarioDto.getId_usuario_security());  

                    ordOrdenDao.update(orden);
                    if (ordOrden.getObservacion() != null) {

                        ordOrdenEstadosBean.updateEstadoOrden(orden, ordEstado.getCodigo(), ordOrden.getObservacion());
                    }

                    //CREA DOCUMENTOS ADJUNTOS
                    List<OrdDocumento> ordDocumentoList = input.getOrdDocumentoList();
                    if (ordDocumentoList != null) {
                        for (OrdDocumento ordDocumento : ordDocumentoList) {
                            byte[] data = Base64.decodeBase64(ordDocumento.getArchivo());
                            try {
                                Files.createDirectories(Paths.get(CommonConstant.PATH_ORDENES_IMAGENES));
                                String filename = Calendar.getInstance().getTimeInMillis() + "_" + ordDocumento.getNombre();
                                OutputStream stream = new FileOutputStream(CommonConstant.PATH_ORDENES_IMAGENES + filename);
                                stream.write(data);
                                ordDocumento.setNombre(filename);
                                ordDocumento.setArchivo(null);
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            ordDocumento.setIdOrden(orden);
                            ordDocumento.setContentType(ordDocumento.getContentType());
                            ordDocumento.setFechaRegistro(calendar.getTime());
                            ordDocumento.setFechaActualizacion(calendar.getTime());
//                            if (input.getUsuarioDto() != null) {
                            ordDocumento.setUsuarioRegistro(orden.getUsuarioRegistro());
                            ordDocumento.setUsuarioActualizacion(orden.getUsuarioActualizacion());
//                                ordDocumento.setUsuarioRegistro(input.getUsuarioDto().getId_usuario_security());
//                                ordDocumento.setUsuarioActualizacion(input.getUsuarioDto().getId_usuario_security());
//                            }
                            OrdOrdenEstado ordOrdenEstado = ordOrdenEstadosDao.getOrdenEstadoAnterior(orden.getId()).get(0);
                            ordDocumento.setReferencia(ordOrdenEstado.getId().toString());
                            ordDocumentoDao.create(ordDocumento);
                        }
                    }
                    cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.SUCCESS);
                    cr.setResult(GlobalConstant.RESULT_SUCCESS);
                } else {
                    cr.setResultMessage(CommonMessage.ORDORDEN.ERROR.INFRUCTUOSA_ORDEN);
                    cr.setResult(CommonConstant.RESULT_WARNING);
                }
            } else {
                cr.setResultMessage(CommonMessage.ORDORDEN.ERROR.VISITA_INFRUCTUOSA);
                cr.setResult(CommonConstant.RESULT_WARNING);
            }
        } catch (Exception e) {
            cr.setResult(CommonConstant.RESULT_ERROR);
            cr.setResultMessage(CommonMessage.GLOBAL.ERROR.ERROR);
            e.printStackTrace();
            transaction.rollback();
        }
        return cr;
    }

    private Boolean verificarRehabilitacion(OrdOrden ordOrden) {
        Boolean result = true;
        OrdOrden ordOrdenRehabitacion;
        List<OrdOrden> ordOrdenList;
        NucSector nucSector;
        OrdEstado ordEstado;
        try {
            ordOrdenList = ordOrdenDao.findByCodigoEstado(null, CommonConstant.ORDTIPOORDEN.REHABILITACION_FALTA_PAGO, CommonConstant.ORDESTADO.CAMPO, ordOrden.getIdConsumidor().getCodigo(), null);
            if (ordOrdenList.size() == 0) {
                ordOrdenList = ordOrdenDao.findByCodigoEstado(null, CommonConstant.ORDTIPOORDEN.REHABILITACION_FALTA_PAGO, CommonConstant.ORDESTADO.PENDIENTE, ordOrden.getIdConsumidor().getCodigo(), null);
            }
            if (ordOrdenList.size() > 0) {
                ordOrdenRehabitacion = ordOrdenList.get(0);
                ordOrdenEstadosBean.updateEstadoOrden(ordOrdenRehabitacion, CommonConstant.ORDESTADO.ASIGNADA_MEDIDORES);
                nucSector = nucSectorDao.findById(2);
                ordOrdenRehabitacion.setIdSectorDestino(nucSector);
                ordEstado = ordEstadoDao.findById(2);
                ordOrdenRehabitacion.setIdEstado(ordEstado);
                ordOrdenRehabitacion.setIdMedidorConexion(null);
                ordOrdenRehabitacion.setIndConexion(null);
                ordOrdenDao.update(ordOrdenRehabitacion);
            }
        } catch (Exception e) {
            result = false;
            e.printStackTrace();
        }
        return result;
    }

    public Boolean updateMedidor(OrdOrden orden, OrdTipoOrden tipoOrden, MedMedidor medidor, int ordEstado, Character estadoAsigRetira, UsuarioDto usuarioDto) {
        cr = new CommonResponse();
        cr.setResult(GlobalConstant.RESULT_ERROR);
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        Boolean isUpdateMedidor = false;
        Boolean isUpdateServicioMedidor = false;
        Boolean isUpdateServicioMedidorDesc = false;
        Boolean isUpdateLecturaMedidor = false;
        Boolean isUpdateMedidorTot = false;
        try {
            if (orden != null && tipoOrden != null && medidor != null) {
                Integer codigoCorrelativo = 1;
                NucServicio nucServicio = nucServicioDao.findByIdConsumidor(orden.getIdConsumidor().getId(), CommonConstant.NUCTIPOSERVICIO.ENERGIA);
                NucServicioMedidor servicioMedidor = nucServicioMedidorDao.findByMedidorConectado(nucServicio.getId());
                NucLecturaMedidor lecturaMedidor = new NucLecturaMedidor();
                if (servicioMedidor != null) {
                    codigoCorrelativo = servicioMedidor.getCodigoCorrelativo();
                    lecturaMedidor = nucLecturaMedidorDao.findByServicioMedidor(servicioMedidor.getId());
                }
                if (tipoOrden.getAsignaMedidor() && estadoAsigRetira.equals('C')) { // tipoOrden.getCodigo() == CommonConstant.ORDTIPOORDEN.CONTRATO_NUEVO
//                    isUpdateMedidor = medmedidorDao.updateConect(medidor.getId());
                    medMedidorBean.updateConexionConsumidor(medidor.getId(), orden.getIdConsumidor().getId(), usuarioDto.getId_usuario_security());
                    isUpdateMedidor = true;
                    if (ordEstado == CommonConstant.ORDESTADO.CUMPLIDA) {

                        codigoCorrelativo = codigoCorrelativo + 1;
                        if (orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.CONTRATO_NUEVO_GDI || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.INSTALACION_MED_CONTROL) {
                            NucServicioMedidor nucServicioMedidor = new NucServicioMedidor();
                            nucServicioMedidor.setIdServicio(nucServicio);
                            nucServicioMedidor.setIdMedidor(medidor);
                            nucServicioMedidor.setConectado(false);
                            nucServicioMedidor.setConectadoFisico(true);
                            nucServicioMedidor.setFechaRegistro(orden.getFechaCumplimiento());
                            nucServicioMedidor.setFechaActualizacion(orden.getFechaCumplimiento());
                            nucServicioMedidor.setUsuarioRegistro(usuarioDto.getId_usuario_security());
                            nucServicioMedidor.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                            nucServicioMedidor.setCodigoCorrelativo(codigoCorrelativo);
                            nucServicioMedidor.setMultiplicadorCalculado(medidor.getMultiplicadorCalculado());
                            isUpdateServicioMedidor = nucServicioMedidorDao.create(nucServicioMedidor);

                            NucLecturaMedidor nucLecturaMedidor = new NucLecturaMedidor();
                            nucLecturaMedidor.setIdServicioMedidor(nucServicioMedidor);
                            nucLecturaMedidor.setIndice(orden.getIndConexion());
                            nucLecturaMedidor.setIndiceUltimo(orden.getIndConexion());
                            nucLecturaMedidor.setFechaUltimoIndice(orden.getFechaCumplimiento());
                            nucLecturaMedidor.setFechaRegistro(orden.getFechaCumplimiento());
                            nucLecturaMedidor.setFechaActualizacion(orden.getFechaCumplimiento());
                            isUpdateLecturaMedidor = nucLecturaMedidorDao.create(nucLecturaMedidor);
                        } else {
                            NucServicioMedidor nucServicioMedidor = new NucServicioMedidor();
                            nucServicioMedidor.setIdServicio(nucServicio);
                            nucServicioMedidor.setIdMedidor(medidor);
                            nucServicioMedidor.setConectado(true);
                            nucServicioMedidor.setFechaRegistro(orden.getFechaCumplimiento());
                            nucServicioMedidor.setFechaActualizacion(orden.getFechaCumplimiento());
                            nucServicioMedidor.setUsuarioRegistro(usuarioDto.getId_usuario_security());
                            nucServicioMedidor.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                            nucServicioMedidor.setCodigoCorrelativo(codigoCorrelativo);
                            nucServicioMedidor.setMultiplicadorCalculado(medidor.getMultiplicadorCalculado());
                            isUpdateServicioMedidor = nucServicioMedidorDao.create(nucServicioMedidor);

                            NucLecturaMedidor nucLecturaMedidor = new NucLecturaMedidor();
                            nucLecturaMedidor.setIdServicioMedidor(nucServicioMedidor);
                            nucLecturaMedidor.setIndice(orden.getIndConexion());
                            nucLecturaMedidor.setIndiceUltimo(orden.getIndConexion());
                            if (tipoOrden.getCodigo() == CommonConstant.ORDTIPOORDEN.CONTRATO_NUEVO || tipoOrden.getCodigo() == CommonConstant.ORDTIPOORDEN.INSTALACION_MEDIDOR) {
                                nucLecturaMedidor.setFechaUltimoIndice(orden.getFechaCumplimiento());
                            } else {
//                            nucLecturaMedidor.setFechaUltimoIndice(orden.get);
                            }
                            nucLecturaMedidor.setFechaRegistro(orden.getFechaCumplimiento());
                            nucLecturaMedidor.setFechaActualizacion(orden.getFechaCumplimiento());
                            isUpdateLecturaMedidor = nucLecturaMedidorDao.create(nucLecturaMedidor);
                        }
                        if (isUpdateServicioMedidor && isUpdateLecturaMedidor) {
                            isUpdateMedidorTot = true;
                            cr.setResult(CommonConstant.RESULT_SUCCESS);
                            cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.OBJECT);
                        }
                    } else if (isUpdateMedidor) {
                        isUpdateMedidorTot = true;
                        cr.setResult(CommonConstant.RESULT_SUCCESS);
                        cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.OBJECT);
                    }
                }
                if (tipoOrden.getRetiraMedidor() && estadoAsigRetira.equals('D')) {

                    if (tipoOrden.getCodigo() == 146) {
                        Long indicedx = orden.getIndDesconexion().longValueExact();
                        BigDecimal inddx = BigDecimal.valueOf(indicedx);
                        isUpdateMedidor = medmedidorDao.updateIndice(medidor.getId(), inddx);
                    }
//                    if (ordEstado == CommonConstant.ORDESTADO.CUMPLIDA) {
                    //isUpdateMedidor = medmedidorDao.updateDesconectado(medidor.getId());
                    System.out.println("UpdateDesconectado: " + medidor.getId() + " - " + usuarioDto.getId_usuario_security() + " - " + orden.getFechaCumplimiento() + " - " + orden.getIndDesconexion());
                    //isUpdateMedidor = medmedidorDao.updateDesconectado(medidor.getId(), usuarioDto.getId_usuario_security(), usuarioDto.getId_sector(), orden.getFechaCumplimiento(), orden.getIndDesconexion());
                    MedEstado medEstado = medEstadoDao.findByCodigo(new Integer(CommonConstant.MED_ESTADO.MEDIDOR_DESCONECTADO).toString());

                    MedMedidor medMedidor = medMedidorDao.findById(medidor.getId());
                    medMedidor.setIdEstado(medEstado);
                    medMedidor.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                    medMedidor.setFechaActualizacion(orden.getFechaCumplimiento());
                    medMedidor.setIndiceEnergia(orden.getIndDesconexion());
                    medMedidor.setIdSectorRecepcion(usuarioDto.getId_sector());
                    isUpdateMedidor = medMedidorDao.update(medMedidor);

                    if (ordEstado == CommonConstant.ORDESTADO.CUMPLIDA) {
                        if (servicioMedidor != null) {
                            servicioMedidor.setConectado(false);
                            servicioMedidor.setFechaActualizacion(orden.getFechaCumplimiento());
                            servicioMedidor.setUsuarioActualizacion(usuarioDto.getId_usuario_security());

                            isUpdateServicioMedidorDesc = nucServicioMedidorDao.update(servicioMedidor);

                            if (lecturaMedidor != null) {
                                lecturaMedidor.setIndiceDesconexion(orden.getIndDesconexion() != null ? orden.getIndDesconexion() : lecturaMedidor.getIndiceUltimo());
                                lecturaMedidor.setFechaDesconexion(orden.getFechaCumplimiento());

                                isUpdateLecturaMedidor = nucLecturaMedidorDao.update(lecturaMedidor);
                            }
//                          COMENTADO A SOLICITUD DELAPAZ 20.07.2021
//                            if (lecturaMedidor != null) {
//
//                                lecturaMedidor.setIndiceUltimo(orden.getIndDesconexion() != null ? orden.getIndDesconexion() : lecturaMedidor.getIndiceUltimo());
//                                lecturaMedidor.setPotenciaLeida(orden.getIndPotencia() != null ? orden.getIndPotencia() : lecturaMedidor.getPotenciaLeida());
//
//                                //Actualiza si tiene bloques
//                                lecturaMedidor.setIndiceBloqueBajoUltimo(orden.getEnergiaBloqueBajo() != null ? orden.getEnergiaBloqueBajo() : lecturaMedidor.getIndiceBloqueBajoUltimo());
//                                lecturaMedidor.setIndiceBloqueMedioUltimo(orden.getEnergiaBloqueMedio() != null ? orden.getEnergiaBloqueMedio() : lecturaMedidor.getIndiceBloqueMedioUltimo());
//                                lecturaMedidor.setIndiceBloqueAltoUltimo(orden.getEnergiaBloqueAlto() != null ? orden.getEnergiaBloqueAlto() : lecturaMedidor.getIndiceBloqueAltoUltimo());
//                                lecturaMedidor.setIndiceBloqueReactivo(orden.getEnergiaBloqueReactivo() != null ? orden.getEnergiaBloqueReactivo() : lecturaMedidor.getIndiceBloqueReactivo());
//
//                                lecturaMedidor.setPotenciaBloqueBajo(orden.getPotenciaBloqueBajo() != null ? orden.getPotenciaBloqueBajo() : lecturaMedidor.getPotenciaBloqueBajo());
//                                lecturaMedidor.setPotenciaBloqueMedio(orden.getPotenciaBloqueMedio() != null ? orden.getPotenciaBloqueMedio() : lecturaMedidor.getPotenciaBloqueMedio());
//                                lecturaMedidor.setPotenciaBloqueAlto(orden.getPotenciaBloqueAlto() != null ? orden.getPotenciaBloqueAlto() : lecturaMedidor.getPotenciaBloqueAlto());
//
//                                lecturaMedidor.setFechaUltimoIndice(orden.getFechaCumplimiento());  
//
//                                isUpdateLecturaMedidor = nucLecturaMedidorDao.update(lecturaMedidor);
//                            }
                        }
//                        if (isUpdateMedidor && isUpdateServicioMedidorDesc) {
                        if (isUpdateMedidor) {
                            isUpdateMedidorTot = true;
                            cr.setResult(CommonConstant.RESULT_SUCCESS);
                            cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.OBJECT);
                        }
                    } else if (isUpdateMedidor) {
                        isUpdateMedidorTot = true;
                        cr.setResult(CommonConstant.RESULT_SUCCESS);
                        cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.OBJECT);
                    }
                }
                //ejemplo una suspension sin retiro de medidor -medidor debe quedar conectado
                if (tipoOrden.getRetiraMedidor() && estadoAsigRetira.equals('C')) {

                    if (ordEstado == CommonConstant.ORDESTADO.CUMPLIDA) {
//                        isUpdateMedidor = medmedidorDao.updateConect(medidor.getId());
                        medMedidorBean.updateConexionConsumidor(medidor.getId(), orden.getIdConsumidor().getId(), usuarioDto.getId_usuario_security());
                        isUpdateMedidor = true;
                        servicioMedidor = nucServicioMedidorDao.findByIdMedidor(medidor.getId());
                        if (servicioMedidor != null) {
                            servicioMedidor.setConectado(true);
                            isUpdateServicioMedidorDesc = nucServicioMedidorDao.update(servicioMedidor);
                            lecturaMedidor = nucLecturaMedidorDao.findByServicioMedidor(servicioMedidor.getId());
                        }
                        if (lecturaMedidor != null) {
                            lecturaMedidor.setIndiceUltimo(orden.getIndDesconexion() != null ? orden.getIndDesconexion() : lecturaMedidor.getIndiceUltimo());
                            lecturaMedidor.setPotenciaLeida(orden.getIndPotencia() != null ? orden.getIndPotencia() : lecturaMedidor.getPotenciaLeida());

                            //Actualiza si tiene bloques
                            lecturaMedidor.setIndiceBloqueBajoUltimo(orden.getEnergiaBloqueBajo() != null ? orden.getEnergiaBloqueBajo() : lecturaMedidor.getIndiceBloqueBajoUltimo());
                            lecturaMedidor.setIndiceBloqueMedioUltimo(orden.getEnergiaBloqueMedio() != null ? orden.getEnergiaBloqueMedio() : lecturaMedidor.getIndiceBloqueMedioUltimo());
                            lecturaMedidor.setIndiceBloqueAltoUltimo(orden.getEnergiaBloqueAlto() != null ? orden.getEnergiaBloqueAlto() : lecturaMedidor.getIndiceBloqueAltoUltimo());
                            lecturaMedidor.setIndiceBloqueReactivo(orden.getEnergiaBloqueReactivo() != null ? orden.getEnergiaBloqueReactivo() : lecturaMedidor.getIndiceBloqueReactivo());

                            lecturaMedidor.setPotenciaBloqueBajo(orden.getPotenciaBloqueBajo() != null ? orden.getPotenciaBloqueBajo() : lecturaMedidor.getPotenciaBloqueBajo());
                            lecturaMedidor.setPotenciaBloqueMedio(orden.getPotenciaBloqueMedio() != null ? orden.getPotenciaBloqueMedio() : lecturaMedidor.getPotenciaBloqueMedio());
                            lecturaMedidor.setPotenciaBloqueAlto(orden.getPotenciaBloqueAlto() != null ? orden.getPotenciaBloqueAlto() : lecturaMedidor.getPotenciaBloqueAlto());

                            lecturaMedidor.setFechaUltimoIndice(orden.getFechaCumplimiento());
                            isUpdateLecturaMedidor = nucLecturaMedidorDao.update(lecturaMedidor);
                        }
                        if (isUpdateMedidor && isUpdateServicioMedidorDesc) {
                            isUpdateMedidorTot = true;
                            cr.setResult(CommonConstant.RESULT_SUCCESS);
                            cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.OBJECT);
                        }
                    } else if (isUpdateMedidor) {
                        isUpdateMedidorTot = true;
                        cr.setResult(CommonConstant.RESULT_SUCCESS);
                        cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.OBJECT);
                    }
                }
            }
        } catch (Exception e) {
            cr.setResultMessage(CommonMessage.GLOBAL.ERROR.ERROR);
            e.printStackTrace();
        }
        return isUpdateMedidorTot;
    }

    public CommonResponse printRevisionMasivo(CommonInput input) {
        cr = new CommonResponse();
        cr.setResult(GlobalConstant.RESULT_ERROR);
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        Boolean result = false;
        try {
            List<OrdOrden> ordenList = input.getOrdOrdenList();
            UsuarioDto usuarioDto = input.getUsuarioDto();
            Date fechaImpresion = calendar.getTime();
            OrdOrden orden = new OrdOrden();
            if (ordenList != null) {
                for (OrdOrden ordOrden : ordenList) {
                    fechaImpresion = calendar.getTime();
                    orden = ordOrdenDao.findById(ordOrden.getId());
                    if ((orden.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.PENDIENTE
                            || orden.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.REVISADA
                            || orden.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.ASIGNADA_MEDIDORES)
                            && orden.getFechaImpresion() == null) {
                        orden.setFechaImpresion(fechaImpresion);
                        //orden.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                        //orden.setFechaActualizacion(fechaImpresion);
                        ordOrdenDao.update(orden);
                        result = true;
                    }
                }
            }
            if (!result) {
                cr.setResult(CommonConstant.RESULT_WARNING);
                cr.setResultMessage(String.format(CommonMessage.ORDORDEN.WARNING.REVISION_NO_IMPRESA));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return cr;
    }

    public CommonResponse printOrden(CommonInput input) {
        cr = new CommonResponse();
        cr.setResult(GlobalConstant.RESULT_ERROR);
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        NucSector nucSector = null;
        OrdTipoOrden ordTipoOrden = null;
        UsuarioDto usuarioDto;
        List<OrdOrden> ordOrdenList;
        Boolean isCumplida;
        Boolean isSoloUnTipo;
        OrdOrden ordenPrincipal;
        try {
            nucSector = input.getNucSector();
            ordTipoOrden = input.getOrdTipoOrden();
            usuarioDto = input.getUsuarioDto();
            if (nucSector != null && ordTipoOrden != null) {
                ordOrdenList = ordOrdenDao.findByOrdenesPendienteTipoFromSolicitud(nucSector.getId(), ordTipoOrden.getId(), CommonConstant.ORDESTADO.PENDIENTE, CommonConstant.ORDESTADO.REVISADA);

            } else {
                ordOrdenList = input.getOrdOrdenList();

            }

            if (ordOrdenList != null && !ordOrdenList.isEmpty()) {
                String ordenes = "{";
                isCumplida = null;
                isSoloUnTipo = true;
                for (OrdOrden ordOrden : ordOrdenList) {
                    OrdOrden orden = ordOrdenDao.findById(ordOrden.getId());

                    if (orden.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.CUMPLIDA
                            || orden.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.PENDIENTE_APLICACION_SISTEMA) {
                        ordenPrincipal = orden;
                    } else {
                        //VALIDA EL SECTOR DESTINO
                        if (!usuarioDto.getId_sector().equals(orden.getIdSectorDestino().getId())) {
                            cr.setResult(GlobalConstant.RESULT_WARNING);
                            cr.setResultMessage(String.format(CommonMessage.ORDORDEN.WARNING.ORDEN_SECTOR_DESTINO));
                            return cr;
                        }

                        ordenPrincipal = this.getOrdenPrincipal(orden, usuarioDto);
                    }
                    if (ordenPrincipal != null) {
                        ordenes = ordenes + ordenPrincipal.getId() + ",";
                    }
                    if (ordenPrincipal != null && (ordenPrincipal.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.CUMPLIDA
                            || ordenPrincipal.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.PENDIENTE_APLICACION_SISTEMA
                            || estadoImprime(ordenPrincipal.getIdEstado().getCodigo()))) {
                        if (estadoImprime(ordenPrincipal.getIdEstado().getCodigo())) {
                            isCumplida = isCumplida != null && isCumplida ? null : false;
                        } else {
                            isCumplida = isCumplida != null && !isCumplida ? null : true;
                        }
                        if (isCumplida == null) {
                            cr.setResult(CommonConstant.RESULT_WARNING);
                            cr.setResultMessage(String.format(CommonMessage.ORDORDEN.WARNING.ORDEN_ESTADO_DISTINTOS));
                            return cr;
                        }
                    } else {
                        cr.setResult(CommonConstant.RESULT_WARNING);
                        cr.setResultMessage(String.format(CommonMessage.ORDORDEN.WARNING.ORDEN_NO_IMPRIME));
                        return cr;
                    }
                    if (ordTipoOrden == null) {
                        ordTipoOrden = ordenPrincipal.getIdTipoOrden();
                    }
                    if (isSoloUnTipo && ordTipoOrden.getId() != ordenPrincipal.getIdTipoOrden().getId()) {
                        isSoloUnTipo = false;
                        ordTipoOrden = ordTipoOrdenDao.findByCodigo(CommonConstant.ORDTIPOORDEN.CAMBIO_MEDIDOR);
                    }
                }
                ordenes = ordenes.substring(0, ordenes.length() - 1);
                ordenes = ordenes + '}';
                String pathExportText = CommonConstant.BASE_PATH_TMP + formatDate.format(calendar.getTime()) + ".txt";
                if (isCumplida) {
                    this.printOrdenCumplida(ordTipoOrden, ordenes, pathExportText);
                } else {
                    this.printOrdenMasivo(ordTipoOrden, ordenes, pathExportText);
                }
                cr.setBase64(Utils.getFileBase64(pathExportText));
                cr.setResult(GlobalConstant.RESULT_SUCCESS);
                cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.SUCCESS);

                //ordenes = ordenes.substring(0, ordenes.length() - 1);
                //ordenes = ordenes + '}';
//                        String pathExportText = CommonConstant.BASE_PATH_TMP + formatDate.format(calendar.getTime()) + ".txt";
//                        this.printOrdenMasivo(ordenPrincipal.getIdTipoOrden(), ordenes, pathExportText);
//                        cr.setBase64(Utils.getFileBase64(pathExportText));
//                        cr.setResult(GlobalConstant.RESULT_SUCCESS);
//                        cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.SUCCESS);
//                    }
//                    if (orden.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.CUMPLIDA || orden.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.PENDIENTE_APLICACION_SISTEMA) {
//                        String pathExportPdf = CommonConstant.BASE_PATH_TMP + "orden" + formatDate.format(calendar.getTime()) + "-" + orden.getId() + ".pdf";
//                        OrdTipoOrden tipoOrden = ordTipoOrdenDao.findById(orden.getIdTipoOrden().getId());
//                        ordenes = ordenes + orden.getId() + ",";
//
//                        if (!ordenes.equals("")) {
//                            ordenes = ordenes.substring(0, ordenes.length() - 1);
//                            ordenes = ordenes + '}';
//                        }
//                        this.printOrdenCumplida(tipoOrden, ordenes, pathExportPdf);
//                        cr.setBase64(Utils.getFileBase64(pathExportPdf));
//                        cr.setResult(GlobalConstant.RESULT_SUCCESS);
//                        cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.SUCCESS);
//                    } else if (estadoImprime(orden.getIdEstado().getCodigo())) {
//                        String pathExportPdf = CommonConstant.BASE_PATH_TMP + "orden" + formatDate.format(calendar.getTime()) + "-" + orden.getId() + ".pdf";
//                        OrdOrden ordenPrincipal;
//                        ordenPrincipal = this.getOrdenPrincipal(orden, usuarioDto);
//                        if (ordenPrincipal != null) {
//                            ordenes = ordenes + ordenPrincipal.getId() + ",";
//                            ordenes = ordenes.substring(0, ordenes.length() - 1);
//                            ordenes = ordenes + '}';
//                            String pathExportText = CommonConstant.BASE_PATH_TMP + formatDate.format(calendar.getTime()) + ".txt";
//                            this.printOrdenMasivo(ordenPrincipal.getIdTipoOrden(), ordenes, pathExportText);
//                            cr.setBase64(Utils.getFileBase64(pathExportText));
//                            cr.setResult(GlobalConstant.RESULT_SUCCESS);
//                            cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.SUCCESS);
//                        }
//                    } else {
//                        cr.setResult(CommonConstant.RESULT_WARNING);
//                        cr.setResultMessage(String.format(CommonMessage.ORDORDEN.WARNING.ORDEN_IMPRESION));
//                    }
                // }
            } else {
                cr.setResult(GlobalConstant.RESULT_WARNING);
                cr.setResultMessage(CommonMessage.GLOBAL.ERROR.LIST);
            }
        } catch (Exception e) {
            cr.setResult(CommonConstant.RESULT_ERROR);
            cr.setResultMessage(CommonMessage.GLOBAL.ERROR.ERROR);
            e.printStackTrace();
        }
        return cr;
    }

    private OrdOrden getOrdenPrincipal(OrdOrden orden, UsuarioDto usuarioDto) {
        SolSolicitudOrden ordenPrincipal;
        long noCumple;
        Boolean updateEstadoOrden = true;
        if (isOrdenInterna(orden.getIdTipoOrden().getCodigo())) {
            if (this.estadoACampo(orden.getIdEstado().getCodigo())) {
                orden.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                orden.setFechaImpresion(calendar.getTime());
                updateEstadoOrden = ordOrdenEstadosBean.updateEstadoOrden(orden, CommonConstant.ORDESTADO.CAMPO);
            }
        } else {
            SolSolicitudOrden solSolicitudOrden = solSolicitudOrdenDao.findByIdOrden(orden.getId());
            List<SolSolicitudOrden> solSolicitudOrdenList = solSolicitudOrdenDao.findByIdSolicitud(solSolicitudOrden.getIdSolicitud().getId());
            noCumple = solSolicitudOrdenList.stream()
                    .filter(o -> !this.estadoImprime(o.getOrdId().getIdEstado().getCodigo()))
                    .count();
            if (noCumple > 0) {
                cr.setResult(CommonConstant.RESULT_WARNING);
                cr.setResultMessage(String.format(CommonMessage.ORDORDEN.WARNING.ORDEN_IMPRESION_PARALELA));
                orden = null;
            } else {
                ordenPrincipal = solSolicitudOrdenList.stream()
                        .filter(o -> o.getIdTipoOrden().getCodigo().equals(CommonConstant.ORDTIPOORDEN.CONTRATO_NUEVO_GDI))
                        .findFirst()
                        .orElse(null);
                if (ordenPrincipal == null) {
                    ordenPrincipal = solSolicitudOrdenList.stream()
                            .filter(o -> o.getIdTipoOrden().getAsignaMedidor() == true && o.getIdTipoOrden().getRetiraMedidor() == true)
                            .findFirst()
                            .orElse(null);
                }
                if (ordenPrincipal == null) {
                    ordenPrincipal = solSolicitudOrdenList.stream()
                            .filter(o -> o.getIdTipoOrden().getAsignaMedidor() == true || o.getIdTipoOrden().getRetiraMedidor() == true)
                            .findFirst()
                            .orElse(null);
                }
                for (SolSolicitudOrden solicitudOrden : solSolicitudOrdenList) {
                    if (this.estadoACampo(solicitudOrden.getOrdId().getIdEstado().getCodigo())) {
                        if (ordenPrincipal != null && solicitudOrden.getId() != ordenPrincipal.getId()
                                && !ordenPrincipal.getIdTipoOrden().getCodigo().equals(CommonConstant.ORDTIPOORDEN.CONTRATO_NUEVO_GDI)) {
                            solicitudOrden.getOrdId().setIdMedidorConexion(ordenPrincipal.getOrdId().getIdMedidorConexion());
                            solicitudOrden.getOrdId().setIdMedidorDesconexion(ordenPrincipal.getOrdId().getIdMedidorDesconexion());
                        }
                        solicitudOrden.getOrdId().setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                        solicitudOrden.getOrdId().setFechaImpresion(calendar.getTime());
                        updateEstadoOrden = ordOrdenEstadosBean.updateEstadoOrden(solicitudOrden.getOrdId(), CommonConstant.ORDESTADO.CAMPO);
                    }
                }
                if (ordenPrincipal != null) {
                    orden = ordenPrincipal.getOrdId();
                }
            }
        }
        if (!updateEstadoOrden) {
            cr.setResult(CommonConstant.RESULT_ERROR);
            cr.setResultMessage(CommonMessage.GLOBAL.ERROR.ERROR);
        }
        return orden;
    }

    private boolean isOrdenInterna(int codigoTipoOrden) {
        return codigoTipoOrden == CommonConstant.ORDTIPOORDEN.CAMBIO_ACOMETIDA_INTERNA
                || codigoTipoOrden == CommonConstant.ORDTIPOORDEN.REHABILITACION_INTERNA;
    }

    public boolean estadoImprime(int codigoEstadoOrden) {
        return codigoEstadoOrden == CommonConstant.ORDESTADO.PENDIENTE
                || codigoEstadoOrden == CommonConstant.ORDESTADO.REVISADA
                || codigoEstadoOrden == CommonConstant.ORDESTADO.CAMPO
                || codigoEstadoOrden == CommonConstant.ORDESTADO.REANUDADA_EMPRESA
                || codigoEstadoOrden == CommonConstant.ORDESTADO.REANUDADA;
    }

    public boolean estadoACampo(int codigoEstadoOrden) {
        return codigoEstadoOrden == CommonConstant.ORDESTADO.PENDIENTE
                || codigoEstadoOrden == CommonConstant.ORDESTADO.REVISADA
                || codigoEstadoOrden == CommonConstant.ORDESTADO.REANUDADA_EMPRESA
                || codigoEstadoOrden == CommonConstant.ORDESTADO.REANUDADA;
    }

    public boolean printOrden(OrdOrden orden, SolSolicitud solicitud, String pathExportPdf) {
        HashMap hm = null;
        Connection conn = null;
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        try {
            conn = Utils.getConnection();
            List tapaMedidorConex = new ArrayList();
            List cubreboreneraConex = new ArrayList();
            List cajaMedidorConex = new ArrayList();
            List cajaDistribucionConex = new ArrayList();
            List demandimetroConex = new ArrayList();
            List tapaMedidorDesc = new ArrayList();
            List cubreboreneraDesc = new ArrayList();
            List cajaMedidorDesc = new ArrayList();
            List cajaDistribucionDesc = new ArrayList();
            List demandimetroDesc = new ArrayList();

            String precintosConex = "";
            String precintosDesc = "";

            Object[] posicion;
            List<Object[]> medAsignaPrecintoConexList = new ArrayList();
            List<Object[]> medAsignaPrecintoDsconexList = new ArrayList();

            if (orden.getIdMedidorConexion() != null) {
                medAsignaPrecintoConexList = medAsignaPrecintoDao.getPrecintosTableByMedidor(orden.getIdMedidorConexion().getNumeroMedidor());
            }
            if (orden.getIdMedidorDesconexion() != null) {
                medAsignaPrecintoDsconexList = medAsignaPrecintoDao.getPrecintosTableByMedidor(orden.getIdMedidorDesconexion().getNumeroMedidor());
            }
            Iterator iterador1 = medAsignaPrecintoConexList.listIterator();
            while (iterador1.hasNext()) {
                posicion = (Object[]) iterador1.next();

                switch (Integer.valueOf(posicion[0].toString())) {

                    case CommonConstant.POSICION_MEDIDOR.TAPA_MEDIDOR: {
                        for (int i = 0; i < posicion.length; i++) {

                            if (i % 5 == 0 && i != 0 && i != 1) {
                                tapaMedidorConex.add(posicion[i + 2]);
                                tapaMedidorConex.add(posicion[i]);
                                precintosConex = precintosConex + posicion[i] + " " + posicion[i + 2];
                                precintosConex = precintosConex + " / ";
                            }
                        }
                        for (int i = tapaMedidorConex.size() + 1; i <= 8; i++) {
                            tapaMedidorConex.add("");
                        }
                        break;
                    }
                    case CommonConstant.POSICION_MEDIDOR.CUBREBORNERA: {
                        for (int i = 0; i < posicion.length; i++) {

                            if (i % 5 == 0 && i != 0 && i != 1) {
                                cubreboreneraConex.add(posicion[i + 2]);
                                cubreboreneraConex.add(posicion[i]);
                                precintosConex = precintosConex + posicion[i] + " " + posicion[i + 2];
                                precintosConex = precintosConex + " / ";

                            }
                        }
                        for (int i = cubreboreneraConex.size() + 1; i <= 8; i++) {
                            cubreboreneraConex.add("");
                        }
                        break;
                    }
                    case CommonConstant.POSICION_MEDIDOR.CAJA_MEDIDOR: {
                        for (int i = 0; i < posicion.length; i++) {

                            if (i % 5 == 0 && i != 0 && i != 1) {
                                cajaMedidorConex.add(posicion[i + 2]);
                                cajaMedidorConex.add(posicion[i]);

                            }
                        }
                        for (int i = cajaMedidorConex.size() + 1; i <= 8; i++) {
                            cajaMedidorConex.add("");
                        }
                        break;
                    }
                    case CommonConstant.POSICION_MEDIDOR.CAJA_SISTRIBUCION: {
                        for (int i = 0; i < posicion.length; i++) {

                            if (i % 5 == 0 && i != 0 && i != 1) {
                                cajaDistribucionConex.add(posicion[i + 2]);
                                cajaDistribucionConex.add(posicion[i]);

                            }
                        }
                        for (int i = cajaDistribucionConex.size() + 1; i <= 8; i++) {
                            cajaDistribucionConex.add("");
                        }
                        break;
                    }
                    case CommonConstant.POSICION_MEDIDOR.DEMANDIMETRO: {
                        for (int i = 0; i < posicion.length; i++) {

                            if (i % 5 == 0 && i != 0 && i != 1) {
                                demandimetroConex.add(posicion[i + 2]);
                                demandimetroConex.add(posicion[i]);

                            }
                        }
                        for (int i = demandimetroConex.size() + 1; i <= 8; i++) {
                            demandimetroConex.add("");
                        }
                        break;
                    }
                }

            }

            iterador1 = medAsignaPrecintoDsconexList.listIterator();
            while (iterador1.hasNext()) {
                posicion = (Object[]) iterador1.next();

                switch (Integer.valueOf(posicion[0].toString())) {

                    case CommonConstant.POSICION_MEDIDOR.TAPA_MEDIDOR: {
                        for (int i = 0; i < posicion.length; i++) {

                            if (i % 5 == 0 && i != 0 && i != 1) {
                                tapaMedidorDesc.add(posicion[i + 2]);
                                tapaMedidorDesc.add(posicion[i]);
                                precintosDesc = precintosDesc + posicion[i] + " " + posicion[i + 2];
                                precintosDesc = precintosDesc + " / ";
                            }
                        }
                        for (int i = tapaMedidorDesc.size() + 1; i <= 8; i++) {
                            tapaMedidorDesc.add("");
                        }
                        break;
                    }
                    case CommonConstant.POSICION_MEDIDOR.CUBREBORNERA: {
                        for (int i = 0; i < posicion.length; i++) {

                            if (i % 5 == 0 && i != 0 && i != 1) {
                                cubreboreneraDesc.add(posicion[i + 2]);
                                cubreboreneraDesc.add(posicion[i]);
                                precintosDesc = precintosDesc + posicion[i] + " " + posicion[i + 2];
                                precintosDesc = precintosDesc + " / ";

                            }
                        }
                        for (int i = cubreboreneraDesc.size() + 1; i <= 8; i++) {
                            cubreboreneraDesc.add("");
                        }
                        break;
                    }
                    case CommonConstant.POSICION_MEDIDOR.CAJA_MEDIDOR: {
                        for (int i = 0; i < posicion.length; i++) {

                            if (i % 5 == 0 && i != 0 && i != 1) {
                                cajaMedidorDesc.add(posicion[i + 2]);
                                cajaMedidorDesc.add(posicion[i]);

                            }
                        }
                        for (int i = cajaMedidorDesc.size() + 1; i <= 8; i++) {
                            cajaMedidorDesc.add("");
                        }
                        break;
                    }
                    case CommonConstant.POSICION_MEDIDOR.CAJA_SISTRIBUCION: {
                        for (int i = 0; i < posicion.length; i++) {

                            if (i % 5 == 0 && i != 0 && i != 1) {
                                cajaDistribucionDesc.add(posicion[i + 2]);
                                cajaDistribucionDesc.add(posicion[i]);

                            }
                        }
                        for (int i = cajaDistribucionDesc.size() + 1; i <= 8; i++) {
                            cajaDistribucionDesc.add("");
                        }
                        break;
                    }
                    case CommonConstant.POSICION_MEDIDOR.DEMANDIMETRO: {
                        for (int i = 0; i < posicion.length; i++) {

                            if (i % 5 == 0 && i != 0 && i != 1) {
                                demandimetroDesc.add(posicion[i + 2]);
                                demandimetroDesc.add(posicion[i]);

                            }
                        }
                        for (int i = demandimetroDesc.size() + 1; i <= 8; i++) {
                            demandimetroDesc.add("");
                        }
                        break;
                    }
                }

            }

            SolSolicitudInspeccion solSolicitudInspeccion = solSolicitudInspeccionDao.findByIdSolicitudByEstadoInspeccion(solicitud.getId(), CommonConstant.INSESTADO.APROBADA_INSPECTOR);
            if (solSolicitudInspeccion == null) {
                solSolicitudInspeccion = solSolicitudInspeccionDao.findByIdSolicitudByEstadoInspeccion(solicitud.getId(), CommonConstant.INSESTADO.PROYECTO_CONCLUIDO);
            }
            String obsInspeccion = "";
            if (solSolicitudInspeccion != null) {
                obsInspeccion = solSolicitudInspeccion.getIdInspeccion().getObservacion();
            }

            String nombrejrxml = "";
            String nombrejasper = "";
            hm = new HashMap();
            switch (orden.getIdTipoOrden().getCodigo()) {

                case CommonConstant.ORDTIPOORDEN.CONTRATO_NUEVO: {
                    nombrejrxml = "OrdenContratoNuevo-v0.1_1.jrxml";
                    nombrejasper = "OrdenContratoNuevo-v0.1_1.jasper";
                    hm.put("idOrden", orden.getId());
                    hm.put("codigoSolicitud", solicitud.getCodigo().intValue());
                    hm.put("idInspeccion", solSolicitudInspeccion.getIdInspeccion().getId());
                    hm.put("idSolicitud", solicitud.getId());
                    hm.put("obsSolicitud", solicitud.getObservacion());
                    hm.put("obsInspeccion", obsInspeccion);
                    hm.put("tapaMedidorConexion", tapaMedidorConex);
                    hm.put("cubreborneraConexion", cubreboreneraConex);
                    hm.put("cajaMedidorConexion", cajaMedidorConex);
                    hm.put("cajaDistribConexion", cajaDistribucionConex);
                    hm.put("demandimetroConexion", demandimetroConex);

                    break;
                }
                case CommonConstant.ORDTIPOORDEN.SUSPENSION_TEMPORAL: {
                    String precintosDesconexion = "";
                    if (!precintosDesc.equals("")) {
                        precintosDesconexion = precintosDesc.substring(0, precintosDesc.length() - 2);
                    }
                    nombrejrxml = "OrdenSuspencionServicio-v0.1.jrxml";
                    nombrejasper = "OrdenSuspencionServicio-v0.1.jasper";
                    hm.put("idOrden", orden.getId());
                    hm.put("codigosolicitud", solicitud.getCodigo().intValue());
                    hm.put("precintosDesc", precintosDesconexion);

                    break;

                }
                case CommonConstant.ORDTIPOORDEN.SUSPENSION_DEFINITIVA: {
                    String precintosDesconexion = "";
                    if (!precintosDesc.equals("")) {
                        precintosDesconexion = precintosDesc.substring(0, precintosDesc.length() - 2);
                    }
                    nombrejrxml = "OrdenSuspencionServicio-v0.1.jrxml";
                    nombrejasper = "OrdenSuspencionServicio-v0.1.jasper";
                    hm.put("idOrden", orden.getId());
                    hm.put("codigosolicitud", solicitud.getCodigo().intValue());
                    hm.put("precintosDesc", precintosDesconexion);

                    break;
                }
                case CommonConstant.ORDTIPOORDEN.REHABILITACION: {
                    String precintosConexion = "";
                    if (!precintosConex.equals("")) {
                        precintosConexion = precintosConex.substring(0, precintosConex.length() - 2);
                    }
                    nombrejrxml = "OrdenRehabilitacionServicio-v0.1.jrxml";
                    nombrejasper = "OrdenRehabilitacionServicio-v0.1.jasper";
                    hm.put("idOrden", orden.getId());
                    hm.put("codigosolicitud", solicitud.getCodigo().intValue());
                    hm.put("precintosConex", precintosConexion);

                    break;
                }

                default: {
                    nombrejrxml = "OrdenCambioMedidor-v0.1_1.jrxml";
                    nombrejasper = "OrdenCambioMedidor-v0.1_1.jasper";
                    hm.put("idOrden", orden.getId());
                    hm.put("codigoSolicitud", solicitud.getCodigo().intValue());
                    hm.put("idInspeccion", solSolicitudInspeccion.getIdInspeccion().getId());
                    hm.put("idSolicitud", solicitud.getId());
                    hm.put("obsSolicitud", solicitud.getObservacion());
                    hm.put("obsInspeccion", obsInspeccion);
                    hm.put("tapaMedidorConexion", tapaMedidorConex);
                    hm.put("cubreborneraConexion", cubreboreneraConex);
                    hm.put("cajaMedidorConexion", cajaMedidorConex);
                    hm.put("cajaDistribConexion", cajaDistribucionConex);
                    hm.put("demandimetroConexion", demandimetroConex);
                    hm.put("tapaMedidorDesconexion", tapaMedidorDesc);
                    hm.put("cubreborneraDesconexion", cubreboreneraDesc);
                    hm.put("cajaMedidorDesconexion", cajaMedidorDesc);
                    hm.put("cajaDistribDesconexion", cajaDistribucionDesc);
                    hm.put("demandimetroDesconexion", demandimetroDesc);
                }
            }

            JasperCompileManager.compileReportToFile(CommonConstant.basePathJrxml + nombrejrxml, CommonConstant.basePathJrxml + nombrejasper);

            JasperPrint jprint = (JasperPrint) JasperFillManager.fillReport(CommonConstant.basePathJrxml + nombrejasper, hm, conn);
            JasperExportManager.exportReportToPdfFile(jprint, pathExportPdf);
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        } finally {
            Utils.closeConnection(conn);
        }
    }

    public CommonResponse findById(CommonInput input) {
        cr = new CommonResponse();
        OrdOrden updateOrden = input.getOrdOrden();
        try {
            if (updateOrden != null && updateOrden.getId() > 0) {
                OrdOrden ordOrden = ordOrdenDao.findById(updateOrden.getId());
                cr.setOrdOrden(ordOrden);
                cr.setResult(CommonConstant.RESULT_SUCCESS);
                cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.OBJECT);
            } else {
                cr.setResult(CommonConstant.RESULT_INFO);
                cr.setResultMessage(CommonMessage.GLOBAL.INFO.EMPTY_LIST);
            }
        } catch (Exception ex) {
            cr.setResult(CommonConstant.RESULT_ERROR);
            cr.setResultMessage(ex.getMessage());
        }
        return cr;
    }

    public CommonResponse findByCodigoOrden(CommonInput input) {
        cr = new CommonResponse();
        OrdOrden updateOrden = input.getOrdOrden();
        try {
            if (updateOrden != null && updateOrden.getCodigo() > 0) {
                OrdOrden ordOrden = ordOrdenDao.findByCodigoOrden(updateOrden.getCodigo());
                cr.setOrdOrden(ordOrden);
                cr.setResult(CommonConstant.RESULT_SUCCESS);
                cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.OBJECT);
            } else {
                cr.setResult(CommonConstant.RESULT_INFO);
                cr.setResultMessage(CommonMessage.GLOBAL.INFO.EMPTY_LIST);
            }
        } catch (Exception ex) {
            cr.setResult(CommonConstant.RESULT_ERROR);
            cr.setResultMessage(ex.getMessage());
        }
        return cr;
    }

    public CommonResponse findByCodigoOrdenMotivoConclusion(CommonInput input) {
        cr = new CommonResponse();
        OrdOrden updateOrden = input.getOrdOrden();
        try {
            if (updateOrden != null && updateOrden.getCodigo() > 0) {
                OrdMotivoConclucion ordOrdenMC = ordOrdenDao.findByCodigoOrdenMotivoConclusion(updateOrden.getCodigo());
                cr.setOrdMotivoConclucion(ordOrdenMC);
                cr.setResult(CommonConstant.RESULT_SUCCESS);
                cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.OBJECT);
            } else {
                cr.setResult(CommonConstant.RESULT_INFO);
                cr.setResultMessage(CommonMessage.GLOBAL.INFO.EMPTY_LIST);
            }
        } catch (Exception ex) {
            cr.setResult(CommonConstant.RESULT_ERROR);
            cr.setResultMessage(ex.getMessage());
        }
        return cr;
    }

    public CommonResponse findMotivoByTipoOrden(CommonInput input) {
        cr = new CommonResponse();
//        OrdOrden orden = input.getOrdOrden();
        Integer idTipoOrden = input.getOrdTipoOrden().getId();
//        OrdTipoOrden tipoOrden = orden.getIdTipoOrden();
//        Integer idTipoOrden = tipoOrden.getId();
        try {
            List<OrdOrdenInforme> ordOrdenInformeList = ordOrdenInformeDao.getMotivoTipoOrden(idTipoOrden);
            cr.setList(ordOrdenInformeList);
            cr.setResult(CommonConstant.RESULT_SUCCESS);
            cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.OBJECT);
        } catch (Exception ex) {
            cr.setResult(CommonConstant.RESULT_ERROR);
            cr.setResultMessage(ex.getMessage());
        }
        return cr;
    }

    public Boolean createRedTecnicaConsumidor(OrdOrden orden) {
        cr = new CommonResponse();
        cr.setResult(GlobalConstant.RESULT_ERROR);
        Boolean isUpdateRed = false;
        //ordOrdenDao.findByIdSolicitud(solicitud.getId());
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        try {
            if (orden != null) {

                NucConsumidor nucConsumidor = nucConsumidorDao.findById(orden.getIdConsumidor().getId());
                RedPuesto redPuesto = redPuestoDao.findById(orden.getIdPuesto().getId());
                RedTecnicaConsumidord redTecnicaConsumidord = new RedTecnicaConsumidord();
                redTecnicaConsumidord.setCodconsumidor(nucConsumidor.getCodigo().toString());
                redTecnicaConsumidord.setCodigopuesto(redPuesto.getCodigoPuesto());
                redTecnicaConsumidord.setActivo(10);
                isUpdateRed = redTecnicaConsumidordDao.create(redTecnicaConsumidord);

            }
        } catch (Exception e) {
            cr.setResultMessage(CommonMessage.GLOBAL.ERROR.ERROR);
            e.printStackTrace();
        }
        return isUpdateRed;
    }

    public Boolean updateEstadoServicio(OrdOrden orden, OrdTipoOrden tipoOrden, UsuarioDto usuarioDto) {
        cr = new CommonResponse();
        cr.setResult(GlobalConstant.RESULT_ERROR);
        Boolean isUpdateServicio = false;
        Boolean isUpdateServicioTAP = false;
        Boolean isUpdateServicioTAS = false;
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);

        try {
            if (tipoOrden != null && orden != null) {

                NucServicio nucServicio = nucServicioDao.findByIdConsumidor(orden.getIdConsumidor().getId(), CommonConstant.NUCTIPOSERVICIO.ENERGIA);
                nucServicio.setIdSubestado(null);
                nucServicio.setIdEstado(tipoOrden.getIdEstServCump());
                if (orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.CONTRATO_NUEVO) {

                    Calendar fechaInicioFacturacion = Calendar.getInstance();
                    fechaInicioFacturacion.setTime(orden.getFechaCumplimiento());
                    BigDecimal valorInicioFacturacion = new BigDecimal(lecParametrosGeneralDao.getValor(LecturasParametros.ParametrosGenerales.MINIMODIASPARAFACTURACION.getCodigo()));

                    fechaInicioFacturacion.set(Calendar.DATE, fechaInicioFacturacion.get(Calendar.DATE) + valorInicioFacturacion.intValue());
                    nucServicio.setFechaInicioFacturacion(fechaInicioFacturacion.getTime());

                    nucServicio.setFechaConexion(orden.getFechaCumplimiento());
                    NucServicio nucServicioTAP = nucServicioDao.findByIdConsumidor(orden.getIdConsumidor().getId(), CommonConstant.NUCTIPOSERVICIO.TAP);
                    NucServicio nucServicioTAS = nucServicioDao.findByIdConsumidor(orden.getIdConsumidor().getId(), CommonConstant.NUCTIPOSERVICIO.TAS);

                    if (nucServicioTAP != null) {
                        nucServicioTAP.setIdEstado(tipoOrden.getIdEstServCump());
                        nucServicioTAP.setFechaEstado(calendar.getTime());
                        nucServicioTAP.setFechaActualizacion(calendar.getTime());
                        isUpdateServicioTAP = nucServicioDao.update(nucServicioTAP);
                    }
                    if (nucServicioTAS != null) {
                        nucServicioTAS.setIdEstado(tipoOrden.getIdEstServCump());
                        nucServicioTAS.setFechaEstado(calendar.getTime());
                        nucServicioTAS.setFechaActualizacion(calendar.getTime());
                        isUpdateServicioTAS = nucServicioDao.update(nucServicioTAS);
                    }

                }
                if (orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.SUSPENSION_TEMPORAL) {
                    NucSubestado nucSubestado = nucSubEstadoDao.findByCodigo(CommonConstant.NUC_SUBESTADO.SUSPENSION_TEMPORAL);
                    nucServicio.setIdSubestado(nucSubestado);
                }
                if (orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.SUSPENSION_FALTA_PAGO) {
                    NucSubestado nucSubestado = nucSubEstadoDao.findByCodigo(CommonConstant.NUC_SUBESTADO.SUSPENSION_FALTAPAGO);
                    nucServicio.setIdSubestado(nucSubestado);
                }
                if (orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.SUSPENSION_DEFINITIVA) {
                    //VERIFICA CANTIDAD DE VARIOS SERVICIOS
                    NucSubestado nucSubestado = nucSubEstadoDao.findByCodigo(CommonConstant.NUC_SUBESTADO.SUSPENSION_DEFINITIVA);
                    nucServicio.setIdSubestado(nucSubestado);

                    List<NucConsumidor> nucConsumidorList = nucConsumidorDao.getVariosServicio(nucServicio.getIdConsumidor().getNumeroDocumento(), nucServicio.getIdConsumidor().getRazonSocial(), 2, 2);
                    nucConsumidorBean.applyVariosServiciosMasivo(nucConsumidorList, false, usuarioDto);
//                    if (nucConsumidorDao.getVariosServicioDocumetoRazonSocial(nucServicio.getIdConsumidor().getNumeroDocumento(), nucServicio.getIdConsumidor().getRazonSocial(), 2, 2)) {
//                        nucConsumidorDao.updateVariosServicio(nucServicio.getIdConsumidor().getNumeroDocumento(), nucServicio.getIdConsumidor().getRazonSocial(), false);
//                    }
                }
                if (orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.CONTRATO_NUEVO
                        || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.SUSPENSION_TEMPORAL
                        || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.SUSPENSION_DEFINITIVA
                        || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.REHABILITACION
                        || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.CORTE
                        || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.RECONEXION
                        || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.SUSPENSION_FALTA_PAGO
                        || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.REHABILITACION_FALTA_PAGO) {

                    nucServicio.setFechaEstado(calendar.getTime());
                    nucServicio.setFechaActualizacion(calendar.getTime());
                }

                if (orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.REHABILITACION
                        || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.RECONEXION
                        || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.REHABILITACION_FALTA_PAGO
                        || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.REHABILITACION_INTERNA) {

                    NucServicio nucServicioTAP = nucServicioDao.findByIdConsumidor(orden.getIdConsumidor().getId(), CommonConstant.NUCTIPOSERVICIO.TAP);
                    NucServicio nucServicioTAS = nucServicioDao.findByIdConsumidor(orden.getIdConsumidor().getId(), CommonConstant.NUCTIPOSERVICIO.TAS);

                    if (nucServicioTAP != null) {
                        nucServicioTAP.setIdEstado(tipoOrden.getIdEstServCump());
                        nucServicioTAP.setFechaEstado(calendar.getTime());
                        nucServicioTAP.setFechaActualizacion(calendar.getTime());
                        isUpdateServicioTAP = nucServicioDao.update(nucServicioTAP);
                    }
                    if (nucServicioTAS != null) {
                        nucServicioTAS.setIdEstado(tipoOrden.getIdEstServCump());
                        nucServicioTAS.setFechaEstado(calendar.getTime());
                        nucServicioTAS.setFechaActualizacion(calendar.getTime());
                        isUpdateServicioTAS = nucServicioDao.update(nucServicioTAS);
                    }
                }

                isUpdateServicio = nucServicioDao.update(nucServicio);
                if (isUpdateServicio) {
                    cr.setResult(CommonConstant.RESULT_SUCCESS);
                    cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.OBJECT);
                }

            }
        } catch (Exception e) {
            cr.setResultMessage(CommonMessage.GLOBAL.ERROR.ERROR);
            e.printStackTrace();
        }
        return isUpdateServicio;
    }

    public Boolean ejecutarOrdenesAsociada(OrdOrden orden, OrdOrden updateOrden) {

        Boolean isUpdateOrden = false;
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        try {
            if (orden != null) {
                if (updateOrden.getIdEstado().getCodigo() != CommonConstant.ORDESTADO.ANULADA) {
                    List<OrdOrdenInforme> ordOrdenInformeList = ordOrdenInformeDao.getOrdenInforme(orden.getId());
                    if (ordOrdenInformeList != null && ordOrdenInformeList.size() > 0) {
                        for (OrdOrdenInforme newOrdOrdenInforme : ordOrdenInformeList) {
                            // OrdInforme ordInforme = ordInformeDao.findById(newOrdOrdenInforme.getIdInforme().getId());
                            OrdOrdenInforme ordOrdenInforme = new OrdOrdenInforme();
                            ordOrdenInforme.setIdInforme(newOrdOrdenInforme.getIdInforme());
                            ordOrdenInforme.setIdOrden(updateOrden);
                            ordOrdenInformeDao.create(ordOrdenInforme);
                        }
                    }
                    updateOrden.setIdSectorDestino(orden.getIdSectorDestino());
                    updateOrden.setIdEstado(orden.getIdEstado());
                    updateOrden.setIndDesconexion(orden.getIndDesconexion());
                    updateOrden.setFechaCumplimiento(orden.getFechaCumplimiento());
                    updateOrden.setFechaTranscripcion(orden.getFechaTranscripcion());
                    updateOrden.setFechaApliacacion(orden.getFechaApliacacion());
                    updateOrden.setFechaActualizacion(orden.getFechaApliacacion());
                    updateOrden.setIdOperadorCampo1(orden.getIdOperadorCampo1());
                    updateOrden.setIdOperadorCampo2(orden.getIdOperadorCampo2());
                    updateOrden.setObservacion(orden.getObservacion());
                    updateOrden.setUsuarioRegistro(orden.getUsuarioActualizacion());
                    updateOrden.setNumeroProyectoMaterial(orden.getNumeroProyectoMaterial());
                    updateOrden.setCoordConexionX(orden.getCoordConexionX());
                    updateOrden.setCoordConexionY(orden.getCoordConexionY());
                    updateOrden.setCoordMedicionX(orden.getCoordMedicionX());
                    updateOrden.setCoordMedicionY(orden.getCoordMedicionY());
                    isUpdateOrden = ordOrdenDao.update(updateOrden);
                    ordOrdenEstadosBean.updateEstadoOrden(updateOrden, orden.getIdEstado().getCodigo(), orden.getObservacion());
                }
            }
        } catch (Exception e) {
            cr.setResultMessage(CommonMessage.GLOBAL.ERROR.ERROR);
            e.printStackTrace();
        }
        return isUpdateOrden;
    }

    public Boolean validaRutaCritica(Integer idRemesa) {
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        Boolean isRutacritica = false;
        try {
            NucRemesaPeriodoControl nucRemesaPeriodoControl = nucRemesaPeriodoControlDao.findByRemesa(idRemesa);

            if (nucRemesaPeriodoControl != null) {
                isRutacritica = nucRemesaPeriodoControl.getRutaCritica();

            }

        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return isRutacritica;
    }

    public OrdOrden createOrdenInterna(NucConsumidor consumidor, OrdTipoOrden tipoOrden) {

        Boolean isSaveOrden = false;
        OrdOrden orden = new OrdOrden();
        NucServicioMedidor nucServicioMedidor = new NucServicioMedidor();
        NucLecturaMedidor nucLecturaMedidor = new NucLecturaMedidor();
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        try {
            NucConsumidor nucConsumidor = nucConsumidorDao.findById(consumidor.getId());
            NucServicio nucServicio = nucServicioDao.findByIdConsumidor(consumidor.getId(), CommonConstant.NUCTIPOSERVICIO.ENERGIA);
            NucDatosTecnicos nucDatosTecnicos = nucDatosTecnicosDao.findByIdServicio(nucServicio.getId());
            if (nucDatosTecnicos.getIdSistemaMedicion().getCodigo() != CommonConstant.NUCSISTEMAMEDICION.DIRECTA_SIN_MEDIDOR) {

                nucServicioMedidor = nucServicioMedidorDao.findByMedidorConectado(nucServicio.getId());
                nucLecturaMedidor = nucLecturaMedidorDao.findByServicioMedidor(nucServicioMedidor.getId());
            }
            RedTecnicaConsumidor redTecnicaConsumidor = redTecnicaConsumidorDao.findByIdConsumidor(consumidor.getId());

            orden
                    .setCodigo(Utils.getNextNumber(em, OrdOrden.class,
                            "codigo"));
            orden.setIdTipoOrden(tipoOrden);
            orden.setIdConsumidor(consumidor);
            orden.setIdEstado(ordEstadoDao.findByCodigoEstado(CommonConstant.ORDESTADO.CUMPLIDA));
            //orden.setIdSectorOrigen(solicitud.getIdSector());
            //orden.setIdSectorDestino(solicitud.getIdSector());
            if (redTecnicaConsumidor != null) {
                orden.setIdPuesto(redTecnicaConsumidor.getIdRedPuesto());
                orden.setIdPoste(redTecnicaConsumidor.getIdRedPoste());
            }
            orden.setIdRuta(consumidor.getIdRuta());
            orden.setIdVoltaje(nucDatosTecnicos.getIdVoltajeAsignado());
            orden.setIdNivelCalidad(nucServicio.getIdNivelCalidad());
            orden.setRazonSocial(nucConsumidor.getRazonSocial());
            orden.setIdCategoria(nucServicio.getIdCategoria());
            orden.setFechaRegistro(calendar.getTime());
            orden.setFechaActualizacion(calendar.getTime());
            if (tipoOrden.getCodigo() == CommonConstant.ORDTIPOORDEN.CAMBIO_MEDIDOR || tipoOrden.getRetiraMedidor()) {
                //Recupera medidor anterior para la orden de cambio de medidor
                orden.setIdMedidorDesconexion(nucServicioMedidor.getIdMedidor());
                orden.setIndDesconexion(nucLecturaMedidor.getIndiceUltimo());
            }
            isSaveOrden = ordOrdenDao.create(orden);

            if (isSaveOrden) {
                Boolean isEstadoOrden = false;
                Boolean isRutaCritica = this.validaRutaCritica(orden.getIdConsumidor().getIdRuta().getIdRemesa().getId());
                if (isRutaCritica) {
                    isEstadoOrden = ordOrdenEstadosBean.updateEstadoOrden(orden, CommonConstant.ORDESTADO.PENDIENTE_APLICACION_SISTEMA);
                } else {
                    isEstadoOrden = ordOrdenEstadosBean.updateEstadoOrden(orden, CommonConstant.ORDESTADO.CUMPLIDA);
                }
            }
        } catch (Exception e) {
            throw e;
        }
        return orden;
    }

    public CommonResponse generateOrdenInterna(CommonInput input) {
        cr = new CommonResponse();
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        // OrdOrden newOrden = input.getOrdOrden();
        try {
            OrdTipoOrden ordTipoOrden = new OrdTipoOrden();
            NucConsumidor consumidor = new NucConsumidor();
            NucConsumidor nucConsumidor = input.getNucConsumidor();
            OrdOrden ordOrden = input.getOrdOrden();
            List<OrdDetalleDto> ordenDetalleDtoList = input.getOrdDetalleDtoList();
            UsuarioDto usuarioDto = input.getUsuarioDto();
            if (ordOrden != null && ordOrden.getIdTipoOrden() != null) {
                ordTipoOrden = ordOrden.getIdTipoOrden();
            } else {
                ordTipoOrden = input.getOrdTipoOrden();
                if (nucConsumidor != null) {
                    consumidor = nucConsumidorDao.findById(nucConsumidor.getId());
                }
            }
            OrdTipoOrden tipoOrden = new OrdTipoOrden();
            if (ordTipoOrden.getCodigo() != null) {
                tipoOrden = ordTipoOrdenDao.findByCodigo(ordTipoOrden.getCodigo());
            } else {
                tipoOrden = ordTipoOrdenDao.findById(ordTipoOrden.getId());
            }
            if (consumidor.getIdRuta() == null) {
                cr.setResult(GlobalConstant.RESULT_INFO);
                throw new Exception(String.format(CommonMessage.ORDORDEN.WARNING.CONSUMIDOR_NO_RUTA));
            }

            Boolean isRutaCritica = this.validaRutaCritica(consumidor.getIdRuta().getIdRemesa().getId());

            Boolean isOrdenPendiente = this.validaOrdenPendiente(consumidor.getId(), ordTipoOrden.getId());
            if (isOrdenPendiente) {
                cr.setResult(GlobalConstant.RESULT_INFO);
                throw new Exception(String.format(CommonMessage.ORDORDEN.ERROR.TRAMITE_PENDIENTE));
            }
            Boolean isAplicaOrdenInterna = false;
            switch (tipoOrden.getCodigo()) {

                case CommonConstant.ORDTIPOORDEN.ALTA_BAJA_CONDICION_CONSUMIDOR: {
                    int cantidadCondiciones = 0;
                    if (ordenDetalleDtoList != null) {

                        for (OrdDetalleDto ordDetalleDto : ordenDetalleDtoList) {
                            if (ordDetalleDto.getValorActual() != null) {
                                String[] codigoCondiciones = ordDetalleDto.getValorActual().split(",");
                                for (String condicion : codigoCondiciones) {
                                    if (!condicion.equals("")) {
                                        cantidadCondiciones++;
                                    }
                                }
                            }
                        }
                    }

                    if (cantidadCondiciones <= 1) {
                        cr = createOrdenInterna(input);
                        if (!isRutaCritica) {
                            isAplicaOrdenInterna = this.applyAltaBajaCondicionConsumidor(consumidor, ordenDetalleDtoList, usuarioDto);
                        } else {
                            cr.setResultMessage(CommonMessage.ORDORDEN.WARNING.ORDEN_INTERNA_RUTA_CRITICA);
                            cr.setResult(CommonConstant.RESULT_WARNING);
                        }
                    } else {
                        cr.setResultMessage(CommonMessage.ORDORDEN.WARNING.CONSUMIDOR_TIENE_CONDICION);
                        cr.setResult(CommonConstant.RESULT_WARNING);
                    }
                    break;
                }
                case CommonConstant.ORDTIPOORDEN.BAJA_ALTA_CLIENTES_CARTA_FACT: {
                    //NucCartaFactura nucCartaFactura = input.getNucCartaFactura();
                    for (OrdDetalleDto ordDetalleDto : ordenDetalleDtoList) {
                        if (ordDetalleDto.getNombre().equals("codigo_carta_factura")) {
                            if (ordDetalleDto.getValorActual() != null) {

                                NucCartaFactura nucCartaFactura = nucCartaFacturaDao.findByCodigo(new Integer(ordDetalleDto.getValorActual()));
                                if (nucCartaFactura != null) {
                                    if (nucCartaFactura.getIdRemesaEmision().getCodigo() >= consumidor.getIdRuta().getIdRemesa().getCodigo()) {
                                        cr = createOrdenInterna(input);
                                        if (!isRutaCritica) {
                                            isAplicaOrdenInterna = this.applyAltaBajaCartaFactura(consumidor, ordenDetalleDtoList, usuarioDto);
                                        } else {
                                            cr.setResultMessage(CommonMessage.ORDORDEN.WARNING.ORDEN_INTERNA_RUTA_CRITICA);
                                            cr.setResult(CommonConstant.RESULT_WARNING);
                                        }
                                    } else {

                                        cr.setResultMessage(CommonMessage.ORDORDEN.WARNING.CARTA_FACTURA_REMESA_NO_CORRESPONDE);
                                        cr.setResult(CommonConstant.RESULT_WARNING);
                                    }

                                }
                            } else {
                                cr = createOrdenInterna(input);
                                isAplicaOrdenInterna = this.applyAltaBajaCartaFactura(consumidor, ordenDetalleDtoList, usuarioDto);
                            }

                        }

                    }

                    break;
                }
                case CommonConstant.ORDTIPOORDEN.CAMBIO_MEDIDOR: {
                    this.createOrdenInterna(consumidor, tipoOrden);

                    break;
                }
                case CommonConstant.ORDTIPOORDEN.CAMBIO_MULTIPLICADOR: {
                    cr = createOrdenInterna(input);
                    break;
                }
                case CommonConstant.ORDTIPOORDEN.CAMBIO_NOMBRE: {
                    cr = createOrdenInterna(input);
                    break;
                }
                case CommonConstant.ORDTIPOORDEN.CAMBIO_TARIFA: {
                    NucServicio nucServicio = input.getNucServicio();
                    NucDatosTecnicos nucDatosTecnicos = input.getNucDatosTecnicos();
                    cr = createOrdenInterna(input);
                    if (!isRutaCritica) {

                        isAplicaOrdenInterna = this.applyCambioTarifa(consumidor, ordenDetalleDtoList, usuarioDto);
                    } else {
                        cr.setResultMessage(CommonMessage.ORDORDEN.WARNING.ORDEN_INTERNA_RUTA_CRITICA);
                        cr.setResult(CommonConstant.RESULT_WARNING);
                    }
                    break;
                }
                case CommonConstant.ORDTIPOORDEN.CAMBIO_DEPOSITO_GARANTIA: {
                    cr = createOrdenInterna(input);
                    isAplicaOrdenInterna = this.applyCambioDepositoGarantia(consumidor, input.getSolSolicitud(), ordenDetalleDtoList, usuarioDto);
                    break;
                }
                case CommonConstant.ORDTIPOORDEN.CORRECCION_CODIGO_MEDIDOR: {
                    this.createOrdenInterna(consumidor, tipoOrden);
                    break;
                }
                case CommonConstant.ORDTIPOORDEN.CORRECCION_DIRECCION: {
                    String direccionAnterior = consumidor.getDireccion();
                    String numeroCasaAnterior = consumidor.getNumeroCasa();
                    String pisoDepartamenteAnt = consumidor.getPisoDepartamento();
                    String numeroDepartamenteAnt = consumidor.getNumeroDepartamento();

                    String direccionActual = "";
                    String numeroCasaActual = "";
                    String pisoDepartamenteActual = "";
                    String numeroDepartamenteActual = "";

                    String direccion = "";

                    for (OrdDetalleDto ordDetalleDto : ordenDetalleDtoList) {
                        if (ordDetalleDto.getNombre().equals("direccion")) {
                            direccionActual = ordDetalleDto.getValorActual();
                        }
                        if (ordDetalleDto.getNombre().equals("NUMERO")) {
                            numeroCasaActual = ordDetalleDto.getValorActual();
                        }
                        if (ordDetalleDto.getNombre().equals("NUMERODEPARTAMENTO")) {
                            numeroDepartamenteActual = ordDetalleDto.getValorActual();
                        }
                        if (ordDetalleDto.getNombre().equals("PISO")) {
                            pisoDepartamenteActual = ordDetalleDto.getValorActual();
                        }

                    }
                    if (direccionActual != null) {
                        direccion = direccion + direccionActual.trim();
                    }
                    if (numeroCasaActual != null) {
                        direccion = direccion + "N:" + numeroCasaActual.trim();
                    }
                    if (pisoDepartamenteActual != null) {
                        direccion = direccion + "Pl:" + pisoDepartamenteActual.trim();
                    }
                    if (numeroDepartamenteActual != null) {
                        direccion = direccion + "Dpt:" + numeroDepartamenteActual.trim();
                    }
                    if (direccion.length() > 50) {
                        cr.setResult(GlobalConstant.RESULT_INFO);
                        cr.setResultMessage(String.format(et.com.ejb.atc.data.CommonMessage.SOLSOLICITUD.WARNING.SOLICITUD_TAM_DIECCION));
                        return cr;
                    }
                    cr = createOrdenInterna(input);
                    if (!isRutaCritica) {
                        isAplicaOrdenInterna = applyCorreccionDireccion(nucConsumidor, ordenDetalleDtoList, usuarioDto);
                    } else {
                        cr.setResultMessage(CommonMessage.ORDORDEN.WARNING.ORDEN_INTERNA_RUTA_CRITICA);
                        cr.setResult(CommonConstant.RESULT_WARNING);
                    }

                    for (OrdDetalleDto ordDetalleDto : ordenDetalleDtoList) {
                        if (ordDetalleDto.getNombre().equals("direccion")) {
                            direccionActual = ordDetalleDto.getValorActual();
                        }
                        if (ordDetalleDto.getNombre().equals("NUMERO")) {
                            numeroCasaActual = ordDetalleDto.getValorActual();
                        }
                        if (ordDetalleDto.getNombre().equals("NUMERODEPARTAMENTO")) {
                            pisoDepartamenteActual = ordDetalleDto.getValorActual();
                        }
                        if (ordDetalleDto.getNombre().equals("PISO")) {
                            numeroDepartamenteActual = ordDetalleDto.getValorActual();
                        }

                    }
                    OrdOrden orden = cr.getOrdOrden();
                    SimpleDateFormat format = new SimpleDateFormat("ddMMyyyyHHmmss");
                    String ordenPdf = CommonConstant.BASE_PATH_TMP + "ordenCorreccionDireccion-" + format.format(calendar.getTime()) + ".pdf";
                    String ordenTxt = CommonConstant.BASE_PATH_TMP + "ordenCorreccionDireccion-" + format.format(calendar.getTime()) + ".txt";
                    this.printOrdenCorreccion(orden.getId(), direccionAnterior, numeroCasaAnterior, pisoDepartamenteAnt, numeroDepartamenteAnt, direccionActual, numeroCasaActual, pisoDepartamenteActual, numeroDepartamenteActual, ordenTxt);
                    cr.setBase64(Utils.getFileBase64(ordenTxt));
                    cr.setOrdOrden(orden);

                    break;
                }
                case CommonConstant.ORDTIPOORDEN.CORRECCION_INDICE: {
                    cr = createOrdenInterna(input);
                    break;
                }
                case CommonConstant.ORDTIPOORDEN.CORRECCION_NOMBRE: {

                    String razonSocial = "";
                    Boolean tieneRazonSocial = false;
                    String nombre = "";
                    String apPaterno = "";
                    String apMaterno = "";
                    for (OrdDetalleDto ordDetalleDto : ordenDetalleDtoList) {
                        if (ordDetalleDto.getNombre().equals("RAZON_SOCIAL")) {

                            razonSocial = ordDetalleDto.getValorActual();
                            if (ordDetalleDto.getValorActual() != null) {
                                tieneRazonSocial = true;
                            }
                        }
                        if (ordDetalleDto.getNombre().equals("nombre")) {

                            nombre = ordDetalleDto.getValorActual();
                        }
                        if (ordDetalleDto.getNombre().equals("APELLIDO_PATERNO")) {

                            apPaterno = ordDetalleDto.getValorActual();
                        }
                        if (ordDetalleDto.getNombre().equals("APELLIDO_MATERNO")) {

                            apMaterno = ordDetalleDto.getValorActual();
                        }
                    }
                    if (!tieneRazonSocial) {
                        razonSocial = apPaterno + ' ' + apMaterno + ' ' + nombre;
                    }

                    if (razonSocial.length() > 50) {
                        cr.setResult(GlobalConstant.RESULT_INFO);
                        cr.setResultMessage(String.format(et.com.ejb.atc.data.CommonMessage.SOLSOLICITUD.WARNING.SOLICITUD_TAM_RAZON_SOCIAL));
                        return cr;
                    }
                    cr = createOrdenInterna(input);
                    if (!isRutaCritica) {
                        isAplicaOrdenInterna = applyCorreccionNombre(nucConsumidor, ordenDetalleDtoList, usuarioDto);
                    } else {
                        cr.setResultMessage(CommonMessage.ORDORDEN.WARNING.ORDEN_INTERNA_RUTA_CRITICA);
                        cr.setResult(CommonConstant.RESULT_WARNING);
                    }
                    break;
                }

                case CommonConstant.ORDTIPOORDEN.CORRECCION_NUMERO_TELEFONO: {
                    String celularActual = "";
                    String celularAnterior = "";
                    String telefonoActual = "";
                    String telefonoAnterior = "";
                    for (OrdDetalleDto ordDetalleDto : ordenDetalleDtoList) {
                        if (ordDetalleDto.getNombre().equals("celular")) {
                            celularActual = ordDetalleDto.getValorActual();
                            celularAnterior = ordDetalleDto.getValorAnterior();
                        }
                        if (ordDetalleDto.getNombre().equals("TELEFONO")) {
                            telefonoActual = ordDetalleDto.getValorActual();
                            telefonoAnterior = ordDetalleDto.getValorAnterior();
                        }
                    }

                    if (celularActual.length() != 8) {
                        cr.setResult(GlobalConstant.RESULT_INFO);
                        cr.setResultMessage(String.format(et.com.ejb.atc.data.CommonMessage.SOLSOLICITUD.WARNING.SOLICITUD_TAM_CELULAR));
                        return cr;
                    }
                    cr = createOrdenInterna(input);
                    OrdOrden orden = cr.getOrdOrden();
                    SimpleDateFormat format = new SimpleDateFormat("ddMMyyyyHHmmss");
                    String pathTmpFile = CommonConstant.BASE_PATH_TMP + "ordenCorreccionNroTelefono-" + format.format(calendar.getTime()) + ".txt";
                    this.printOrdenCorreccionNroTelefono(orden.getId(), celularAnterior, telefonoAnterior, celularActual, telefonoActual, pathTmpFile);
                    cr.setBase64(Utils.getFileBase64(pathTmpFile));
                    cr.setOrdOrden(orden);
                    isAplicaOrdenInterna = this.applyCorreccionTelefono(nucConsumidor, ordenDetalleDtoList, usuarioDto);
                    break;
                }
                case CommonConstant.ORDTIPOORDEN.CORRECCION_NRODOCUMENTO_NIT: {
                    String newTipoDocumento = "";
                    String newNroDocumento = "";
                    String newComplementoDocumento = "";
                    String newExpedido = "";
                    String newTipoDocumentoFactura = "";
                    String newNit = "";

                    String oldTipoDocumento = "";
                    String oldNroDocumento = "";
                    String oldComplementoDocumento = "";
                    String oldExpedido = "";
                    String oldTipoDocumentoFactura = "";
                    String oldNit = "";
                    for (OrdDetalleDto ordDetalleDto : ordenDetalleDtoList) {
                        if (ordDetalleDto.getNombre().equals("tipoDocumento")) {
                            newTipoDocumento = ordDetalleDto.getValorActual();
                            oldTipoDocumento = ordDetalleDto.getValorAnterior();
                        }
                        if (ordDetalleDto.getNombre().equals("numeroDocumento")) {
                            newNroDocumento = ordDetalleDto.getValorActual();
                            oldNroDocumento = ordDetalleDto.getValorAnterior();
                        }
                        if (ordDetalleDto.getNombre().equals("complementoDocumento")) {
                            newComplementoDocumento = ordDetalleDto.getValorActual();
                            oldComplementoDocumento = ordDetalleDto.getValorAnterior();
                        }
                        if (ordDetalleDto.getNombre().equals("ciExpedido")) {
                            newExpedido = ordDetalleDto.getValorActual();
                            oldExpedido = ordDetalleDto.getValorAnterior();
                        }
                        if (ordDetalleDto.getNombre().equals("tipoDocumentoFactura")) {
                            newTipoDocumentoFactura = ordDetalleDto.getValorActual();
                            oldTipoDocumentoFactura = ordDetalleDto.getValorAnterior();
                        }
                        if (ordDetalleDto.getNombre().equals("nit")) {
                            newNit = ordDetalleDto.getValorActual();
                            oldNit = ordDetalleDto.getValorAnterior();
                        }
                    }
                    if (newTipoDocumento.length() == 0 || newNroDocumento.length() == 0 || newExpedido.length() == 0 || newTipoDocumentoFactura.length() == 0 || newNit.length() == 0) {
                        cr.setResult(GlobalConstant.RESULT_INFO);
                        cr.setResultMessage(String.format(et.com.ejb.atc.data.CommonMessage.SOLSOLICITUD.WARNING.CORRECCION_NRO_DOCUMENTO_Y_NIT_VACIOS));
                        return cr;
                    }

                    cr = createOrdenInterna(input);
                    OrdOrden orden = cr.getOrdOrden();
                    SimpleDateFormat format = new SimpleDateFormat("ddMMyyyyHHmmss");
                    String pathTmpFile = CommonConstant.BASE_PATH_TMP + "ordenCorreccionNroDocumentoNit-" + format.format(calendar.getTime()) + ".txt";
                    this.printOrdenCorreccionNroDocumentoNit(
                            orden.getId(),
                            oldTipoDocumento,
                            oldNroDocumento,
                            oldComplementoDocumento,
                            oldExpedido,
                            oldTipoDocumentoFactura,
                            oldNit,
                            newTipoDocumento,
                            newNroDocumento,
                            newComplementoDocumento,
                            newExpedido,
                            newTipoDocumentoFactura,
                            newNit,
                            pathTmpFile
                    );
                    cr.setBase64(Utils.getFileBase64(pathTmpFile));
                    cr.setOrdOrden(orden);
                    if (!isRutaCritica) {
                        isAplicaOrdenInterna = this.applyCorreccionNroDocumentoNit(nucConsumidor, ordenDetalleDtoList, usuarioDto);
                    } else {
                        cr.setResultMessage(CommonMessage.ORDORDEN.WARNING.ORDEN_INTERNA_RUTA_CRITICA);
                        cr.setResult(CommonConstant.RESULT_WARNING);
                    }
                    break;
                }
                case CommonConstant.ORDTIPOORDEN.CORRECCION_CORREOELECTRONICO: {
                    String newEmail = "";
                    String oldEmail = "";

                    for (OrdDetalleDto ordDetalleDto : ordenDetalleDtoList) {
                        if (ordDetalleDto.getNombre().equals("email")) {
                            newEmail = ordDetalleDto.getValorActual();
                            oldEmail = ordDetalleDto.getValorAnterior();
                        }
                    }
                    /*if (newEmail.length() == 0) {
                        cr.setResult(GlobalConstant.RESULT_INFO);
                        cr.setResultMessage(String.format(et.com.ejb.atc.data.CommonMessage.SOLSOLICITUD.WARNING.CORRECCION_CORREOELECTRONICO_VACIOS));
                        return cr;
                    }*/
                    cr = createOrdenInterna(input);
                    OrdOrden orden = cr.getOrdOrden();
                    SimpleDateFormat format = new SimpleDateFormat("ddMMyyyyHHmmss");
                    String pathTmpFile = CommonConstant.BASE_PATH_TMP + "ordenCorreccionCorreoElectronico-" + format.format(calendar.getTime()) + ".txt";
                    this.printOrdenCorreccionCorreoElectronico(orden.getId(), oldEmail, newEmail, pathTmpFile);
                    cr.setBase64(Utils.getFileBase64(pathTmpFile));
                    cr.setOrdOrden(orden);
                    isAplicaOrdenInterna = this.applyCorreccionCorreoElectronico(nucConsumidor, ordenDetalleDtoList, usuarioDto);
                    break;
                }

                case CommonConstant.ORDTIPOORDEN.MODIFICACION_INE: {
                    String codigoine = "";
                    cr = createOrdenInterna(input); //isAplicaOrdenInterna = this.applyCorreccionTelefono(nucConsumidor, ordenDetalleDtoList, usuarioDto);
                    isAplicaOrdenInterna = this.applyCorreccionIne(nucConsumidor, ordenDetalleDtoList, usuarioDto);
                    break;
                }
                case CommonConstant.ORDTIPOORDEN.CORRECCION_RAZON_SOCIAL: {
                    cr = createOrdenInterna(input);
                    break;
                }

                case CommonConstant.ORDTIPOORDEN.ELIMINACION_TASA_ASEO: {
                    NucServicio nucServicio = input.getNucServicio();
                    cr = createOrdenInterna(input);
                    applyAltaBajaTasaAseo(consumidor, nucServicio);
                    break;
                }
                case CommonConstant.ORDTIPOORDEN.KWH_DIAS_DIRECTO: {
                    cr = createOrdenInterna(input);
                    OrdKwhDiasDirectoDto ordKwhDiasDirectoDto = input.getOrdKwhDiasDirectoDto();
                    applyKWHDiasDirecto(consumidor, ordKwhDiasDirectoDto);

                    break;
                }
                case CommonConstant.ORDTIPOORDEN.MODIF_DATOS_TRANSFORMADOR: {
                    List<LecConsumidorPerdidasTrafo> lecConsumidorPerdidasTrafoList = input.getLecConsumidorPerdidasTrafoList();
                    cr = createOrdenInterna(input);
                    applyModificaDatosTransformador(consumidor, lecConsumidorPerdidasTrafoList);
                    break;
                }
                case CommonConstant.ORDTIPOORDEN.MODIF_KWH_SERV_DIRECTO: {
                    NucDatosTecnicos nucDatosTecnicos = input.getNucDatosTecnicos();
                    NucServicio nucServicioEnergia = nucServicioDao.findByIdConsumidor(consumidor.getId(), CommonConstant.NUCTIPOSERVICIO.ENERGIA);
                    NucDatosTecnicos datosTecnicos = nucDatosTecnicosDao.findByIdServicio(nucServicioEnergia.getId());
                    if (datosTecnicos.getIdSistemaMedicion().getCodigo() == CommonConstant.NUCSISTEMAMEDICION.DIRECTA_SIN_MEDIDOR) {
                        cr = createOrdenInterna(input);
                        this.applyModificacionKWHDirecto(consumidor, nucDatosTecnicos);

                    } else {
                        cr.setResultMessage(CommonMessage.ORDORDEN.WARNING.CONSUMIDOR_SISTEMAMED_DIRECTA);
                    }
                    break;
                }

                case CommonConstant.ORDTIPOORDEN.RECOJO_MEDIDOR_SERVICIO_DADO_BAJA: {
                    cr = createOrdenInterna(input);
                    break;
                }
                case CommonConstant.ORDTIPOORDEN.CORTE: {
                    /*isAplicaOrdenInterna = cyrCorteReconexionBean.generateCorteSuspensionIndividual(input);
                    if (!isAplicaOrdenInterna) {
                        cr.setResult(GlobalConstant.RESULT_WARNING);
                        cr.setResultMessage(String.format(CommonMessage.ORDORDEN.WARNING.NO_GENERA_ORDEN, consumidor.getCodigo()));
                    }*/
                    NucServicio nucServicio = nucServicioDao.findByIdConsumidor(consumidor.getId(), CommonConstant.NUCTIPOSERVICIO.ENERGIA);
                    if (nucServicio.getIdEstado().getCodigo() != CommonConstant.NUCESTADOS.BAJA) {
                        cr = cyrCorteReconexionBean.generateCorteSuspensionIndividual(input);
                    } else {
                        cr.setResult(GlobalConstant.RESULT_WARNING);
                        cr.setResultMessage(String.format(CommonMessage.ORDORDEN.WARNING.ESTADO_INCORRECTO_SUSPENDIDO_BAJA, nucServicio.getIdEstado().getDescripcion()));
                    }
                    break;
                }

                case CommonConstant.ORDTIPOORDEN.RECONEXION: {
                    NucServicio nucServicio = nucServicioDao.findByIdConsumidor(consumidor.getId(), CommonConstant.NUCTIPOSERVICIO.ENERGIA);
                    if (nucServicio.getIdEstado().getCodigo() != CommonConstant.NUCESTADOS.BAJA) {
                        NucSector nucSector = nucSectorDao.findById(usuarioDto.getId_sector());
                        if (nucSector == null) {
                            cr.setResultMessage(CommonMessage.ORDORDEN.WARNING.SECTOR_REQUIRED);
                            cr.setResult(CommonConstant.RESULT_WARNING);
                        } else {
                            boolean habilitado = verificarOrdenHabilitada(nucSector.getCodigo());
                            if (!habilitado) {
                                cr.setResultMessage(CommonMessage.ORDORDEN.WARNING.ORDEN_NO_HABILITADO);
                                cr.setResult(CommonConstant.RESULT_WARNING);
                                break;
                            }
                            isAplicaOrdenInterna = cyrCorteReconexionBean.generateReconexionRehabilitacionIndividual(input);
                            if (!isAplicaOrdenInterna) {
                                cr.setResult(GlobalConstant.RESULT_WARNING);
                                cr.setResultMessage(String.format(CommonMessage.ORDORDEN.WARNING.NO_GENERA_ORDEN, consumidor.getCodigo()));
                            }
                        }
                    } else {
                        cr.setResult(GlobalConstant.RESULT_WARNING);
                        cr.setResultMessage(String.format(CommonMessage.ORDORDEN.WARNING.ESTADO_INCORRECTO_SUSPENDIDO_BAJA, nucServicio.getIdEstado().getDescripcion()));
                    }
                    break;
                }
                case CommonConstant.ORDTIPOORDEN.SUSPENSION_FALTA_PAGO: {

                    NucServicio nucServicio = nucServicioDao.findByIdConsumidor(consumidor.getId(), CommonConstant.NUCTIPOSERVICIO.ENERGIA);
                    if (nucServicio.getIdEstado().getCodigo() != CommonConstant.NUCESTADOS.BAJA) {
                        cr = cyrCorteReconexionBean.generateCorteSuspensionIndividual(input);
                    } else {
                        cr.setResult(GlobalConstant.RESULT_WARNING);
                        cr.setResultMessage(String.format(CommonMessage.ORDORDEN.WARNING.ESTADO_INCORRECTO_SUSPENDIDO_BAJA, nucServicio.getIdEstado().getDescripcion()));
                    }
                    break;
                }

                case CommonConstant.ORDTIPOORDEN.REHABILITACION_FALTA_PAGO: {
                    NucServicio nucServicio = nucServicioDao.findByIdConsumidor(consumidor.getId(), CommonConstant.NUCTIPOSERVICIO.ENERGIA);
                    if (nucServicio.getIdEstado().getCodigo() != CommonConstant.NUCESTADOS.BAJA) {
                        NucSector nucSector = nucSectorDao.findById(usuarioDto.getId_sector());
                        if (nucSector == null) {
                            cr.setResultMessage(CommonMessage.ORDORDEN.WARNING.SECTOR_REQUIRED);
                            cr.setResult(CommonConstant.RESULT_WARNING);
                        } else {
                            boolean habilitado = verificarOrdenHabilitada(nucSector.getCodigo());
                            if (!habilitado) {
                                cr.setResultMessage(CommonMessage.ORDORDEN.WARNING.ORDEN_NO_HABILITADO);
                                cr.setResult(CommonConstant.RESULT_WARNING);
                                break;
                            }
                            isAplicaOrdenInterna = cyrCorteReconexionBean.generateReconexionRehabilitacionIndividual(input);
                            if (!isAplicaOrdenInterna) {

                                cr.setResult(GlobalConstant.RESULT_WARNING);
                                cr.setResultMessage(String.format(CommonMessage.ORDORDEN.WARNING.NO_GENERA_ORDEN, consumidor.getCodigo()));

                            }
                        }
                    } else {
                        cr.setResult(GlobalConstant.RESULT_WARNING);
                        cr.setResultMessage(String.format(CommonMessage.ORDORDEN.WARNING.ESTADO_INCORRECTO_SUSPENDIDO_BAJA, nucServicio.getIdEstado().getDescripcion()));
                    }
                    break;
                }
                case CommonConstant.ORDTIPOORDEN.RESTITUCION_SUSPENDIDO: {

                    cr = createOrdenInterna(input);
                    break;
                }
                case CommonConstant.ORDTIPOORDEN.REVISION_MEDIDOR: {
                    cr = createOrdenInterna(input);
                    break;
                }

                case CommonConstant.ORDTIPOORDEN.TRASPASO_DEUDA: {
                    cr = createOrdenInterna(input);
                    break;
                }
                case CommonConstant.ORDTIPOORDEN.ANULACION_CARGO_RECONEXION: {

                    cr = createOrdenInterna(input);
                    isAplicaOrdenInterna = applyAnulaCargoReconRehab(input.getFacConceptoPeriodoControl());

                    break;
                }
                case CommonConstant.ORDTIPOORDEN.CAMBIO_ESTADO_SUSPENDIDO_BAJA: {

                    // if (!isRutaCritica) {
                    cr = createOrdenInterna(input);
                    isAplicaOrdenInterna = this.applyCambioSuspendidoBaja(consumidor, ordenDetalleDtoList, usuarioDto);
//                    } else {
//                        cr.setResultMessage(CommonMessage.ORDORDEN.WARNING.ORDEN_INTERNA_RUTA_CRITICA);
//                        cr.setResult(CommonConstant.RESULT_WARNING);
//                    }

                    break;
                }
                case CommonConstant.ORDTIPOORDEN.CAMBIO_POBLACION: {
                    cr = createOrdenInterna(input);
                    NucArea nucArea = input.getNucArea();
                    if (!isRutaCritica) {
                        isAplicaOrdenInterna = applyCambioPoblacion(consumidor, nucArea, ordenDetalleDtoList, usuarioDto);
                    } else {
                        cr.setResultMessage(CommonMessage.ORDORDEN.WARNING.ORDEN_INTERNA_RUTA_CRITICA);
                        cr.setResult(CommonConstant.RESULT_WARNING);
                    }
                    break;
                }
                case CommonConstant.ORDTIPOORDEN.DEVOLUCION_DEPOSITO_GARANTIA: {
                    Boolean isDevolucion = false;

                    BigDecimal importeSugerido = new BigDecimal(0);
                    String razonsocial = "", numerodocumento = "", expedido = "";
                    NucDepositoGarantia nucDepositoGarantiaOld = nucDepositoGarantiaDao.findById(input.getNucDepositoGarantia().getId());
                    NucServicio nucServicio = nucServicioDao.findByIdConsumidor(nucDepositoGarantiaOld.getIdConsumidor().getId(), CommonConstant.NUCTIPOSERVICIO.ENERGIA);
                    List<Object[]> nucDepositoGarantiaList = null;

                    String fecharegistro = "";
                    Date SlDepositoFEcha = null;

                    SimpleDateFormat in = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.S");

                    if (nucServicio.getIdEstado().getCodigo() == CommonConstant.NUCESTADOS.BAJA || (nucServicio.getIdEstado().getCodigo() == CommonConstant.NUCESTADOS.SUSPENDIDO && nucServicio.getIdSubestado().getCodigo() == CommonConstant.NUCSUBESTADOS.SUSPDEFINITIVA)) {
                        isDevolucion = true;
                        SlDepositoFEcha = nucDepositoGarantiaOld.getFechaRegistro();
                        importeSugerido = nucDepositoGarantiaOld.getImporte();
                        razonsocial = nucDepositoGarantiaOld.getRazonSocial();
                        numerodocumento = nucDepositoGarantiaOld.getNit();
                        if (nucDepositoGarantiaOld.getIdCiExpedido() != null) {
                            expedido = nucDepositoGarantiaOld.getIdCiExpedido().getCodigo();
                        } else {
                            expedido = "";
                        }

                    } else {

                        nucDepositoGarantiaList = nucDepositoGarantiaDao.findByIdConsumidorNoDevueltoCambioNombre1(nucDepositoGarantiaOld.getIdConsumidor().getId(), input.getNucDepositoGarantia().getId());
                        if (nucDepositoGarantiaList != null && nucDepositoGarantiaList.size() == 1) {
                            for (Object[] nucDepositoGarantia : nucDepositoGarantiaList) {
                                razonsocial = nucDepositoGarantia[1].toString();
                                importeSugerido = (BigDecimal) nucDepositoGarantia[3];
                                fecharegistro = nucDepositoGarantia[5].toString();
                                SlDepositoFEcha = in.parse(fecharegistro);
                                numerodocumento = nucDepositoGarantia[7].toString();
                                expedido = nucDepositoGarantia[8].toString();

                            }
                            isDevolucion = true;

                        } else {
                            isDevolucion = false;
                            cr.setResultMessage(CommonMessage.ORDORDEN.WARNING.ESTADO_INCORRECTO_DEVOLUCION_GARANTIA);
                            cr.setResult(CommonConstant.RESULT_WARNING);
                        }
                    }
                    if (isDevolucion) {
                        cr = createOrdenInterna(input);

                        if (importeSugerido.compareTo(new BigDecimal(0)) == 0) {
                            importeSugerido = nucDepositoGarantiaOld.getImporte();
                        }

                        BigDecimal importeDevolver = this.calcularDepositoGarantias(importeSugerido, SlDepositoFEcha);

                        isAplicaOrdenInterna = this.applyDevolucionDepositoGarantia(input.getNucDepositoGarantia(), importeDevolver, usuarioDto);

                        OrdOrden orden = cr.getOrdOrden();
                        SimpleDateFormat format = new SimpleDateFormat("ddMMyyyyHHmmss");
                        String ordenPdf = CommonConstant.BASE_PATH_TMP + "devolucionDeposito-" + format.format(calendar.getTime()) + ".pdf";
                        this.printOrdenDevolucionGarantia(orden.getId(), nucDepositoGarantiaOld.getRazonSocial(), nucDepositoGarantiaOld.getNit(), importeDevolver, ordenPdf);
                        cr.setBase64(Utils.getFileBase64(ordenPdf));
                    }
                    break;
                }
                case CommonConstant.ORDTIPOORDEN.CAMBIO_VOLTAJE: {
                    //cr = validaCorreccionVoltaje();
                    cr = createOrdenInterna(input);
                    isAplicaOrdenInterna = this.applyCorreccionVoltaje(nucConsumidor, input.getSolSolicitud(), ordenDetalleDtoList, usuarioDto);
                    break;
                }
                case CommonConstant.ORDTIPOORDEN.CAMBIO_ACOMETIDA_INTERNA: {
                    OrdOrden orden = new OrdOrden();
                    orden.setOrdOrdenMaterialList(input.getOrdOrdenMaterialList());
                    orden.setIdConsumidor(input.getNucConsumidor());
                    cr = this.createOrdenInternaCambioAcometida(orden, usuarioDto);
                    break;
                }
                case CommonConstant.ORDTIPOORDEN.CAMBIO_NOMBRE_SOLICITUD: {
                    cr = createOrdenInterna(input);//validate data before createing order
                    isAplicaOrdenInterna = this.applyCambioNombreSolicitud(nucConsumidor, input.getSolSolicitud(), ordenDetalleDtoList, usuarioDto);
                    break;
                }
                case CommonConstant.ORDTIPOORDEN.SISTEMA_MEDICION: {
                    cr = createOrdenInterna(input);
                    NucArea nucArea = input.getNucArea();
                    if (!isRutaCritica) {
                        isAplicaOrdenInterna = this.applyCorreccionSistemaMedicion(consumidor, ordenDetalleDtoList, usuarioDto);
                    } else {
                        cr.setResultMessage(CommonMessage.ORDORDEN.WARNING.ORDEN_INTERNA_RUTA_CRITICA);
                        cr.setResult(CommonConstant.RESULT_WARNING);
                    }
                    break;
                }
                case CommonConstant.ORDTIPOORDEN.REHABILITACION_INTERNA: {
                    NucServicio nucServicio = nucServicioDao.findByIdConsumidor(consumidor.getId(), CommonConstant.NUCTIPOSERVICIO.ENERGIA);
                    if (nucServicio.getIdEstado().getCodigo() != CommonConstant.NUCESTADOS.BAJA) {
                        isAplicaOrdenInterna = cyrCorteReconexionBean.generateReconexionRehabilitacionIndividual(input);
                        if (!isAplicaOrdenInterna) {
                            cr.setResult(GlobalConstant.RESULT_WARNING);
                            cr.setResultMessage(String.format(CommonMessage.ORDORDEN.WARNING.NO_GENERA_ORDEN, consumidor.getCodigo()));
                        }
                    } else {
                        cr.setResult(GlobalConstant.RESULT_WARNING);
                        cr.setResultMessage(String.format(CommonMessage.ORDORDEN.WARNING.ESTADO_INCORRECTO_SUSPENDIDO_BAJA, nucServicio.getIdEstado().getDescripcion()));
                    }
                    break;
                }
                case CommonConstant.ORDTIPOORDEN.CAMBIO_ESTADO_CONSUMIDOR: {
                    try {
                        cr = createOrdenInterna(input);
                        if (cr.getResult() == 0) {
                            isAplicaOrdenInterna = this.applyCambioEstadoConsumidor(consumidor, ordenDetalleDtoList, usuarioDto);
                        }

                    } catch (Exception e) {
                        //cr.setResult(CommonConstant.RESULT_ERROR);
                        cr.setResultMessage(e.getMessage());
                        e.printStackTrace();
                    }
                    break;
                }

                case CommonConstant.ORDTIPOORDEN.CAMBIO_MUNICIPIO: {
                    cr = createOrdenInterna(input);
                    NucProvincia nucProvincia = input.getNucProvincia();
                    if (!isRutaCritica) {
                        isAplicaOrdenInterna = applyCambioMunicipio(consumidor, nucProvincia, ordenDetalleDtoList, usuarioDto);
                    } else {
                        cr.setResultMessage(CommonMessage.ORDORDEN.WARNING.ORDEN_INTERNA_RUTA_CRITICA);
                        cr.setResult(CommonConstant.RESULT_WARNING);
                    }
                    break;
                }
                case CommonConstant.ORDTIPOORDEN.PRE_INSPECCION_GDI: {
                    NucServicio servicio = nucServicioDao.findByIdConsumidor(nucConsumidor.getId(), CommonConstant.NUCTIPOSERVICIO.ENERGIA);
                    if (servicio.getIdEstado().getCodigo() != CommonConstant.NUCESTADOS.CONECTADO) {
                        cr.setResult(GlobalConstant.RESULT_ERROR);
                        throw new Exception(String.format(et.com.ejb.atc.data.CommonMessage.SOLSOLICITUD.ERROR.ESTADO_CONECTADO));
                    }
                    cr = applyPreInspeccionGDI(input, true);

                    break;
                }
                case CommonConstant.ORDTIPOORDEN.CONSULTA_HISTORICO_POTENCIA_GDI: {
                    NucServicio servicio = nucServicioDao.findByIdConsumidor(nucConsumidor.getId(), CommonConstant.NUCTIPOSERVICIO.ENERGIA);
                    if (servicio.getIdEstado().getCodigo() != CommonConstant.NUCESTADOS.CONECTADO) {
                        cr.setResult(GlobalConstant.RESULT_ERROR);
                        throw new Exception(String.format(et.com.ejb.atc.data.CommonMessage.SOLSOLICITUD.ERROR.ESTADO_CONECTADO));
                    }
                    cr = applyPreInspeccionGDIPOT(input, true);
                    if (cr.getResult() == 0) {
                        isAplicaOrdenInterna = true;
                    }

                    break;
                }
                case CommonConstant.ORDTIPOORDEN.MODIFICACION_RECLAMO: {
                    //******cambiamos el input ordenDetalle Dto list e id de codigoReclamo por codigo de reclamo
                    //buscamos el id anterior
                    /* List<OrdDetalleDto> ordenDetalleDtoList1=new ArrayList<OrdDetalleDto>(); 
                    ordenDetalleDtoList1=ordenDetalleDtoList;*/
                    boolean es_consumidor_varios = false;
                    List<NucSistema> nucSistema_aux = nucSistemaDao.getListSistemas();
                    for (NucSistema ns : nucSistema_aux) {
                        if (consumidor.getCodigo().compareTo(BigInteger.valueOf(ns.getConsumidorVarios())) == 0) {
                            es_consumidor_varios = true;
                            break;
                        }

                    }
                    ///***********
                    if (!es_consumidor_varios) {

                        RecCodigoReclamo idCodigoReclamoAnterior = null;
                        RecCodigoReclamo idCodigoReclamoActual = null;
                        //OrdDetalleDto ordDetalleDto1=null;
                        for (OrdDetalleDto ordDetalleDto : input.getOrdDetalleDtoList()) {
                            if (ordDetalleDto.getNombre().equals("codigo_reclamo")) {
                                //ordDetalleDto1=ordDetalleDto;
                                idCodigoReclamoAnterior = recCodigoReclamoDao.findById(Integer.parseInt(ordDetalleDto.getValorAnterior()));
                                idCodigoReclamoActual = recCodigoReclamoDao.findById(Integer.parseInt(ordDetalleDto.getValorActual()));
                                if (idCodigoReclamoAnterior != null) {
                                    ordDetalleDto.setValorAnterior(idCodigoReclamoAnterior.getCodigo());
                                }
                                if (idCodigoReclamoActual != null) {
                                    ordDetalleDto.setValorActual(idCodigoReclamoActual.getCodigo());
                                }
                            }
                        }
                        //******
                        //añadimos nuero reclamo en observacion
                        input.getOrdOrden().setObservacion("(Nro Reclamo: " + input.getRecReclamo().getNumeroReclamoSistema() + ") " + input.getOrdOrden().getObservacion());
                        cr = createOrdenInterna(input);//validate data before createing order
                        if (cr.getResult() == 0) {
                            for (OrdDetalleDto ordDetalleDto : input.getOrdDetalleDtoList()) {
                                if (ordDetalleDto.getNombre().equals("codigo_reclamo")) {
                                    if (idCodigoReclamoAnterior != null) {
                                        ordDetalleDto.setValorAnterior(Integer.toString(idCodigoReclamoAnterior.getId()));
                                    }
                                    if (idCodigoReclamoActual != null) {
                                        ordDetalleDto.setValorActual(Integer.toString(idCodigoReclamoActual.getId()));
                                    }
                                }
                            }
                            isAplicaOrdenInterna = this.applyModificacionReclamo(nucConsumidor, input.getRecReclamo(), ordenDetalleDtoList, usuarioDto);
                        } else {
                            cr.setResult(GlobalConstant.RESULT_WARNING);
                            cr.setResultMessage(CommonMessage.GLOBAL.ERROR.ERROR);

                        }
                    } else {
                        cr.setResult(GlobalConstant.RESULT_WARNING);
                        cr.setResultMessage(CommonMessage.ORDORDEN.WARNING.RECLAMO_GENERICO);
                    }
                    break;
                }
                case CommonConstant.ORDTIPOORDEN.CERTIFICACION_CONSUMIDOR: {

                    cr = createOrdenInterna(input);
                    if (cr.getResult() == 0) {
                        isAplicaOrdenInterna = true;
                    } else {
                        cr.setResult(GlobalConstant.RESULT_WARNING);
                        cr.setResultMessage(CommonMessage.GLOBAL.ERROR.ERROR);
                    }

                    break;
                }
                case CommonConstant.ORDTIPOORDEN.CERTIFICACION_HISTORIAL_DEUDA: {

                    cr = createOrdenInterna(input);
                    if (cr.getResult() == 0) {
                        isAplicaOrdenInterna = true;
                    } else {
                        cr.setResult(GlobalConstant.RESULT_WARNING);
                        cr.setResultMessage(CommonMessage.GLOBAL.ERROR.ERROR);
                    }

                    break;
                }
                case CommonConstant.ORDTIPOORDEN.CORRECCION_TELEFONO_CORREO: {
                    String newEmail = "";
                    String oldEmail = "";
                    String celularActual = "";
                    String celularAnterior = "";
                    String telefonoActual = "";
                    String telefonoAnterior = "";

                    for (OrdDetalleDto ordDetalleDto : ordenDetalleDtoList) {
                        if (ordDetalleDto.getNombre().equals("email")) {
                            newEmail = ordDetalleDto.getValorActual();
                            oldEmail = ordDetalleDto.getValorAnterior();
                        }
                        if (ordDetalleDto.getNombre().equals("celular")) {
                            celularActual = ordDetalleDto.getValorActual();
                            celularAnterior = ordDetalleDto.getValorAnterior();
                        }
                        if (ordDetalleDto.getNombre().equals("telefono")) {
                            telefonoActual = ordDetalleDto.getValorActual();
                            telefonoAnterior = ordDetalleDto.getValorAnterior();
                        }
                    }

                    cr = createOrdenInterna(input);
                    OrdOrden orden = cr.getOrdOrden();
                    SimpleDateFormat format = new SimpleDateFormat("ddMMyyyyHHmmss");
                    String pathTmpFile = CommonConstant.BASE_PATH_TMP + "ordenCorreccionTelefonoCorreo-" + format.format(calendar.getTime()) + ".txt";
                    //this.printOrdenCorreccionCorreoElectronico(orden.getId(), oldEmail, newEmail, pathTmpFile);
                    this.printOrdenCorreccionTelefonoCorreo(orden.getId(), celularAnterior, telefonoAnterior, celularActual, telefonoActual, oldEmail, newEmail, pathTmpFile);
                    //this.printOrdenCorreccionNroTelefono(orden.getId(), celularAnterior, telefonoAnterior, celularActual, telefonoActual, pathTmpFile);
                    cr.setBase64(Utils.getFileBase64(pathTmpFile));
                    cr.setOrdOrden(orden);
                    isAplicaOrdenInterna = this.applyCorreccionTelefonoCorreo(nucConsumidor, ordenDetalleDtoList, usuarioDto);
                    break;
                }
            }
            if (isAplicaOrdenInterna) {
                cr.setResult(CommonConstant.RESULT_SUCCESS);
                cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.SUCCESS);
            }

        } catch (Exception e) {
            //cr.setResult(CommonConstant.RESULT_ERROR);
            cr.setResultMessage(e.getMessage());
            e.printStackTrace();

        }
        return cr;

    }

    private boolean verificarOrdenHabilitada(String sectorCodigo) {
        boolean habilitado = false;
        if (!Arrays.stream(CommonConstant.ORDENFINDESEMANA.AREAS_VALIDA).anyMatch(sectorCodigo::equals)) {
            return true;
        }
        Calendar fechaActual = Calendar.getInstance();
        if (CommonConstant.ORDENFINDESEMANA.FERIADO && nucCalendarioFeriadoDao.getDiaFeriado(fechaActual.getTime()) > 0) {
            habilitado = true;
        } else {
            if (!CommonConstant.ORDENFINDESEMANA.DIAS[fechaActual.get(Calendar.DAY_OF_WEEK)][0].equals("")) {
                Calendar horaInicio = Calendar.getInstance();
                String[] inicio = CommonConstant.ORDENFINDESEMANA.DIAS[fechaActual.get(Calendar.DAY_OF_WEEK)][0].split(":");
                horaInicio.setTime(fechaActual.getTime());
                horaInicio.set(Calendar.HOUR_OF_DAY, Integer.parseInt(inicio[0]));
                horaInicio.set(Calendar.MINUTE, Integer.parseInt(inicio[1]));
                horaInicio.set(Calendar.SECOND, Integer.parseInt(inicio[2]));

                Calendar horaFin = Calendar.getInstance();
                String[] fin = CommonConstant.ORDENFINDESEMANA.DIAS[fechaActual.get(Calendar.DAY_OF_WEEK)][1].split(":");
                horaFin.setTime(fechaActual.getTime());
                horaFin.set(Calendar.HOUR_OF_DAY, Integer.parseInt(fin[0]));
                horaFin.set(Calendar.MINUTE, Integer.parseInt(fin[1]));
                horaFin.set(Calendar.SECOND, Integer.parseInt(fin[2]));

                if (fechaActual.getTime().compareTo(horaInicio.getTime()) >= 0
                        && fechaActual.getTime().compareTo(horaFin.getTime()) <= 0) {
                    habilitado = true;
                }
            }
        }
        return habilitado;
    }

    public Boolean generateOrdenDetalle(OrdOrden orden, String campo, String valorAnterior, String valorActual) {
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        Boolean isOrdenDetalle = false;
        try {
            OrdDetalle ordDetalle = new OrdDetalle();
            ordDetalle.setIdOrden(orden);
            ordDetalle.setCampo(campo);
            ordDetalle.setValorAnterior(valorAnterior);
            ordDetalle.setValorActual(valorActual);

            isOrdenDetalle = ordDetalleDao.create(ordDetalle);

        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return isOrdenDetalle;
    }

    public Boolean applyCorreccionDireccion(NucConsumidor nucConsumidor, List<OrdDetalleDto> ordenDetalleDtoList, UsuarioDto usuarioDto) {
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        Boolean isCorrigeDireccion = false;
        try {
            if (nucConsumidor != null) {
                NucConsumidor consumidor = nucConsumidorDao.findById(nucConsumidor.getId());

                for (OrdDetalleDto ordDetalleDto : ordenDetalleDtoList) {
                    if (ordDetalleDto.getNombre().equals("direccion")) {
                        consumidor.setDireccion(ordDetalleDto.getValorActual());
                    }
                    if (ordDetalleDto.getNombre().equals("NUMERO")) {
                        consumidor.setNumeroCasa(ordDetalleDto.getValorActual());
                    }
                    if (ordDetalleDto.getNombre().equals("NUMERODEPARTAMENTO")) {
                        consumidor.setNumeroDepartamento(ordDetalleDto.getValorActual());
                    }
                    if (ordDetalleDto.getNombre().equals("PISO")) {
                        consumidor.setPisoDepartamento(ordDetalleDto.getValorActual());
                    }

                }
                consumidor.setFechaActualizacion(calendar.getTime());
                consumidor.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                nucConsumidorDao.update(consumidor);
            }
            isCorrigeDireccion = true;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return isCorrigeDireccion;
    }

    public Boolean applyCorreccionNombre(NucConsumidor nucConsumidor, List<OrdDetalleDto> ordenDetalleDtoList, UsuarioDto usuarioDto) {
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        Boolean isCorrigeNombre = false;
        Boolean tieneRazonSocial = false;
        String nombre = "";
        String apPaterno = "";
        String apMaterno = "";
        try {

            if (nucConsumidor != null) {
                NucConsumidor consumidor = nucConsumidorDao.findById(nucConsumidor.getId());

                for (OrdDetalleDto ordDetalleDto : ordenDetalleDtoList) {
                    if (ordDetalleDto.getNombre().equals("RAZON_SOCIAL")) {
                        consumidor.setRazonSocial(ordDetalleDto.getValorActual());
                        if (ordDetalleDto.getValorActual() != null) {
                            tieneRazonSocial = true;
                        }
                    }
                    if (ordDetalleDto.getNombre().equals("nombre")) {
                        consumidor.setNombre(ordDetalleDto.getValorActual());
                        nombre = ordDetalleDto.getValorActual();
                    }
                    if (ordDetalleDto.getNombre().equals("APELLIDO_PATERNO")) {
                        consumidor.setApellidoPaterno(ordDetalleDto.getValorActual());
                        apPaterno = ordDetalleDto.getValorActual();
                    }
                    if (ordDetalleDto.getNombre().equals("APELLIDO_MATERNO")) {
                        consumidor.setApellidoMaterno(ordDetalleDto.getValorActual());
                        apMaterno = ordDetalleDto.getValorActual();
                    }
                }
                if (!tieneRazonSocial) {
                    consumidor.setRazonSocial(apPaterno + ' ' + apMaterno + ' ' + nombre);
                }

                consumidor.setFechaActualizacion(calendar.getTime());
                consumidor.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                nucConsumidorDao.update(consumidor);
                isCorrigeNombre = true;

            }
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return isCorrigeNombre;
    }

    public Boolean applyCorreccionTelefono(NucConsumidor nucConsumidor, List<OrdDetalleDto> ordenDetalleDtoList, UsuarioDto usuarioDto) {
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        Boolean isCorrigeTelefono = false;
        try {
            if (nucConsumidor != null) {
                NucConsumidor consumidor = nucConsumidorDao.findById(nucConsumidor.getId());

                for (OrdDetalleDto ordDetalleDto : ordenDetalleDtoList) {
                    if (ordDetalleDto.getNombre().equals("celular")) {
                        consumidor.setCelular(ordDetalleDto.getValorActual());
                    }

                    if (ordDetalleDto.getNombre().equals("TELEFONO")) {
                        consumidor.setTelefono(ordDetalleDto.getValorActual());
                    }
                }

                consumidor.setFechaActualizacion(calendar.getTime());
                consumidor.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                nucConsumidorDao.update(consumidor);
                isCorrigeTelefono = true;

            }
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return isCorrigeTelefono;
    }

    public Boolean applyCorreccionNroDocumentoNit(NucConsumidor nucConsumidor, List<OrdDetalleDto> ordenDetalleDtoList, UsuarioDto usuarioDto) {
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        Boolean isCorrigeTelefono = false;
        try {
            if (nucConsumidor != null) {
                NucConsumidor consumidor = nucConsumidorDao.findById(nucConsumidor.getId());
                // VERIFICA SI EL CONSUMIDOR ES VARIOS Y EXISTE DOS VECES PARA ACTUALIZAR A FALSE
                List<NucConsumidor> nucConsumidorList = nucConsumidorDao.getVariosServicio(consumidor.getNumeroDocumento(), consumidor.getRazonSocial(), 2, 2);
                nucConsumidorBean.applyVariosServiciosMasivo(nucConsumidorList, false, usuarioDto);

                for (OrdDetalleDto ordDetalleDto : ordenDetalleDtoList) {
                    if (ordDetalleDto.getNombre().equals("tipoDocumento")) {
                        if (ordDetalleDto.getValorActual() != null) {
                            NucTipoDocumento nucTipoDocumento = new NucTipoDocumento();
                            nucTipoDocumento.setId(Integer.parseInt(ordDetalleDto.getValorActual()));
                            consumidor.setIdTipoDocumento(nucTipoDocumento);
                        } else {
                            consumidor.setIdTipoDocumento(null);
                        }
                    }
                    if (ordDetalleDto.getNombre().equals("numeroDocumento")) {
                        consumidor.setNumeroDocumento(ordDetalleDto.getValorActual());
                        //VERIFICA SI TIENE MAS DE UN SERVICIO CON EL MISMO NRO DOCUMENTO
                        nucConsumidorList = nucConsumidorDao.getVariosServicio(ordDetalleDto.getValorActual(), consumidor.getRazonSocial(), 1, 999);
                        nucConsumidorBean.applyVariosServiciosMasivo(nucConsumidorList, true, usuarioDto);
                        if (nucConsumidorList != null) {
                            nucConsumidor.setVariosServicios(true);
                        } else {
                            nucConsumidor.setVariosServicios(false);
                        }
                    }
                    if (ordDetalleDto.getNombre().equals("complementoDocumento")) {
                        consumidor.setComplemento(ordDetalleDto.getValorActual());
                    }
                    if (ordDetalleDto.getNombre().equals("ciExpedido")) {
                        if (ordDetalleDto.getValorActual() != null) {
                            NucCiExpedido nucCiExpedido = new NucCiExpedido();
                            nucCiExpedido.setId(Integer.parseInt(ordDetalleDto.getValorActual()));
                            consumidor.setIdCiExpedido(nucCiExpedido);
                        } else {
                            consumidor.setIdCiExpedido(null);
                        }
                    }
                    if (ordDetalleDto.getNombre().equals("tipoDocumentoFactura")) {
                        if (ordDetalleDto.getValorActual() != null) {
                            NucDocumentosSivel nucDocumentosSivel = new NucDocumentosSivel();
                            nucDocumentosSivel.setId(Integer.parseInt(ordDetalleDto.getValorActual()));
                            consumidor.setIdTipoDocumentoFeel(nucDocumentosSivel);
                        } else {
                            consumidor.setIdTipoDocumentoFeel(null);
                        }
                    }
                    if (ordDetalleDto.getNombre().equals("nit")) {
                        consumidor.setNit(ordDetalleDto.getValorActual());
                    }
                }
                // Setear el campo codigo_excepcion de acuerdo a la verificación de existencia de NIT
                consumidor.setCodigoExcepcionFeel(1); // Iniciamos como si el NIT no xiste
                VerificarExistenciaNitDto verificarExistenciaNitDto = new VerificarExistenciaNitDto();
                verificarExistenciaNitDto.setNit(Long.parseLong(consumidor.getNit()));
                Map<String, Object> response = (Map<String, Object>) commonBean.verificarExistenciaNit(verificarExistenciaNitDto);
                if (response != null) {
                    Boolean transaccion = (Boolean) response.get("transaccion");
                    if (transaccion != null && transaccion) {
                        consumidor.setCodigoExcepcionFeel(0);
                    }
                }
                consumidor.setFechaActualizacion(calendar.getTime());
                consumidor.setUsuarioActualizacion(usuarioDto.getId_usuario_security());

                nucConsumidorDao.update(consumidor);
                isCorrigeTelefono = true;

            }
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return isCorrigeTelefono;
    }

    public Boolean applyCorreccionCorreoElectronico(NucConsumidor nucConsumidor, List<OrdDetalleDto> ordenDetalleDtoList, UsuarioDto usuarioDto) {
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        Boolean isCorrigeCorreoElectronico = false;
        try {
            if (nucConsumidor != null) {
                NucConsumidor consumidor = nucConsumidorDao.findById(nucConsumidor.getId());

                for (OrdDetalleDto ordDetalleDto : ordenDetalleDtoList) {
                    if (ordDetalleDto.getNombre().equals("email")) {
                        consumidor.setEmail(ordDetalleDto.getValorActual());
                    }
                }

                consumidor.setFechaActualizacion(calendar.getTime());
                consumidor.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                nucConsumidorDao.update(consumidor);
                isCorrigeCorreoElectronico = true;
            }
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return isCorrigeCorreoElectronico;
    }

    public Boolean applyCorreccionIne(NucConsumidor nucConsumidor, List<OrdDetalleDto> ordenDetalleDtoList, UsuarioDto usuarioDto) {
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        Boolean isCorrigeIne = false;
        try {
            if (nucConsumidor != null) {
                NucConsumidor consumidor = nucConsumidorDao.findById(nucConsumidor.getId());
                for (OrdDetalleDto ordDetalleDto : ordenDetalleDtoList) {
                    if (ordDetalleDto.getNombre().equals("codigoine")) {
                        NucLocalidad idlocal = nucLocalidadDao.findById(Integer.parseInt(ordDetalleDto.getValorActual()));
                        consumidor.setIdLocalidad(idlocal);
                    }
                }
                consumidor.setFechaActualizacion(calendar.getTime());
                consumidor.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                nucConsumidorDao.update(consumidor);
                isCorrigeIne = true;
            }
        } catch (Exception e) {
            System.out.println("error=" + e.getMessage());
            e.printStackTrace();
            return false;
        }
        return isCorrigeIne;
    }

    public Boolean applyCorreccionVoltaje(NucConsumidor nucConsumidor, SolSolicitud solSolicitud, List<OrdDetalleDto> ordenDetalleDtoList, UsuarioDto usuarioDto) {
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        Boolean result = false;
        NucVoltaje voltaje;
        SolSolicitud solicitud;
        SolServicio solServicio;
        SolDatosTecnicos solDatosTecnicos = null;
        NucConsumidor consumidor;
        try {
            if (nucConsumidor != null) {
                consumidor = nucConsumidorDao.findById(nucConsumidor.getId());
            } else {
                return false;
            }
            if (solSolicitud != null) {
                //solicitud = solSolicitudDao.findByCodigo(solSolicitud.getCodigo());
                solicitud = solSolicitudDao.findByNumeroSoliciudSistema(
                        solSolicitud.getCodigo(),
                        consumidor.getIdRuta().getIdRemesa().getIdArea().getIdSistema().getId());
                if (solicitud != null) {
                    solServicio = solServicioDao.findByIdSolicitud(solicitud.getId());
                    solDatosTecnicos = solDatosTecnicosDao.findByIdServicio(solServicio.getId());
                }
            }
            if (nucConsumidor != null) {
                //NucConsumidor consumidor = nucConsumidorDao.findById(nucConsumidor.getId());
                NucServicio servicio = nucServicioDao.findByIdConsumidor(consumidor.getId(), CommonConstant.NUCTIPOSERVICIO.ENERGIA);
                NucDatosTecnicos datosTecnicos = nucDatosTecnicosDao.findByIdServicio(servicio.getId());
                for (OrdDetalleDto ordDetalleDto : ordenDetalleDtoList) {

                    if (ordDetalleDto.getNombre().equals("voltajeAsignado")) {
                        voltaje = nucVoltajeDao.findById(Integer.parseInt(ordDetalleDto.getValorActual()));
                        datosTecnicos.setIdVoltajeAsignado(voltaje);
                        if (solDatosTecnicos != null) {
                            solDatosTecnicos.setIdVoltajeAsignado(voltaje);
                        }
                    }
                    if (ordDetalleDto.getNombre().equals("voltajeRed")) {
                        voltaje = nucVoltajeDao.findById(Integer.parseInt(ordDetalleDto.getValorActual()));
                        datosTecnicos.setIdVoltajeRed(voltaje);
                        if (solDatosTecnicos != null) {
                            solDatosTecnicos.setIdVoltajeRed(voltaje);
                        }
                    }
                    if (ordDetalleDto.getNombre().equals("fase1")) {
                        if (ordDetalleDto.getValorActual().equals("true")) {
                            datosTecnicos.setFase1(true);
                        } else if (ordDetalleDto.getValorActual().equals("false")) {
                            datosTecnicos.setFase1(false);
                        }
                    }
                    if (ordDetalleDto.getNombre().equals("fase2")) {
                        if (ordDetalleDto.getValorActual().equals("true")) {
                            datosTecnicos.setFase2(true);
                        } else if (ordDetalleDto.getValorActual().equals("false")) {
                            datosTecnicos.setFase2(false);
                        }
                    }
                    if (ordDetalleDto.getNombre().equals("fase3")) {
                        if (ordDetalleDto.getValorActual().equals("true")) {
                            datosTecnicos.setFase3(true);
                        } else if (ordDetalleDto.getValorActual().equals("false")) {
                            datosTecnicos.setFase3(false);
                        }
                    }
                    if (ordDetalleDto.getNombre().equals("fase4")) {
                        if (ordDetalleDto.getValorActual().equals("true")) {
                            datosTecnicos.setFase4(true);
                        } else if (ordDetalleDto.getValorActual().equals("false")) {
                            datosTecnicos.setFase4(false);
                        }
                    }
                }
                consumidor.setFechaActualizacion(calendar.getTime());
                consumidor.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                nucDatosTecnicosDao.update(datosTecnicos);
                if (solDatosTecnicos != null) {
                    solDatosTecnicosDao.update(solDatosTecnicos);
                }
                result = true;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return result;
    }

    public Boolean applyCambioDepositoGarantia(NucConsumidor nucConsumidor, SolSolicitud solSolicitud, List<OrdDetalleDto> ordenDetalleDtoList, UsuarioDto usuarioDto) {
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        Boolean result = false;
        return result;
    }

    public Boolean applyCambioNombreSolicitud(NucConsumidor nucConsumidor, SolSolicitud solSolicitud, List<OrdDetalleDto> ordenDetalleDtoList, UsuarioDto usuarioDto) {
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        Boolean result = false;
        long diasTranscurridos = 0;
        NucConsumidorContrato nucContrato;
        String razonSocial = "";
        String nit = "";
        try {
            if (nucConsumidor != null) {
                //check if is changable                
                NucConsumidor consumidor = nucConsumidorDao.findById(nucConsumidor.getId());
                consumidor.getNucConsumidorContratoList();
                NucConsumidorContrato contrato = consumidor
                        .getNucConsumidorContratoList()
                        .stream()
                        .filter(c -> c.getActivo())
                        .findFirst()
                        .orElse(null);
                //nucContrato = nucConsumidorContratoDao.
                SolSolicitud solicitud = solSolicitudDao.findById(solSolicitud.getId());
                SolServicio servicio = solServicioDao.findByIdSolicitud(solicitud.getId());
                //soliocitud = null;
                if (contrato != null) {
                    diasTranscurridos = calendar.getTime().getTime() - contrato.getFechaRegistro().getTime();
                }
                if (diasTranscurridos != 0 && TimeUnit.DAYS.convert(diasTranscurridos, TimeUnit.MILLISECONDS) > 7) {
                    //cr.setResult(CommonMessage.GLOBAL.WARNING.WARNING.);
                    cr.setResultMessage(CommonMessage.ORDORDEN.WARNING.CORRECCION_NOMBRE_SOLICITUD);
                    result = false;
                } else {
                    if (solicitud.getIdEstado().getCodigo() == et.com.ejb.atc.data.CommonConstant.SOLESTADO.SOL_PENDIENTE_APLICAC_SIS && solicitud.getIdTipoSolicitud().getCodigo() == CommonConstant.SOLTIPOSOLICITUD.CAMBIO_NOMBRE) {
                        for (OrdDetalleDto ordDetalleDto : ordenDetalleDtoList) {
                            if (ordDetalleDto.getNombre().equals("RAZON_SOCIAL")) {
                                solicitud.setRazonSocial(ordDetalleDto.getValorActual());
                                razonSocial = ordDetalleDto.getValorAnterior();
                            }
                            if (ordDetalleDto.getNombre().equals("nombre")) {
                                solicitud.setNombres(ordDetalleDto.getValorActual());
                            }
                            if (ordDetalleDto.getNombre().equals("APELLIDO_PATERNO")) {
                                solicitud.setApellidoPaterno(ordDetalleDto.getValorActual());
                            }
                            if (ordDetalleDto.getNombre().equals("APELLIDO_MATERNO")) {
                                solicitud.setApellidoMaterno(ordDetalleDto.getValorActual());
                            }
                            if (ordDetalleDto.getNombre().equals("NIT")) {
                                solicitud.setNit(ordDetalleDto.getValorActual());
                                nit = ordDetalleDto.getValorAnterior();
                            }
                            if (ordDetalleDto.getNombre().equals("NUMERO_DOCUMENTO")) {
                                solicitud.setNumeroDocumento(ordDetalleDto.getValorActual());
                            }
                            if (ordDetalleDto.getNombre().equals("DIRECCION")) {
                                servicio.setDireccion(ordDetalleDto.getValorActual());
                            }
                        }
                        if (!consumidor.getJuridico()) {
                            solicitud.setRazonSocial(consumidor.getRazonSocial());
                        }
                        solServicioDao.update(servicio);
                        solSolicitudDao.update(solicitud);
                    } else {
                        for (OrdDetalleDto ordDetalleDto : ordenDetalleDtoList) {
                            if (ordDetalleDto.getNombre().equals("RAZON_SOCIAL")) {
                                consumidor.setRazonSocial(ordDetalleDto.getValorActual());
                                solicitud.setRazonSocial(ordDetalleDto.getValorActual());
                                razonSocial = ordDetalleDto.getValorAnterior();
                            }
                            if (ordDetalleDto.getNombre().equals("nombre")) {
                                consumidor.setNombre(ordDetalleDto.getValorActual());
                                solicitud.setNombres(ordDetalleDto.getValorActual());
                            }
                            if (ordDetalleDto.getNombre().equals("APELLIDO_PATERNO")) {
                                consumidor.setApellidoPaterno(ordDetalleDto.getValorActual());
                                solicitud.setApellidoPaterno(ordDetalleDto.getValorActual());
                            }
                            if (ordDetalleDto.getNombre().equals("APELLIDO_MATERNO")) {
                                consumidor.setApellidoMaterno(ordDetalleDto.getValorActual());
                                solicitud.setApellidoMaterno(ordDetalleDto.getValorActual());
                            }
                            if (ordDetalleDto.getNombre().equals("NIT")) {
                                consumidor.setNit(ordDetalleDto.getValorActual());
                                solicitud.setNit(ordDetalleDto.getValorActual());
                                nit = ordDetalleDto.getValorAnterior();
                            }
                            if (ordDetalleDto.getNombre().equals("NUMERO_DOCUMENTO")) {
                                consumidor.setNumeroDocumento(ordDetalleDto.getValorActual());
                                solicitud.setNumeroDocumento(ordDetalleDto.getValorActual());
                            }
                            if (ordDetalleDto.getNombre().equals("DIRECCION")) {
                                consumidor.setDireccion(ordDetalleDto.getValorActual());
                                servicio.setDireccion(ordDetalleDto.getValorActual());
                            }
                        }
                        if (!consumidor.getJuridico()) {
                            consumidor.setRazonSocial(consumidor.getApellidoPaterno() + ' ' + consumidor.getApellidoMaterno() + ' ' + consumidor.getNombre());
                            solicitud.setRazonSocial(consumidor.getRazonSocial());
                        }
                        consumidor.setFechaActualizacion(calendar.getTime());
                        consumidor.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                        nucConsumidorDao.update(consumidor);

                        solServicioDao.update(servicio);
                        List<NucDepositoGarantia> nucDepositoGarantiaList = nucDepositoGarantiaDao.findByConsumidor(razonSocial, nit);
                        if (nucDepositoGarantiaList != null) {
                            nucDepositoGarantiaList.get(0).setRazonSocial(consumidor.getRazonSocial());
                            nucDepositoGarantiaList.get(0).setNit(consumidor.getNit());
                        }
                    }
                    result = true;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return result;
    }

    public Boolean applyAltaBajaCondicionConsumidor(NucConsumidor consumidor, List<OrdDetalleDto> ordenDetalleDtoList, UsuarioDto usuarioDto) {
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        Boolean isCondicionConsumidor = false;
        try {

            Boolean isEstadoOrden = false;

            Boolean isOrdDetalle = false;
            if (ordenDetalleDtoList != null) {
                List<NucConsCon> oldNucConsConList = nucConsConDao.findByIdConsumidor(consumidor.getId());
                for (NucConsCon oldNucConsCon : oldNucConsConList) {

                    oldNucConsCon.setActivo(false);
                    oldNucConsCon.setFechaFin(calendar.getTime());
                    oldNucConsCon.setFechaActualizacion(calendar.getTime());
                    oldNucConsCon.setUsuarioRegistro(usuarioDto.getId_usuario_security());
                    oldNucConsCon.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                    nucConsConDao.update(oldNucConsCon);

                }
                isCondicionConsumidor = true;
                for (OrdDetalleDto ordDetalleDto : ordenDetalleDtoList) {
                    if (ordDetalleDto.getValorActual() != null) {
                        String[] codigoCondiciones = ordDetalleDto.getValorActual().split(",");
//                    for (String condicion : codigoCondiciones) {
//                        if (!condicion.equals("")) {
//                            NucConsCon oldNucConsCon = nucConsConDao.findByConsumidorCondicion(consumidor.getId(), new Integer(condicion));
//                            if (oldNucConsCon == null) {
//                                NucConsumidorCondicion newNucConsumidorCondicion = nucConsumidorCondicionDao.findByCodigo(new Integer(condicion));
//                                NucConsCon nucConsCon = new NucConsCon();
//                                nucConsCon.setIdConsumidor(consumidor);
//                                nucConsCon.setIdConsumidorCondicion(newNucConsumidorCondicion);
//                                nucConsCon.setFechaInicio(calendar.getTime());
//                                nucConsCon.setActivo(true);
//                                nucConsCon.setFechaRegistro(calendar.getTime());
//                                nucConsCon.setFechaActualizacion(calendar.getTime());
//                                nucConsCon.setUsuarioRegistro(usuarioDto.getId_usuario_security());
//                                nucConsCon.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
//                                nucConsConDao.create(nucConsCon);
//                            }
//                        }
//                    }
//                    List<NucConsCon> oldNucConsConList = nucConsConDao.findByIdConsumidor(consumidor.getId());
//                    for (NucConsCon oldNucConsCon : oldNucConsConList) {
//                        Boolean isExiste = false;
//                        for (String condicion : codigoCondiciones) {
//                            if (!condicion.equals("")) {
//                                NucConsumidorCondicion newNucConsumidorCondicion = nucConsumidorCondicionDao.findByCodigo(new Integer(condicion));
//                                if (oldNucConsCon.getIdConsumidorCondicion().getCodigo() == newNucConsumidorCondicion.getCodigo()) {
//                                    isExiste = true;
//                                }
//                            }
//                        }
//                        if (!isExiste) {
//                            oldNucConsCon.setActivo(false);
//                            oldNucConsCon.setFechaFin(calendar.getTime());
//                            oldNucConsCon.setFechaActualizacion(calendar.getTime());
//                            oldNucConsCon.setUsuarioRegistro(usuarioDto.getId_usuario_security());
//                            oldNucConsCon.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
//                            nucConsConDao.update(oldNucConsCon);
//                        }
//                    }

                        for (String condicion : codigoCondiciones) {
                            if (!condicion.equals("")) {
                                NucConsCon oldNucConsCon = nucConsConDao.findByConsumidorCondicion(consumidor.getId(), new Integer(condicion));
                                if (oldNucConsCon == null) {
                                    NucConsumidorCondicion newNucConsumidorCondicion = nucConsumidorCondicionDao.findByCodigo(new Integer(condicion));
                                    NucConsCon nucConsCon = new NucConsCon();
                                    nucConsCon.setIdConsumidor(consumidor);
                                    nucConsCon.setIdConsumidorCondicion(newNucConsumidorCondicion);
                                    nucConsCon.setFechaInicio(calendar.getTime());
                                    nucConsCon.setActivo(true);
                                    nucConsCon.setFechaRegistro(calendar.getTime());
                                    nucConsCon.setFechaActualizacion(calendar.getTime());
                                    nucConsCon.setUsuarioRegistro(usuarioDto.getId_usuario_security());
                                    nucConsCon.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                                    nucConsConDao.create(nucConsCon);
                                }
                            }
                        }
                        isCondicionConsumidor = true;
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return isCondicionConsumidor;
    }

    public Boolean applyAltaBajaCartaFactura(NucConsumidor consumidor, List<OrdDetalleDto> ordenDetalleDtoList, UsuarioDto usuarioDto) {
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        Boolean isCartaFactura = false;
        try {

            for (OrdDetalleDto ordDetalleDto : ordenDetalleDtoList) {
                if (ordDetalleDto.getNombre().equals("codigo_carta_factura")) {
                    if (ordDetalleDto.getValorActual() == null) {
                        consumidor.setIdCartaFactura(null);
                        consumidor.setFechaActualizacion(calendar.getTime());
                        consumidor.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                        nucConsumidorDao.update(consumidor);

                    } else {
                        NucCartaFactura nucCartaFactura = nucCartaFacturaDao.findByCodigo(new Integer(ordDetalleDto.getValorActual()));
                        if (nucCartaFactura != null) {
                            consumidor.setIdCartaFactura(nucCartaFactura);
                            consumidor.setFechaActualizacion(calendar.getTime());
                            consumidor.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                            nucConsumidorDao.update(consumidor);
                        }
                    }

                }
                isCartaFactura = true;

            }

        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return isCartaFactura;
    }

    public Boolean applyAltaBajaTasaAseo(NucConsumidor consumidor, NucServicio nucServicio) {
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        Boolean isRutacritica = false;
        try {

            NucServicio servicio = nucServicioDao.findById(nucServicio.getId());
            if (servicio != null) {
                nucServicio.setIdEstado(nucServicio.getIdEstado());
                nucServicio.setFechaActualizacion(calendar.getTime());
                nucServicio.setUsuarioActualizacion(1);
                nucServicioDao.update(servicio);

            } else {
                NucServicio newServicio = new NucServicio();
                //Ver como el servicio nuevo
            }
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return isRutacritica;
    }

    public Boolean applyCambioTarifa(NucConsumidor consumidor, List<OrdDetalleDto> ordenDetalleDtoList, UsuarioDto usuarioDto) {
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        Boolean isCorrigeCategoria = false;
        try {

            if (consumidor != null) {
                //incluir validacion de punto de medida

                NucServicio servicio = nucServicioDao.findByIdConsumidor(consumidor.getId(), CommonConstant.NUCTIPOSERVICIO.ENERGIA);
                NucServicio servicioTAS = nucServicioDao.findByIdConsumidor(consumidor.getId(), CommonConstant.NUCTIPOSERVICIO.TAS);
                NucDatosTecnicos datosTecnicos = nucDatosTecnicosDao.findByIdServicio(servicio.getId());

                Boolean isRutaCritica = this.validaRutaCritica(consumidor.getIdRuta().getIdRemesa().getId());
                if (!isRutaCritica) {
                    for (OrdDetalleDto ordDetalleDto : ordenDetalleDtoList) {
                        if (ordDetalleDto.getNombre().equals("ACTIVIDAD_ECONOMICA")) {
                            NucActividadEconomica nucActividadEconomica = nucActividadEconomicaDao.findByCodigo(ordDetalleDto.getValorActual().toString());
                            consumidor.setIdActividadEconomica(nucActividadEconomica);
                            consumidor.setFechaActualizacion(calendar.getTime());
                            consumidor.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                            nucConsumidorDao.update(consumidor);

                        }
                        if (ordDetalleDto.getNombre().equals("codigo_categoria")) {
                            NucCategoria nucCategoria = nucCategoriaDao.finByCodigo(new Integer(ordDetalleDto.getValorActual()));
                            servicio.setIdCategoria(nucCategoria);
                            servicio.setFechaActualizacion(calendar.getTime());
                            servicio.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                            nucServicioDao.update(servicio);

                            //Verifica si el tipo de categoria es domiciliaria para continuar con el beneficio de la ley 1886
                            if (nucCategoria.getIdTipoCategoria().getId().compareTo(et.com.ejb.atc.data.CommonConstant.NUCTIPOCATEGORIA.DOMICILIARIO) != 0) {
                                leyHistorialBean.darBajaBeneficioDesdeSolicitud(consumidor.getId(), et.com.ejb.ley.data.CommonConstant.CodigoMotivoBajaLey1886.CAMBIOCATEGORIA, "", usuarioDto.getId_usuario_security(), usuarioDto.getId_agencia());
                            }

//                            //VERIFICA CANTIDAD DE VARIOS SERVICIOS
//                            this.validaVariosServicios(consumidor, nucCategoria);
                        }
                        if (ordDetalleDto.getNombre().equals("CODIGO_PUNTO_SUMINISTRO")) {
                            NucNivelTension nucNivelTension = nucNivelTensionDao.findByCodigo(new Integer(ordDetalleDto.getValorActual()));
                            datosTecnicos.setIdPuntoSuministro(nucNivelTension);
                            nucDatosTecnicosDao.update(datosTecnicos);
                        }

                        if (ordDetalleDto.getNombre().equals("CODIGO_PUNTO_MEDIDA")) {
                            NucNivelTension nucNivelTension = nucNivelTensionDao.findByCodigo(new Integer(ordDetalleDto.getValorActual()));
                            datosTecnicos.setIdPuntoMedida(nucNivelTension);
                            nucDatosTecnicosDao.update(datosTecnicos);
                        }
                        isCorrigeCategoria = true;
                    }

                    Boolean isCotizaTAS = this.verificaCotizaTAS(consumidor.getIdRuta());
                    if (isCotizaTAS && ordenDetalleDtoList.size() > 0) {
                        NucAsignaAseo nucAsignaAseo = nucAsignaAseoDao.findByAreaCategoria(consumidor.getIdRuta().getIdRemesa().getIdArea().getId(), servicio.getIdCategoria().getId());
                        NucEstado nucEstadoConectado = nucEstadoDao.findByCodigo(CommonConstant.NUCESTADOS.CONECTADO);
                        if (servicioTAS != null) {

                            servicioTAS.setIdConsumidor(consumidor);
                            servicioTAS.setIdCategoria(nucAsignaAseo.getIdCategoriaAseo());
                            servicioTAS.setIdEstado(nucEstadoConectado);
                            servicioTAS.setFechaEstado(calendar.getTime());
                            servicioTAS.setFechaActualizacion(calendar.getTime());
                            servicioTAS.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                            nucServicioDao.update(servicioTAS);
                        } else {
                            NucServicio nucServicioTAS = new NucServicio();
                            nucServicioTAS.setIdConsumidor(consumidor);
                            nucServicioTAS.setIdCategoria(nucAsignaAseo.getIdCategoriaAseo());
                            nucServicioTAS.setIdEstado(nucEstadoConectado);
                            nucServicioTAS.setFechaEstado(calendar.getTime());
                            nucServicioTAS.setFechaRegistro(calendar.getTime());
                            nucServicioTAS.setFechaActualizacion(calendar.getTime());
                            nucServicioTAS.setUsuarioRegistro(usuarioDto.getId_usuario_security());
                            nucServicioTAS.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                            nucServicioDao.create(nucServicioTAS);
                        }

                    }

                } else {
                    cr.setResultMessage(CommonMessage.ORDORDEN.WARNING.ORDEN_INTERNA_RUTA_CRITICA);
                    cr.setResult(CommonConstant.RESULT_WARNING);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return isCorrigeCategoria;
    }

    public Boolean applyBajaServicio(NucConsumidor consumidor) {
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        Boolean isBajaServicio = false;
        try {
            NucServicio nucServicioEnergia = nucServicioDao.findByIdConsumidor(consumidor.getId(), CommonConstant.NUCTIPOSERVICIO.TAS);
            NucServicio nucServicioTAP = nucServicioDao.findByIdConsumidor(consumidor.getId(), CommonConstant.NUCTIPOSERVICIO.TAS);
            NucServicio nucServicioTAS = nucServicioDao.findByIdConsumidor(consumidor.getId(), CommonConstant.NUCTIPOSERVICIO.TAS);
            NucEstado nucEstado = nucEstadoDao.findById(CommonConstant.NUCESTADOS.BAJA);

            Boolean isRutaCritica = this.validaRutaCritica(consumidor.getIdRuta().getIdRemesa().getId());
            if (!isRutaCritica) {
                nucServicioEnergia.setIdEstado(nucEstado);
                nucServicioEnergia.setFechaActualizacion(calendar.getTime());
                nucServicioEnergia.setUsuarioActualizacion(1);
                nucServicioDao.update(nucServicioEnergia);

                if (nucServicioTAP != null) {
                    nucServicioTAP.setIdEstado(nucEstado);
                    nucServicioTAP.setFechaActualizacion(calendar.getTime());
                    nucServicioTAP.setUsuarioActualizacion(1);
                    nucServicioDao.update(nucServicioTAP);
                }
                if (nucServicioTAS != null) {
                    nucServicioTAS.setIdEstado(nucEstado);
                    nucServicioTAS.setFechaActualizacion(calendar.getTime());
                    nucServicioTAS.setUsuarioActualizacion(1);
                    nucServicioDao.update(nucServicioTAS);
                }

                isBajaServicio = true;
            }
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return isBajaServicio;
    }

    public Boolean applyRestitucionSuspendido(NucConsumidor consumidor) {
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        Boolean isBajaServicio = false;
        try {
            NucServicio nucServicioEnergia = nucServicioDao.findByIdConsumidor(consumidor.getId(), CommonConstant.NUCTIPOSERVICIO.TAS);
            NucServicio nucServicioTAP = nucServicioDao.findByIdConsumidor(consumidor.getId(), CommonConstant.NUCTIPOSERVICIO.TAS);
            NucServicio nucServicioTAS = nucServicioDao.findByIdConsumidor(consumidor.getId(), CommonConstant.NUCTIPOSERVICIO.TAS);
            NucEstado nucEstado = nucEstadoDao.findById(CommonConstant.NUCESTADOS.BAJA);

            Boolean isRutaCritica = this.validaRutaCritica(consumidor.getIdRuta().getIdRemesa().getId());
            if (!isRutaCritica) {
                nucServicioEnergia.setIdEstado(nucEstado);
                nucServicioEnergia.setFechaActualizacion(calendar.getTime());
                nucServicioEnergia.setUsuarioActualizacion(1);
                nucServicioDao.update(nucServicioEnergia);

                if (nucServicioTAP != null) {
                    nucServicioTAP.setIdEstado(nucEstado);
                    nucServicioTAP.setFechaActualizacion(calendar.getTime());
                    nucServicioTAP.setUsuarioActualizacion(1);
                    nucServicioDao.update(nucServicioTAP);
                }
                if (nucServicioTAS != null) {
                    nucServicioTAS.setIdEstado(nucEstado);
                    nucServicioTAS.setFechaActualizacion(calendar.getTime());
                    nucServicioTAS.setUsuarioActualizacion(1);
                    nucServicioDao.update(nucServicioTAS);
                }

                isBajaServicio = true;
            }
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return isBajaServicio;
    }

    public Boolean applyModificaDatosTransformador(NucConsumidor consumidor, List<LecConsumidorPerdidasTrafo> lecConsumidorPerdidasTrafoList) {
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        Boolean isModTransformador = false;
        try {
            Boolean isRutaCritica = this.validaRutaCritica(consumidor.getIdRuta().getIdRemesa().getId());

            if (lecConsumidorPerdidasTrafoList != null && !lecConsumidorPerdidasTrafoList.isEmpty()) {

                for (LecConsumidorPerdidasTrafo updateLecConsumidorPerdidasTrafo : lecConsumidorPerdidasTrafoList) {
                    if (!isRutaCritica) {
                        LecConsumidorPerdidasTrafo lecConsumidorPerdidasTrafo = lecConsumidorPerdidasTrafoDao.findById(updateLecConsumidorPerdidasTrafo.getId());
                        if (lecConsumidorPerdidasTrafo != null) {
                            lecConsumidorPerdidasTrafo.setEstado(1);
                            lecConsumidorPerdidasTrafo.setFechaActualizacion(calendar.getTime());
                            lecConsumidorPerdidasTrafo.setUsuarioActualizacion(1);
                            Utils.merge(lecConsumidorPerdidasTrafo, updateLecConsumidorPerdidasTrafo);
                        } else {
                            LecConsumidorPerdidasTrafo newLecConsumidorPerdidasTrafo = new LecConsumidorPerdidasTrafo();
                            newLecConsumidorPerdidasTrafo.setIdConsumidor(consumidor);
                            newLecConsumidorPerdidasTrafo.setTrafoNro(updateLecConsumidorPerdidasTrafo.getTrafoNro());
                            newLecConsumidorPerdidasTrafo.setTrafoFechaAlta(calendar.getTime());
                            newLecConsumidorPerdidasTrafo.setTrafoCapacidad(updateLecConsumidorPerdidasTrafo.getTrafoCapacidad());
                            newLecConsumidorPerdidasTrafo.setTrafoPropiedad(updateLecConsumidorPerdidasTrafo.getTrafoPropiedad());
                            newLecConsumidorPerdidasTrafo.setFechaRegistro(calendar.getTime());
                            newLecConsumidorPerdidasTrafo.setUsuarioRegistro(1);
                            lecConsumidorPerdidasTrafoDao.create(lecConsumidorPerdidasTrafo);
                        }
                        isModTransformador = true;
                    }

                }

            }
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return isModTransformador;
    }

    public Boolean applyKWHDiasDirecto(NucConsumidor consumidor, OrdKwhDiasDirectoDto ordKwhDiasDirectoDto) {
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        Boolean isKwhDiasDirecto = false;
        try {

            Boolean isRutaCritica = this.validaRutaCritica(consumidor.getIdRuta().getIdRemesa().getId());
            if (!isRutaCritica) {
                if (ordKwhDiasDirectoDto != null) {

                    //falta guardar el consumo adicional
                    isKwhDiasDirecto = true;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return isKwhDiasDirecto;
    }

    public Boolean applyModificacionKWHDirecto(NucConsumidor consumidor, NucDatosTecnicos nucDatosTecnicos) {
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        Boolean isKwhDirecto = false;
        try {
            Boolean isRutaCritica = this.validaRutaCritica(consumidor.getIdRuta().getIdRemesa().getId());
            if (!isRutaCritica) {
                if (nucDatosTecnicos != null) {
                    NucDatosTecnicos datosTecnicos = nucDatosTecnicosDao.findById(nucDatosTecnicos.getId());
                    datosTecnicos.setKvaLibre(nucDatosTecnicos.getKvaLibre());
                    nucDatosTecnicosDao.update(datosTecnicos);

                    isKwhDirecto = true;
                }
            } else {
                throw new Exception(et.com.ejb.ord.data.CommonMessage.GLOBAL.ERROR.EMPTY_INPUT);
            }
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return isKwhDirecto;
    }

    public Boolean applyCambioMultiplicador(NucConsumidor consumidor, MedMedidor medMedidor) {
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        Boolean isKwhDirecto = false;
        try {
            Boolean isRutaCritica = this.validaRutaCritica(consumidor.getIdRuta().getIdRemesa().getId());
            if (!isRutaCritica) {
                if (medMedidor != null) {
                    MedMedidor medidor = medMedidorDao.findById(medMedidor.getId());

                    isKwhDirecto = true;
                }
            } else {
                throw new Exception(et.com.ejb.ord.data.CommonMessage.GLOBAL.ERROR.EMPTY_INPUT);
            }
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return isKwhDirecto;
    }

    public CommonResponse createOrdenInterna(CommonInput input) {
        cr = new CommonResponse();
        NucConsumidor nucConsumidor = input.getNucConsumidor();
        OrdTipoOrden ordTipoOrden = input.getOrdTipoOrden();
        List<OrdDetalleDto> ordenDetalleDtoList = input.getOrdDetalleDtoList();
        OrdOrden ordenObservacion = input.getOrdOrden();
        UsuarioDto usuarioDto = input.getUsuarioDto();
        /*UsuarioDto usuarioDto=new UsuarioDto();
        usuarioDto.setId_agencia(1);
        usuarioDto.setId_sector(1);
        usuarioDto.setId_usuario_security(1);*/
        Boolean isSaveOrden = false;
        OrdOrden orden = new OrdOrden();
        NucServicioMedidor nucServicioMedidor = new NucServicioMedidor();
        NucLecturaMedidor nucLecturaMedidor = new NucLecturaMedidor();
        NucVoltaje nucVoltaje;
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        try {
            if (nucConsumidor != null && ordTipoOrden != null) {
                if (ordenObservacion == null) {
                    cr.setResult(GlobalConstant.RESULT_WARNING);
                    cr.setResultMessage(String.format(CommonMessage.ORDORDEN.WARNING.OBSSERVACION_VACIA));
                    return cr;
                }
                NucConsumidor consumidor = nucConsumidorDao.findById(nucConsumidor.getId());
                OrdTipoOrden tipoOrden = new OrdTipoOrden();
                if (ordTipoOrden.getCodigo() != null) {
                    tipoOrden = ordTipoOrdenDao.findByCodigo(ordTipoOrden.getCodigo());
                } else {
                    tipoOrden = ordTipoOrdenDao.findById(ordTipoOrden.getId());
                }
                NucServicio nucServicio = nucServicioDao.findByIdConsumidor(consumidor.getId(), CommonConstant.NUCTIPOSERVICIO.ENERGIA);
                NucDatosTecnicos nucDatosTecnicos = nucDatosTecnicosDao.findByIdServicio(nucServicio.getId());
                if (nucDatosTecnicos.getIdSistemaMedicion().getCodigo() != CommonConstant.NUCSISTEMAMEDICION.DIRECTA_SIN_MEDIDOR) {

                    nucServicioMedidor = nucServicioMedidorDao.findByMedidorConectado(nucServicio.getId());
                    if (nucServicioMedidor != null) {
                        nucLecturaMedidor = nucLecturaMedidorDao.findByServicioMedidor(nucServicioMedidor.getId());
                    }
                }
                RedTecnicaConsumidor redTecnicaConsumidor = redTecnicaConsumidorDao.findByIdConsumidor(consumidor.getId());
                orden.setCodigo(Utils.getNextNumber(em, OrdOrden.class, "codigo"));
                orden.setIdTipoOrden(tipoOrden);
                orden.setIdConsumidor(consumidor);
                orden.setIdEstado(ordEstadoDao.findByCodigoEstado(CommonConstant.ORDESTADO.CUMPLIDA));

                NucSector nucSector = nucSectorDao.findById(usuarioDto.getId_sector());
                NucAgencia nucAgencia = nucAgenciaDao.findById(usuarioDto.getId_agencia());
                orden.setIdSectorOrigen(nucSector);
                orden.setIdSectorDestino(nucSector);

                if (redTecnicaConsumidor != null) {
                    orden.setIdPuesto(redTecnicaConsumidor.getIdRedPuesto());
                    orden.setIdPoste(redTecnicaConsumidor.getIdRedPoste());
                }
                orden.setIdRuta(consumidor.getIdRuta()); //falta la relacion
                orden.setIdVoltaje(nucDatosTecnicos.getIdVoltajeAsignado());
                orden.setIdNivelCalidad(nucServicio.getIdNivelCalidad());
                orden.setRazonSocial(nucConsumidor.getRazonSocial());
                orden.setIdCategoria(nucServicio.getIdCategoria());
                orden.setObservacion(ordenObservacion.getObservacion());
                orden.setFechaCumplimiento(calendar.getTime());
                orden.setFechaRegistro(calendar.getTime());
                orden.setFechaActualizacion(calendar.getTime());
                orden.setUsuarioRegistro(usuarioDto.getId_usuario_security());
                orden.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                if (nucAgencia != null) {
                    orden.setIdAgencia(nucAgencia);
                }
                if (tipoOrden.getCodigo() == CommonConstant.ORDTIPOORDEN.CAMBIO_MEDIDOR || tipoOrden.getRetiraMedidor()) {
                    //Recupera medidor anterior para la orden de cambio de medidor
                    orden.setIdMedidorDesconexion(nucServicioMedidor.getIdMedidor());
                    orden.setIndDesconexion(nucLecturaMedidor.getIndiceUltimo());
                }
                isSaveOrden = ordOrdenDao.create(orden);

                Boolean isEstadoOrden = false;
                Boolean isRutaCritica = this.validaRutaCritica(orden.getIdConsumidor().getIdRuta().getIdRemesa().getId());
                if (isRutaCritica && this.tipoOrdenRutaCritica(tipoOrden)) {
                    isEstadoOrden = ordOrdenEstadosBean.updateEstadoOrden(orden, CommonConstant.ORDESTADO.PENDIENTE_APLICACION_SISTEMA);
                } else {
                    isEstadoOrden = ordOrdenEstadosBean.updateEstadoOrden(orden, CommonConstant.ORDESTADO.CUMPLIDA);
                }

                //Detalle de orden de servicio
                Boolean isOrdDetalle = false;
                if (ordenDetalleDtoList != null) {
                    for (OrdDetalleDto ordDetalleDto : ordenDetalleDtoList) {
                        if (tipoOrden.getCodigo() == CommonConstant.ORDTIPOORDEN.CAMBIO_VOLTAJE) {
                            if (ordDetalleDto.getNombre().equals("fase1") || ordDetalleDto.getNombre().equals("fase2") || ordDetalleDto.getNombre().equals("fase3") || ordDetalleDto.getNombre().equals("fase4")) {
                                isOrdDetalle = generateOrdenDetalle(orden, ordDetalleDto.getNombre(), ordDetalleDto.getValorAnterior(), ordDetalleDto.getValorActual());
                            } else {
                                nucVoltaje = nucVoltajeDao.findById(Integer.parseInt(ordDetalleDto.getValorActual()));
                                isOrdDetalle = generateOrdenDetalle(orden, ordDetalleDto.getNombre(), ordDetalleDto.getValorAnterior(), nucVoltaje.getDescripcion());
                            }
                        } else {
                            isOrdDetalle = generateOrdenDetalle(orden, ordDetalleDto.getNombre(), ordDetalleDto.getValorAnterior(), ordDetalleDto.getValorActual());
                        }
                    }
                }
                if (isSaveOrden && isEstadoOrden) {
                    cr.setOrdOrden(orden);
                    cr.setResult(GlobalConstant.RESULT_SUCCESS);
                    cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.SUCCESS);
                } else {
                    cr.setResult(GlobalConstant.RESULT_ERROR);
                    cr.setResultMessage(CommonMessage.GLOBAL.ERROR.ERROR);
                }
            } else {
                cr.setResultMessage(CommonMessage.GLOBAL.ERROR.EMPTY_INPUT);
            }

        } catch (Exception e) {
            cr.setResult(GlobalConstant.RESULT_ERROR);
            cr.setResultMessage(CommonMessage.GLOBAL.ERROR.ERROR);
            e.printStackTrace();
        }
        return cr;
    }

    /**
     * Retorna si el tipo de orden es validado por ruta crítica
     *
     * @param tipoOrden
     * @return
     */
    private Boolean tipoOrdenRutaCritica(OrdTipoOrden tipoOrden) {
        return tipoOrden.getCodigo() != CommonConstant.ORDTIPOORDEN.CAMBIO_ESTADO_SUSPENDIDO_BAJA
                && tipoOrden.getCodigo() != CommonConstant.ORDTIPOORDEN.DEVOLUCION_DEPOSITO_GARANTIA
                && tipoOrden.getCodigo() != CommonConstant.ORDTIPOORDEN.CAMBIO_NOMBRE_SOLICITUD
                && tipoOrden.getCodigo() != CommonConstant.ORDTIPOORDEN.CAMBIO_ESTADO_CONSUMIDOR
                && tipoOrden.getCodigo() != CommonConstant.ORDTIPOORDEN.CAMBIO_VOLTAJE
                && tipoOrden.getCodigo() != CommonConstant.ORDTIPOORDEN.BAJA_DE_SERVICIO
                && tipoOrden.getCodigo() != CommonConstant.ORDTIPOORDEN.CORRECCION_CORREOELECTRONICO
                && tipoOrden.getCodigo() != CommonConstant.ORDTIPOORDEN.CERTIFICACION_CONSUMIDOR
                && tipoOrden.getCodigo() != CommonConstant.ORDTIPOORDEN.CORRECCION_CORREOELECTRONICO
                && tipoOrden.getCodigo() != CommonConstant.ORDTIPOORDEN.CAMBIO_FECHA_LECTURA
                && tipoOrden.getCodigo() != CommonConstant.ORDTIPOORDEN.MODIFICACION_RECLAMO
                && tipoOrden.getCodigo() != CommonConstant.ORDTIPOORDEN.CORRECCION_TELEFONO_CORREO
                && tipoOrden.getCodigo() != CommonConstant.ORDTIPOORDEN.ANULACION_CARGO_RECONEXION;
    }

    public CommonResponse anularOrden(CommonInput input) {
        cr = new CommonResponse();
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        UsuarioDto usuarioDto = input.getUsuarioDto();
        OrdOrden ordOrden = input.getOrdOrden();
        OrdEstado ordEstadoAnulada = ordEstadoDao.findByCodigoEstado(CommonConstant.ORDESTADO.ANULADA);
        String observacion = "";
        try {
            if (ordOrden != null) {
                OrdOrden orden = ordOrdenDao.findById(ordOrden.getId());
                if (orden.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.SUSPENDIDA || orden.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.SUSPENDIDA_EMPRESA) {
                    Boolean updateOrden = false;
                    SolSolicitud solsolicitud = new SolSolicitud();
                    List<SolSolicitudOrden> solSolicitudOrdenList = solSolicitudOrdenDao.findByIdOrdenList(orden.getId());
                    for (SolSolicitudOrden solicitudOrden : solSolicitudOrdenList) {
                        OrdOrden ordOrdenSol = ordOrdenDao.findById(solicitudOrden.getOrdId().getId());
                        observacion = orden.getObservacion() + " " + ordOrden.getObservacion();
                        ordOrdenSol.setObservacion(observacion);
                        ordOrdenSol.setIdEstado(ordEstadoAnulada);
                        ordOrdenSol.setFechaCumplimiento(calendar.getTime());
                        ordOrdenSol.setFechaTranscripcion(calendar.getTime());
                        ordOrdenSol.setFechaApliacacion(calendar.getTime());
                        ordOrdenSol.setFechaActualizacion(calendar.getTime());
                        ordOrdenSol.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                        updateOrden = ordOrdenDao.update(ordOrdenSol);
                        ordOrdenEstadosBean.updateEstadoOrden(ordOrdenSol, CommonConstant.ORDESTADO.ANULADA);
                        solsolicitud = solicitudOrden.getIdSolicitud();
                    }
                    if (solsolicitud != null) {
                        solsolicitud.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                        solsolicitud.setFechaActualizacion(calendar.getTime());
                        solSolicitudEstadosBean.updateEstadoSolicitud(solsolicitud, et.com.ejb.atc.data.CommonConstant.SOLESTADO.ANULADA, usuarioDto);
                    }
                    if (solSolicitudOrdenList == null && solSolicitudOrdenList.isEmpty()) {
                        observacion = orden.getObservacion() + " " + ordOrden.getObservacion();
                        orden.setObservacion(observacion);

                        orden.setIdEstado(ordEstadoAnulada);
                        orden.setFechaCumplimiento(calendar.getTime());
                        orden.setFechaTranscripcion(calendar.getTime());
                        orden.setFechaApliacacion(calendar.getTime());
                        orden.setFechaActualizacion(calendar.getTime());
                        orden.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                        updateOrden = ordOrdenDao.update(orden);
                        ordOrdenEstadosBean.updateEstadoOrden(orden, CommonConstant.ORDESTADO.ANULADA);
                    }
                    //Liberar el medidor

                    if (new Integer(orden.getIdMedidorConexion().getIdEstado().getCodigo()) == CommonConstant.MED_ESTADO.MEDIDOR_ASIGNADO) {
                        Boolean iisUpdateMedidor = medmedidorDao.updateDisponible(orden.getIdMedidorConexion().getId());
                    }

//                if (orden.getIdTipoOrden().getCodigo() != CommonConstant.ORDTIPOORDEN.CONTRATO_NUEVO) {
//                    if (orden.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.PENDIENTE || orden.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.ASIGNADA_MEDIDORES || orden.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.REVISADA || orden.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.CAMPO || orden.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.REANUDADA) {
//                        switch (orden.getIdEstado().getCodigo()) {
//                            case CommonConstant.ORDESTADO.PENDIENTE: {
//                                Boolean updateOrden = false;
//                                SolSolicitud solsolicitud = new SolSolicitud();
//                                List<SolSolicitudOrden> solSolicitudOrdenList = solSolicitudOrdenDao.findByIdOrdenList(orden.getId());
//                                for (SolSolicitudOrden solicitudOrden : solSolicitudOrdenList) {
//                                    OrdOrden ordOrdenSol = ordOrdenDao.findById(solicitudOrden.getOrdId().getId());
//                                    ordOrdenSol.setIdEstado(ordEstadoAnulada);
//                                    ordOrdenSol.setFechaCumplimiento(calendar.getTime());
//                                    ordOrdenSol.setFechaTranscripcion(calendar.getTime());
//                                    ordOrdenSol.setFechaApliacacion(calendar.getTime());
//                                    ordOrdenSol.setFechaActualizacion(calendar.getTime());
//                                    ordOrdenSol.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
//                                    updateOrden = ordOrdenDao.update(ordOrdenSol);
//                                    ordOrdenEstadosBean.updateEstadoOrden(ordOrdenSol, CommonConstant.ORDESTADO.ANULADA);
//                                    solsolicitud = solicitudOrden.getIdSolicitud();
//                                }
//                                if (solsolicitud != null) {
//                                    solsolicitud.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
//                                    solsolicitud.setFechaActualizacion(calendar.getTime());
//                                    solSolicitudEstadosBean.updateEstadoSolicitud(solsolicitud, et.com.ejb.atc.data.CommonConstant.SOLESTADO.ANULADA, usuarioDto);
//                                }
//                                if (solSolicitudOrdenList != null && solSolicitudOrdenList.isEmpty()) {
//                                    orden.setIdEstado(ordEstadoAnulada);
//                                    orden.setFechaCumplimiento(calendar.getTime());
//                                    orden.setFechaTranscripcion(calendar.getTime());
//                                    orden.setFechaApliacacion(calendar.getTime());
//                                    orden.setFechaActualizacion(calendar.getTime());
//                                    orden.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
//                                    updateOrden = ordOrdenDao.update(orden);
//                                    ordOrdenEstadosBean.updateEstadoOrden(orden, CommonConstant.ORDESTADO.ANULADA);
//                                }
//                                break;
//                            }
//                            case CommonConstant.ORDESTADO.ASIGNADA_MEDIDORES: {
//                                Boolean updateOrden = false;
//                                SolSolicitud solsolicitud = new SolSolicitud();
//                                List<SolSolicitudOrden> solSolicitudOrdenList = solSolicitudOrdenDao.findByIdOrdenList(orden.getId());
//                                for (SolSolicitudOrden solicitudOrden : solSolicitudOrdenList) {
//                                    OrdOrden ordOrdenSol = ordOrdenDao.findById(solicitudOrden.getOrdId().getId());
//                                    ordOrdenSol.setIdEstado(ordEstadoAnulada);
//                                    ordOrdenSol.setFechaCumplimiento(calendar.getTime());
//                                    ordOrdenSol.setFechaTranscripcion(calendar.getTime());
//                                    ordOrdenSol.setFechaApliacacion(calendar.getTime());
//                                    ordOrdenSol.setFechaActualizacion(calendar.getTime());
//                                    ordOrdenSol.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
//                                    updateOrden = ordOrdenDao.update(ordOrdenSol);
//                                    ordOrdenEstadosBean.updateEstadoOrden(ordOrdenSol, CommonConstant.ORDESTADO.ANULADA);
//                                    solsolicitud = solicitudOrden.getIdSolicitud();
//                                }
//                                if (solsolicitud != null) {
//                                    solsolicitud.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
//                                    solsolicitud.setFechaActualizacion(calendar.getTime());
//                                    solSolicitudEstadosBean.updateEstadoSolicitud(solsolicitud, et.com.ejb.atc.data.CommonConstant.SOLESTADO.ANULADA, usuarioDto);
//                                }
//                                if (solSolicitudOrdenList != null && solSolicitudOrdenList.isEmpty()) {
//                                    orden.setIdEstado(ordEstadoAnulada);
//                                    orden.setFechaCumplimiento(calendar.getTime());
//                                    orden.setFechaTranscripcion(calendar.getTime());
//                                    orden.setFechaApliacacion(calendar.getTime());
//                                    orden.setFechaActualizacion(calendar.getTime());
//                                    orden.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
//                                    updateOrden = ordOrdenDao.update(orden);
//                                    ordOrdenEstadosBean.updateEstadoOrden(orden, CommonConstant.ORDESTADO.ANULADA);
//                                }
//                                break;
//                            }
//                            case CommonConstant.ORDESTADO.REVISADA: {
//                                Boolean updateOrden = false;
//                                SolSolicitud solsolicitud = new SolSolicitud();
//                                List<SolSolicitudOrden> solSolicitudOrdenList = solSolicitudOrdenDao.findByIdOrdenList(orden.getId());
//                                for (SolSolicitudOrden solicitudOrden : solSolicitudOrdenList) {
//                                    OrdOrden ordOrdenSol = ordOrdenDao.findById(solicitudOrden.getOrdId().getId());
//                                    ordOrdenSol.setIdEstado(ordEstadoAnulada);
//                                    ordOrdenSol.setFechaCumplimiento(calendar.getTime());
//                                    ordOrdenSol.setFechaTranscripcion(calendar.getTime());
//                                    ordOrdenSol.setFechaApliacacion(calendar.getTime());
//                                    ordOrdenSol.setFechaActualizacion(calendar.getTime());
//                                    ordOrdenSol.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
//                                    updateOrden = ordOrdenDao.update(ordOrdenSol);
//                                    ordOrdenEstadosBean.updateEstadoOrden(ordOrdenSol, CommonConstant.ORDESTADO.ANULADA);
//                                    solsolicitud = solicitudOrden.getIdSolicitud();
//                                }
//                                if (solsolicitud != null) {
//                                    solsolicitud.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
//                                    solsolicitud.setFechaActualizacion(calendar.getTime());
//                                    solSolicitudEstadosBean.updateEstadoSolicitud(solsolicitud, et.com.ejb.atc.data.CommonConstant.SOLESTADO.ANULADA, usuarioDto);
//                                }
//                                if (solSolicitudOrdenList != null && solSolicitudOrdenList.isEmpty()) {
//                                    orden.setIdEstado(ordEstadoAnulada);
//                                    orden.setFechaCumplimiento(calendar.getTime());
//                                    orden.setFechaTranscripcion(calendar.getTime());
//                                    orden.setFechaApliacacion(calendar.getTime());
//                                    orden.setFechaActualizacion(calendar.getTime());
//                                    orden.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
//                                    updateOrden = ordOrdenDao.update(orden);
//                                    ordOrdenEstadosBean.updateEstadoOrden(orden, CommonConstant.ORDESTADO.ANULADA);
//                                }
//                                //Liberar el medidor
//                                Boolean iisUpdateMedidor = medmedidorDao.updateDisponible(orden.getIdMedidorConexion().getId());
//                                break;
//                            }
//                            case CommonConstant.ORDESTADO.CAMPO: {
//                                Boolean updateOrden = false;
//                                SolSolicitud solsolicitud = new SolSolicitud();
//                                List<SolSolicitudOrden> solSolicitudOrdenList = solSolicitudOrdenDao.findByIdOrdenList(orden.getId());
//                                for (SolSolicitudOrden solicitudOrden : solSolicitudOrdenList) {
//                                    OrdOrden ordOrdenSol = ordOrdenDao.findById(solicitudOrden.getOrdId().getId());
//                                    ordOrdenSol.setIdEstado(ordEstadoAnulada);
//                                    ordOrdenSol.setFechaCumplimiento(calendar.getTime());
//                                    ordOrdenSol.setFechaTranscripcion(calendar.getTime());
//                                    ordOrdenSol.setFechaApliacacion(calendar.getTime());
//                                    ordOrdenSol.setFechaActualizacion(calendar.getTime());
//                                    ordOrdenSol.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
//                                    updateOrden = ordOrdenDao.update(ordOrdenSol);
//                                    ordOrdenEstadosBean.updateEstadoOrden(ordOrdenSol, CommonConstant.ORDESTADO.ANULADA);
//                                    solsolicitud = solicitudOrden.getIdSolicitud();
//                                }
//                                if (solsolicitud != null) {
//                                    solsolicitud.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
//                                    solsolicitud.setFechaActualizacion(calendar.getTime());
//                                    solSolicitudEstadosBean.updateEstadoSolicitud(solsolicitud, et.com.ejb.atc.data.CommonConstant.SOLESTADO.ANULADA, usuarioDto);
//                                }
//                                if (solSolicitudOrdenList != null && solSolicitudOrdenList.isEmpty()) {
//                                    orden.setIdEstado(ordEstadoAnulada);
//                                    orden.setFechaCumplimiento(calendar.getTime());
//                                    orden.setFechaTranscripcion(calendar.getTime());
//                                    orden.setFechaApliacacion(calendar.getTime());
//                                    orden.setFechaActualizacion(calendar.getTime());
//                                    orden.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
//                                    updateOrden = ordOrdenDao.update(orden);
//                                    ordOrdenEstadosBean.updateEstadoOrden(orden, CommonConstant.ORDESTADO.ANULADA);
//                                }
//                                if (orden.getFechaAsignacionMedidor() != null) {
//                                    //Liberar el medidor
//                                    Boolean iisUpdateMedidor = medmedidorDao.updateDisponible(orden.getIdMedidorConexion().getId());
//                                }
//                                break;
//                            }
//                            case CommonConstant.ORDESTADO.REANUDADA: {
//                                Boolean updateOrden = false;
//                                SolSolicitud solsolicitud = new SolSolicitud();
//                                List<SolSolicitudOrden> solSolicitudOrdenList = solSolicitudOrdenDao.findByIdOrdenList(orden.getId());
//                                for (SolSolicitudOrden solicitudOrden : solSolicitudOrdenList) {
//                                    OrdOrden ordOrdenSol = ordOrdenDao.findById(solicitudOrden.getOrdId().getId());
//                                    ordOrdenSol.setIdEstado(ordEstadoAnulada);
//                                    ordOrdenSol.setFechaCumplimiento(calendar.getTime());
//                                    ordOrdenSol.setFechaTranscripcion(calendar.getTime());
//                                    ordOrdenSol.setFechaApliacacion(calendar.getTime());
//                                    ordOrdenSol.setFechaActualizacion(calendar.getTime());
//                                    ordOrdenSol.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
//                                    updateOrden = ordOrdenDao.update(ordOrdenSol);
//                                    ordOrdenEstadosBean.updateEstadoOrden(ordOrdenSol, CommonConstant.ORDESTADO.ANULADA);
//                                    solsolicitud = solicitudOrden.getIdSolicitud();
//                                }
//                                if (solsolicitud != null) {
//                                    solsolicitud.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
//                                    solsolicitud.setFechaActualizacion(calendar.getTime());
//                                    solSolicitudEstadosBean.updateEstadoSolicitud(solsolicitud, et.com.ejb.atc.data.CommonConstant.SOLESTADO.ANULADA, usuarioDto);
//                                }
//                                if (solSolicitudOrdenList != null && solSolicitudOrdenList.isEmpty()) {
//                                    orden.setIdEstado(ordEstadoAnulada);
//                                    orden.setFechaCumplimiento(calendar.getTime());
//                                    orden.setFechaTranscripcion(calendar.getTime());
//                                    orden.setFechaApliacacion(calendar.getTime());
//                                    orden.setFechaActualizacion(calendar.getTime());
//                                    orden.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
//                                    updateOrden = ordOrdenDao.update(orden);
//                                    ordOrdenEstadosBean.updateEstadoOrden(orden, CommonConstant.ORDESTADO.ANULADA);
//                                }
//                                if (orden.getFechaAsignacionMedidor() != null) {
//                                    //Liberar el medidor
//                                    Boolean iisUpdateMedidor = medmedidorDao.updateDisponible(orden.getIdMedidorConexion().getId());
//                                }
//                                break;
//                            }
//                        }
//                    }
                } else {

//                    cr.setResultMessage(CommonMessage.ORDORDEN.ERROR.ANULA_CONTRATO_NUEVO);
//                    cr.setResultMessage(CommonMessage.GLOBAL.ERROR.EMPTY_INPUT);
                    cr.setResultMessage(CommonMessage.ORDORDEN.ERROR.ANULA_ESTADO);
                    cr.setResultMessage(CommonMessage.GLOBAL.ERROR.EMPTY_INPUT);
                }
            } else {
                cr.setResult(GlobalConstant.RESULT_ERROR);
                cr.setResultMessage(CommonMessage.GLOBAL.ERROR.EMPTY_INPUT);
            }

        } catch (Exception e) {
            cr.setResult(GlobalConstant.RESULT_ERROR);
            cr.setResultMessage(CommonMessage.GLOBAL.ERROR.ERROR);
            e.printStackTrace();
        }
        return cr;
    }

    public CommonResponse printOrdenCorteReconexion(CommonInput input) {
        cr = new CommonResponse();
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        try {
            OrdOrden ordOrden = input.getOrdOrden();
            if (ordOrden != null) {
                OrdOrden orden = ordOrdenDao.findById(ordOrden.getId());
                OrdEstado ordEstado = ordEstadoDao.findById(orden.getIdEstado().getId());
                Integer estado = ordEstado.getCodigo();
                if (orden.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.PENDIENTE || orden.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.REVISADA || orden.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.CAMPO) {
                    String pathExportPdf = CommonConstant.BASE_PATH_TMP + "orden" + formatDate.format(calendar.getTime()) + "-" + orden.getId() + ".pdf";
                    orden.setFechaImpresion(calendar.getTime());
                    Boolean updateEstadoOrden = ordOrdenEstadosBean.updateEstadoOrden(orden, CommonConstant.ORDESTADO.CAMPO);
                    if (updateEstadoOrden) {
                        this.printOrdenCorteReconexion(orden, pathExportPdf);
                        cr.setBase64(Utils.getFileBase64(pathExportPdf));
                        cr.setResult(GlobalConstant.RESULT_SUCCESS);
                        cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.SUCCESS);

                    } else {
                        cr.setResult(CommonConstant.RESULT_ERROR);
                        cr.setResultMessage(CommonMessage.GLOBAL.ERROR.ERROR);
                    }

                } else {
                    cr.setResult(CommonConstant.RESULT_WARNING);
                    cr.setResultMessage(String.format(CommonMessage.ORDORDEN.WARNING.ORDEN_IMPRESION));
                }
            } else {
                cr.setResult(GlobalConstant.RESULT_ERROR);
                cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.SUCCESS);
            }

        } catch (Exception e) {
            cr.setResult(CommonConstant.RESULT_ERROR);
            cr.setResultMessage(e.getMessage());
            e.printStackTrace();
        }
        return cr;
    }

    public Boolean printOrdenCorteReconexion(OrdOrden orden, String pathExportPdf) {
        HashMap hm = null;
        Connection conn = null;
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        try {
            conn = Utils.getConnection();
            String precintosConex = "";
            String precintosDesc = "";

            Object[] posicion;
            List<Object[]> medAsignaPrecintoConexList = new ArrayList();
            List<Object[]> medAsignaPrecintoDsconexList = new ArrayList();

            if (orden.getIdMedidorConexion() != null) {
                medAsignaPrecintoConexList = medAsignaPrecintoDao.getPrecintosTableByMedidor(orden.getIdMedidorConexion().getNumeroMedidor());
            }
            if (orden.getIdMedidorDesconexion() != null) {
                medAsignaPrecintoDsconexList = medAsignaPrecintoDao.getPrecintosTableByMedidor(orden.getIdMedidorDesconexion().getNumeroMedidor());
            }
            Iterator iterador1 = medAsignaPrecintoConexList.listIterator();
            while (iterador1.hasNext()) {
                posicion = (Object[]) iterador1.next();

                switch (Integer.valueOf(posicion[0].toString())) {

                    case CommonConstant.POSICION_MEDIDOR.TAPA_MEDIDOR: {
                        for (int i = 0; i < posicion.length; i++) {

                            if (i % 5 == 0 && i != 0 && i != 1) {

                                precintosConex = precintosConex + posicion[i] + " " + posicion[i + 2];
                                precintosConex = precintosConex + " / ";
                            }
                        }

                        break;
                    }
                    case CommonConstant.POSICION_MEDIDOR.CUBREBORNERA: {
                        for (int i = 0; i < posicion.length; i++) {

                            if (i % 5 == 0 && i != 0 && i != 1) {
                                precintosConex = precintosConex + posicion[i] + " " + posicion[i + 2];
                                precintosConex = precintosConex + " / ";

                            }
                        }

                        break;
                    }

                }

            }

            iterador1 = medAsignaPrecintoDsconexList.listIterator();
            while (iterador1.hasNext()) {
                posicion = (Object[]) iterador1.next();

                switch (Integer.valueOf(posicion[0].toString())) {

                    case CommonConstant.POSICION_MEDIDOR.TAPA_MEDIDOR: {
                        for (int i = 0; i < posicion.length; i++) {

                            if (i % 5 == 0 && i != 0 && i != 1) {
                                precintosDesc = precintosDesc + posicion[i] + " " + posicion[i + 2];
                                precintosDesc = precintosDesc + " / ";
                            }
                        }

                        break;
                    }
                    case CommonConstant.POSICION_MEDIDOR.CUBREBORNERA: {
                        for (int i = 0; i < posicion.length; i++) {

                            if (i % 5 == 0 && i != 0 && i != 1) {

                                precintosDesc = precintosDesc + posicion[i] + " " + posicion[i + 2];
                                precintosDesc = precintosDesc + " / ";

                            }
                        }

                        break;
                    }

                }

            }

            switch (orden.getIdTipoOrden().getCodigo()) {
                case CommonConstant.ORDTIPOORDEN.CORTE: {

                    String precintosDesconexion = "";
                    if (!precintosDesc.equals("")) {
                        precintosDesconexion = precintosDesc.substring(0, precintosDesc.length() - 2);
                    }
                    JasperCompileManager.compileReportToFile(CommonConstant.basePathJrxml + "OrdenCorte-v0.1.jrxml", CommonConstant.basePathJrxml + "OrdenCorte-v0.1.jasper");
                    hm = new HashMap();
                    hm.put("idOrden", orden.getId());
                    hm.put("precintos", precintosDesconexion);

                    JasperPrint jprint = (JasperPrint) JasperFillManager.fillReport(CommonConstant.basePathJrxml + "OrdenCorte-v0.1.jasper", hm, conn);
                    JasperExportManager.exportReportToPdfFile(jprint, pathExportPdf);
                    break;
                }
                case CommonConstant.ORDTIPOORDEN.RECONEXION: {
                    String precintosConexion = "";
                    if (!precintosConex.equals("")) {
                        precintosConexion = precintosConex.substring(0, precintosConex.length() - 2);
                    }
                    JasperCompileManager.compileReportToFile(CommonConstant.basePathJrxml + "OrdenReconexion-v0.1.jrxml", CommonConstant.basePathJrxml + "OrdenReconexion-v0.1.jasper");
                    hm = new HashMap();
                    hm.put("idOrden", orden.getId());
                    hm.put("precintos", precintosConexion);
                    JasperPrint jprint = (JasperPrint) JasperFillManager.fillReport(CommonConstant.basePathJrxml + "OrdenReconexion-v0.1.jasper", hm, conn);
                    JasperExportManager.exportReportToPdfFile(jprint, pathExportPdf);
                    break;
                }
                case CommonConstant.ORDTIPOORDEN.SUSPENSION_FALTA_PAGO: {
                    String precintosDesconexion = "";
                    if (!precintosDesc.equals("")) {
                        precintosDesconexion = precintosDesc.substring(0, precintosDesc.length() - 2);
                    }
                    JasperCompileManager.compileReportToFile(CommonConstant.basePathJrxml + "OrdenSuspencionFaltaPago-v0.1.jrxml", CommonConstant.basePathJrxml + "OrdenSuspencionFaltaPago-v0.1.jasper");
                    hm = new HashMap();
                    hm.put("idOrden", orden.getId());
                    hm.put("precintos", precintosDesconexion);
                    JasperPrint jprint = (JasperPrint) JasperFillManager.fillReport(CommonConstant.basePathJrxml + "OrdenSuspencionFaltaPago-v0.1.jasper", hm, conn);
                    JasperExportManager.exportReportToPdfFile(jprint, pathExportPdf);
                    break;
                }
                case CommonConstant.ORDTIPOORDEN.REHABILITACION_FALTA_PAGO: {
                    String precintosConexion = "";
                    if (!precintosConex.equals("")) {
                        precintosConexion = precintosConex.substring(0, precintosConex.length() - 2);
                    }
                    JasperCompileManager.compileReportToFile(CommonConstant.basePathJrxml + "OrdenRehabilitacionServicio-v0.1.jrxml", CommonConstant.basePathJrxml + "OrdenRehabilitacionServicio-v0.1.jasper");
                    hm = new HashMap();
                    hm.put("idOrden", orden.getId());
                    hm.put("precintos", precintosConexion);
                    JasperPrint jprint = (JasperPrint) JasperFillManager.fillReport(CommonConstant.basePathJrxml + "OrdenRehabilitacionServicio-v0.1.jasper", hm, conn);
                    JasperExportManager.exportReportToPdfFile(jprint, pathExportPdf);
                    break;
                }
            }
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        } finally {
            Utils.closeConnection(conn);
        }
    }

    public CommonResponse printOrdenCorteReconexionMasiva(CommonInput input) {
        cr = new CommonResponse();
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        Boolean updateEstadoOrden = false;
        Integer ordenAux = 0;
        List<Object[]> ordenList = new ArrayList<>();
        List ordenesList = new ArrayList<>();
        String ordenes = "";
        Integer numeracion = 0;
        try {
            Date fechaImpresion = calendar.getTime();
            OrdCorteReconexionDto ordCorteReconexionDto = input.getOrdCorteReconexionDto();

            UsuarioDto usuarioDto = input.getUsuarioDto();
            if (ordCorteReconexionDto != null) {

                if (ordCorteReconexionDto.getIdSectorDestino() == null) {
                    cr.setResult(GlobalConstant.RESULT_WARNING);
                    cr.setResultMessage(String.format(CommonMessage.ORDORDEN.WARNING.SECTOR_REQUIRED));
                    return cr;
                }
                if (ordCorteReconexionDto.getIdTipoOrden() == null) {
                    cr.setResult(GlobalConstant.RESULT_WARNING);
                    cr.setResultMessage(String.format(CommonMessage.ORDORDEN.WARNING.TIPO_REQUIRED));
                    return cr;
                }

                //VALIDA EL SECTOR DESTINO
                if (!usuarioDto.getId_sector().equals(ordCorteReconexionDto.getIdSectorDestino())) {
                    cr.setResult(GlobalConstant.RESULT_WARNING);
                    cr.setResultMessage(String.format(CommonMessage.ORDORDEN.WARNING.ORDEN_SECTOR_DESTINO));
                    return cr;
                }

                if (((ordCorteReconexionDto.getIdTipoOrden() == CommonConstant.ORDTIPOORDEN.RECONEXION || ordCorteReconexionDto.getIdTipoOrden() == CommonConstant.ORDTIPOORDEN.RECONEXION) && ordCorteReconexionDto.getFechaAlta() == null && ordCorteReconexionDto.getFechaAltaFin() == null)
                        || ((ordCorteReconexionDto.getIdTipoOrden() == CommonConstant.ORDTIPOORDEN.CORTE || ordCorteReconexionDto.getIdTipoOrden() == CommonConstant.ORDTIPOORDEN.SUSPENSION_FALTA_PAGO)
                        && ordCorteReconexionDto.getFechaEstimadaCorte() == null && ordCorteReconexionDto.getFechaEstimadaCorteFin() == null)) {
                    cr.setResult(GlobalConstant.RESULT_WARNING);
                    cr.setResultMessage(String.format(CommonMessage.ORDORDEN.WARNING.FECHA_REQUIRED));
                    return cr;
                }

                if (ordCorteReconexionDto.getIdTipoOrden() == CommonConstant.ORDTIPOORDEN.CORTE || ordCorteReconexionDto.getIdTipoOrden() == CommonConstant.ORDTIPOORDEN.SUSPENSION_FALTA_PAGO) {
                    //TODAS LA ORDENES QUE YA ESTAN EN CAMPO
                    ordenList = ordOrdenDao.getCorteSuspensionMasivoReimpresion(ordCorteReconexionDto.getIdSectorDestino(), ordCorteReconexionDto.getIdTipoOrden(), ordCorteReconexionDto.getFechaEstimadaCorte(), ordCorteReconexionDto.getFechaEstimadaCorteFin(), ordCorteReconexionDto.getIdRutaDesde(), ordCorteReconexionDto.getIdRutaHasta(), CommonConstant.ORDESTADO.CAMPO);
                } else {
                    //TODAS LA ORDENES QUE YA ESTAN EN CAMPO
                    ordenList = ordOrdenDao.getReconRehabiMasivoReimpresion(ordCorteReconexionDto.getIdSectorDestino(), ordCorteReconexionDto.getIdTipoOrden(), ordCorteReconexionDto.getFechaAlta(), ordCorteReconexionDto.getFechaAltaFin(), ordCorteReconexionDto.getIdRutaDesde(), ordCorteReconexionDto.getIdRutaHasta(), CommonConstant.ORDESTADO.CAMPO);
                }
                ordenes = "{";
                if (ordenList.size() > 0) {
                    for (Object[] ordenReimpresion : ordenList) {
                        ordenAux = (Integer) ordenReimpresion[0];

                        fechaImpresion = (Date) ordenReimpresion[1];
                        ordenes = ordenes + ordenAux + ",";
                        updateEstadoOrden = ordOrdenEstadosBean.updateEstadoOrdenCortesReconex(ordenAux, CommonConstant.ORDESTADO.CAMPO, ordCorteReconexionDto.getIdSectorDestino(), usuarioDto.getId_usuario_security(), fechaImpresion);

                    }
                }
                fechaImpresion = calendar.getTime();
                if (ordCorteReconexionDto.getIdTipoOrden() == CommonConstant.ORDTIPOORDEN.CORTE || ordCorteReconexionDto.getIdTipoOrden() == CommonConstant.ORDTIPOORDEN.SUSPENSION_FALTA_PAGO) {
                    //Realiza la numeracion interna de los cortes
                    numeracion = cyrProgramaDao.findUltimoNumeroOrden(ordCorteReconexionDto.getIdSectorDestino(), ordCorteReconexionDto.getIdTipoOrden(), ordCorteReconexionDto.getFechaEstimadaCorte());
                    ordenesList = this.numerarCorteReconexionMasiva(input, numeracion);
                    String ordenesPrint = (String) ordenesList.get(1);
                    if (ordenesPrint.length() < 2) {
                        cr.setResult(GlobalConstant.RESULT_WARNING);
                        cr.setResultMessage(String.format(CommonMessage.ORDORDEN.WARNING.NUMERACION_SELECCIONADO));
                        return cr;
                    }
                    ordenesPrint = ordenesPrint.substring(1, ordenesPrint.length() - 1);
                    String[] ordenesArray = ordenesPrint.split(",");
                    for (String ordenString : ordenesArray) {
                        ordenAux = new Integer(ordenString);
                        updateEstadoOrden = ordOrdenEstadosBean.updateEstadoOrdenCortesReconex(ordenAux, CommonConstant.ORDESTADO.CAMPO, ordCorteReconexionDto.getIdSectorDestino(), usuarioDto.getId_usuario_security(), fechaImpresion);
                    }
                    ordenes = ordenes + ordenesPrint + "}";
                } else {
                    ordenList = ordOrdenDao.getCorteReconexionMasivo(ordCorteReconexionDto.getIdSectorDestino(), ordCorteReconexionDto.getIdTipoOrden(), ordCorteReconexionDto.getFechaEstimadaCorte(), ordCorteReconexionDto.getFechaEstimadaCorteFin(), ordCorteReconexionDto.getFechaAlta(), ordCorteReconexionDto.getFechaAltaFin(), ordCorteReconexionDto.getIdRutaDesde(), ordCorteReconexionDto.getIdRutaHasta(), CommonConstant.ORDESTADO.PENDIENTE, CommonConstant.ORDESTADO.CAMPO, CommonConstant.ORDESTADO.REVISADA);
                    Object aux = null;
                    Iterator iterador1 = ordenList.listIterator();
                    while (iterador1.hasNext()) {
                        aux = iterador1.next();
                        ordenAux = (Integer) aux;
                        ordenes = ordenes + ordenAux + ",";
                        updateEstadoOrden = ordOrdenEstadosBean.updateEstadoOrdenCortesReconex(ordenAux, CommonConstant.ORDESTADO.CAMPO, ordCorteReconexionDto.getIdSectorDestino(), usuarioDto.getId_usuario_security(), fechaImpresion);
                    }
                    ordenes = ordenes.substring(0, ordenes.length() - 1) + "}";
                }
                if (ordenes.length() < 3) {
                    cr.setResult(GlobalConstant.RESULT_WARNING);
                    cr.setResultMessage(String.format(CommonMessage.ORDORDEN.WARNING.NUMERACION_SELECCIONADO));
                    return cr;
                }
                if (ordenesList != null || ordenList != null) {
                    String pathExportPdf = CommonConstant.BASE_PATH_TMP + formatDate.format(fechaImpresion) + ".txt";
                    OrdTipoOrden ordTipoOrden = ordTipoOrdenDao.findById(ordCorteReconexionDto.getIdTipoOrden());
                    this.printOrdenCorteReconexionSeleccionado(ordTipoOrden.getCodigo(), ordenes, pathExportPdf);
                    //this.printOrdenCorteReconexionMasiva(ordCorteReconexionDto, fechaImpresion, ordenes, pathExportPdf);
                    cr.setBase64(Utils.getFileBase64(pathExportPdf));
                    if (updateEstadoOrden) {
                        cr.setResult(GlobalConstant.RESULT_SUCCESS);
                        cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.SUCCESS);

                    } else {
                        cr.setResult(CommonConstant.RESULT_ERROR);
                        cr.setResultMessage(CommonMessage.GLOBAL.ERROR.ERROR);
                    }
                } else {
                    cr.setResult(GlobalConstant.RESULT_ERROR);
                    cr.setResultMessage(CommonMessage.GLOBAL.ERROR.EMPTY_INPUT);
                }
            } else {
                cr.setResult(GlobalConstant.RESULT_ERROR);
                cr.setResultMessage(CommonMessage.GLOBAL.ERROR.EMPTY_INPUT);
            }
        } catch (Exception e) {
            cr.setResult(CommonConstant.RESULT_ERROR);
            cr.setResultMessage(e.getMessage());
            e.printStackTrace();
        }
        return cr;
    }

    public Boolean printOrdenCorteReconexionMasiva(OrdCorteReconexionDto ordCorteReconexionDto, Date fechaImpresion, String ordenes, String pathExportPdf) {
        HashMap hm = null;
        Connection conn = null;
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        try {
            conn = Utils.getConnection();
            OrdTipoOrden OrdTipoOrden = ordTipoOrdenDao.findById(ordCorteReconexionDto.getIdTipoOrden());

            switch (OrdTipoOrden.getCodigo()) {
                case CommonConstant.ORDTIPOORDEN.CORTE: {
                    JasperCompileManager.compileReportToFile(CommonConstant.basePathJrxml + "OrdenCorteMasivoLista-v0.1.jrxml", CommonConstant.basePathJrxml + "OrdenCorteMasivoLista-v0.1.jasper");
                    hm = new HashMap();
//                    hm.put("idSectorDestino", ordCorteReconexionDto.getIdSectorDestino());
//                    hm.put("idTipoOrden", ordCorteReconexionDto.getIdTipoOrden());
//                    hm.put("fechaEstimada", ordCorteReconexionDto.getFechaEstimadaCorte());
//                    hm.put("fechaEstimadaFin", ordCorteReconexionDto.getFechaEstimadaCorteFin());
//                    if (ordCorteReconexionDto.getIdRutaDesde() != null) {
//                        hm.put("idRutaDesde", ordCorteReconexionDto.getIdRutaDesde());
//                    } else {
//                        hm.put("idRutaDesde", 0);
//                    }
//                    if (ordCorteReconexionDto.getIdRutaHasta() != null) {
//                        hm.put("idRutaHasta", ordCorteReconexionDto.getIdRutaHasta());
//                    } else {
//                        hm.put("idRutaHasta", 999999999);
//                    }
//
//                    hm.put("estPendiente", CommonConstant.ORDESTADO.PENDIENTE);
//                    hm.put("estCampo", CommonConstant.ORDESTADO.CAMPO);
//                    hm.put("estRevisada", CommonConstant.ORDESTADO.REVISADA);
//                    hm.put("fechaImpresion", fechaImpresion);
                    hm.put("ordenes", ordenes);

                    JasperPrint jprint = (JasperPrint) JasperFillManager.fillReport(CommonConstant.basePathJrxml + "OrdenCorteMasivoLista-v0.1.jasper", hm, conn);
                    JasperExportManager.exportReportToPdfFile(jprint, pathExportPdf);
                    break;
                }
                case CommonConstant.ORDTIPOORDEN.RECONEXION: {
                    JasperCompileManager.compileReportToFile(CommonConstant.basePathJrxml + "OrdenReconexionMasivoLista-v0.1.jrxml", CommonConstant.basePathJrxml + "OrdenReconexionMasivoLista-v0.1.jasper");
                    hm = new HashMap();
//                    hm.put("idSectorDestino", ordCorteReconexionDto.getIdSectorDestino());
//                    hm.put("idTipoOrden", ordCorteReconexionDto.getIdTipoOrden());
//                    hm.put("fechaAlta", ordCorteReconexionDto.getFechaAlta());
//                    hm.put("fechaAltaFin", ordCorteReconexionDto.getFechaAltaFin());
//                    if (ordCorteReconexionDto.getIdRutaDesde() != null) {
//                        hm.put("idRutaDesde", ordCorteReconexionDto.getIdRutaDesde());
//                    } else {
//                        hm.put("idRutaDesde", 0);
//                    }
//                    if (ordCorteReconexionDto.getIdRutaHasta() != null) {
//                        hm.put("idRutaHasta", ordCorteReconexionDto.getIdRutaHasta());
//                    } else {
//                        hm.put("idRutaHasta", 999999999);
//                    }
//                    hm.put("estPendiente", CommonConstant.ORDESTADO.PENDIENTE);
//                    hm.put("estCampo", CommonConstant.ORDESTADO.CAMPO);
//                    hm.put("estRevisada", CommonConstant.ORDESTADO.REVISADA);
//                    hm.put("fechaImpresion", fechaImpresion);
                    // hm.put("precintos", mapPrecintosConex);
                    hm.put("ordenes", ordenes);
                    JasperPrint jprint = (JasperPrint) JasperFillManager.fillReport(CommonConstant.basePathJrxml + "OrdenReconexionMasivoLista-v0.1.jasper", hm, conn);
                    JasperExportManager.exportReportToPdfFile(jprint, pathExportPdf);
                    break;
                }
                case CommonConstant.ORDTIPOORDEN.SUSPENSION_FALTA_PAGO: {
                    JasperCompileManager.compileReportToFile(CommonConstant.basePathJrxml + "OrdenSuspencionServicioMasivoLista-v0.1.jrxml", CommonConstant.basePathJrxml + "OrdenSuspencionServicioMasivoLista-v0.1.jasper");
                    hm = new HashMap();
//                    hm.put("idSectorDestino", ordCorteReconexionDto.getIdSectorDestino());
//                    hm.put("idTipoOrden", ordCorteReconexionDto.getIdTipoOrden());
//                    hm.put("fechaEstimada", ordCorteReconexionDto.getFechaEstimadaCorte());
//                    hm.put("fechaEstimadaFin", ordCorteReconexionDto.getFechaEstimadaCorteFin());
//
//                    if (ordCorteReconexionDto.getIdRutaDesde() != null) {
//                        hm.put("idRutaDesde", ordCorteReconexionDto.getIdRutaDesde());
//                    } else {
//                        hm.put("idRutaDesde", 0);
//                    }
//                    if (ordCorteReconexionDto.getIdRutaHasta() != null) {
//                        hm.put("idRutaHasta", ordCorteReconexionDto.getIdRutaHasta());
//                    } else {
//                        hm.put("idRutaHasta", 999999999);
//                    }
//
//                    hm.put("estPendiente", CommonConstant.ORDESTADO.PENDIENTE);
//                    hm.put("estCampo", CommonConstant.ORDESTADO.CAMPO);
//                    hm.put("estRevisada", CommonConstant.ORDESTADO.REVISADA);
//                    hm.put("fechaImpresion", fechaImpresion);
                    hm.put("ordenes", ordenes);
                    JasperPrint jprint = (JasperPrint) JasperFillManager.fillReport(CommonConstant.basePathJrxml + "OrdenSuspencionServicioMasivoLista-v0.1.jasper", hm, conn);
                    JasperExportManager.exportReportToPdfFile(jprint, pathExportPdf);
                    break;
                }
                case CommonConstant.ORDTIPOORDEN.REHABILITACION_FALTA_PAGO: {
                    JasperCompileManager.compileReportToFile(CommonConstant.basePathJrxml + "OrdenRehabilitacionServicioMasivoLista-v0.1.jrxml", CommonConstant.basePathJrxml + "OrdenRehabilitacionServicioMasivoLista-v0.1.jasper");
                    hm = new HashMap();
//                    hm.put("idSectorDestino", ordCorteReconexionDto.getIdSectorDestino());
//                    hm.put("idTipoOrden", ordCorteReconexionDto.getIdTipoOrden());
//                    hm.put("fechaAlta", ordCorteReconexionDto.getFechaAlta());
//                    hm.put("fechaAltaFin", ordCorteReconexionDto.getFechaAltaFin());
//                    if (ordCorteReconexionDto.getIdRutaDesde() != null) {
//                        hm.put("idRutaDesde", ordCorteReconexionDto.getIdRutaDesde());
//                    } else {
//                        hm.put("idRutaDesde", 0);
//                    }
//                    if (ordCorteReconexionDto.getIdRutaHasta() != null) {
//                        hm.put("idRutaHasta", ordCorteReconexionDto.getIdRutaHasta());
//                    } else {
//                        hm.put("idRutaHasta", 999999999);
//                    }
//
//                    hm.put("estPendiente", CommonConstant.ORDESTADO.PENDIENTE);
//                    hm.put("estCampo", CommonConstant.ORDESTADO.CAMPO);
//                    hm.put("estRevisada", CommonConstant.ORDESTADO.REVISADA);
//                    hm.put("fechaImpresion", fechaImpresion);
                    //hm.put("precintos", mapPrecintosConex);
                    hm.put("ordenes", ordenes);
                    JasperPrint jprint = (JasperPrint) JasperFillManager.fillReport(CommonConstant.basePathJrxml + "OrdenRehabilitacionServicioMasivoLista-v0.1.jasper", hm, conn);
                    JasperExportManager.exportReportToPdfFile(jprint, pathExportPdf);
                    break;
                }
            }

            return true;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        } finally {
            Utils.closeConnection(conn);
        }
    }

    public CommonResponse validateOrdenes(CommonInput input, int ordEstado, boolean motivoDemora, NucDatosTecnicos nucDatosTecnicos, Boolean recojoMedidor) {
        cr = new CommonResponse();
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        Boolean isValida = true;
        Boolean isPendienteAplicacionOrdenAnt = false;
        try {
            OrdOrden ordOrden = input.getOrdOrden();

            if (ordOrden != null && (ordEstado == CommonConstant.ORDESTADO.CUMPLIDA || ordEstado == CommonConstant.ORDESTADO.PENDIENTE_APLICACION_SISTEMA)) {
                OrdOrden orden = new OrdOrden();
                if (ordOrden.getId() != null) {
                    orden = ordOrdenDao.findById(ordOrden.getId());
                } else {
                    orden = ordOrdenDao.findByCodigoOrden(ordOrden.getCodigo());
                }
                //VERIFICA SI EL CONSUMIDOR ESTA CONECTADO PARA NO REHABILITAR Y GENERAR CARGOS
                NucServicio nucServicio = nucServicioDao.findByIdConsumidor(orden.getIdConsumidor().getId(), CommonConstant.NUCTIPOSERVICIO.ENERGIA);

                if (orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.REHABILITACION //|| orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.REHABILITACION_FALTA_PAGO
                        ) {
                    if (nucServicio.getIdEstado().getCodigo() == CommonConstant.NUCESTADOS.CONECTADO) {
                        cr.setResultMessage(CommonMessage.ORDORDEN.ERROR.CONSUMIDOR_CONECTADO);
                        isValida = false;
                        cr.setResult(CommonConstant.RESULT_WARNING);
                    }
                }
                //OrdOrden orden = ordOrdenDao.findById(ordOrden.getId());
                Calendar fechacumplimiento = Calendar.getInstance();
                fechacumplimiento.setTime(ordOrden.getFechaCumplimiento());

                Calendar fechaGeneracion = Calendar.getInstance();
                fechaGeneracion.setTime(orden.getFechaRegistro());

                if (fechacumplimiento.getTime().compareTo(calendar.getTime()) > 0) {
                    cr.setResultMessage(CommonMessage.ORDORDEN.ERROR.FECHA_HOY);
                    cr.setResult(CommonConstant.RESULT_WARNING);
                    isValida = false;
                }
                if (fechacumplimiento.getTime().compareTo(fechaGeneracion.getTime()) < 0) {

                    cr.setResultMessage(CommonMessage.ORDORDEN.ERROR.FECHA_CUMPLIMIENTO);
                    isValida = false;
                    cr.setResult(CommonConstant.RESULT_WARNING);
                }
                // if (orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.CORTE || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.SUSPENSION_FALTA_PAGO || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.RECONEXION || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.REHABILITACION_FALTA_PAGO) {
                Calendar fechaImpresion = Calendar.getInstance();
                fechaImpresion.setTime(orden.getFechaImpresion());
                if (fechacumplimiento.getTime().compareTo(fechaImpresion.getTime()) < 0) {

                    cr.setResultMessage(CommonMessage.ORDORDEN.ERROR.FECHA_IMPRESION);
                    isValida = false;
                    cr.setResult(CommonConstant.RESULT_WARNING);
                }

                //VALIDA QUE EL MISMO OPERADOR HAGA UN TRABAJO EN PARALELO
                OrdOrden ordenOpe = ordOrdenDao.findByIdOperadorFecha(ordOrden.getIdOperadorCampo1().getId(), ordOrden.getFechaCumplimiento());
                if (ordenOpe != null) {
                    cr.setResultMessage(CommonMessage.ORDORDEN.ERROR.OPERADOR_ORDEN_PARALELA);
                    isValida = false;
                    cr.setResult(CommonConstant.RESULT_WARNING);
                }
                //VALIDA LA FECHA DE ASIGANACION DE MEDIDOR
                if (orden.getFechaAsignacionMedidor() != null) {
                    Calendar fechaAsignacionMedidor = Calendar.getInstance();
                    fechaAsignacionMedidor.setTime(orden.getFechaAsignacionMedidor());
                    if (fechacumplimiento.getTime().compareTo(fechaAsignacionMedidor.getTime()) < 0) {

                        cr.setResultMessage(CommonMessage.ORDORDEN.ERROR.FECHA_ASIGNACION_MEDIDOR);
                        isValida = false;
                        cr.setResult(CommonConstant.RESULT_WARNING);
                    }
                }
                if (orden.getFechaActualizacion() != null) {
                    Calendar fechaReanuda = Calendar.getInstance();
                    fechaReanuda.setTime(orden.getFechaActualizacion());
                    if (fechacumplimiento.getTime().compareTo(fechaReanuda.getTime()) < 0) {

                        cr.setResultMessage(CommonMessage.ORDORDEN.ERROR.FECHA_REANUDADA);
                        isValida = false;
                        cr.setResult(CommonConstant.RESULT_WARNING);
                    }
                }
                // }
                if (orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.CORTE || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.SUSPENSION_FALTA_PAGO) {
                    if (nucDatosTecnicos.getIdSistemaMedicion().getCodigo() != CommonConstant.NUCSISTEMAMEDICION.DIRECTA_SIN_MEDIDOR) {
                        if (recojoMedidor) {
                            if (ordOrden.getIndDesconexion() != null) {
                                if (ordOrden.getIndDesconexion().compareTo(orden.getIndDesconexion()) < 0) {
                                    cr.setResultMessage(CommonMessage.ORDORDEN.ERROR.INDICE_ENERGIA_MAYOR);
                                    isValida = false;
                                    cr.setResult(CommonConstant.RESULT_WARNING);
                                }
                            } else {
                                cr.setResultMessage(CommonMessage.ORDORDEN.ERROR.INDICE_ENERGIA_REQUERIDO);
                                isValida = false;
                                cr.setResult(CommonConstant.RESULT_WARNING);
                            }
                        }
                    }
                    OrdTipoOrden tipoOrdenRecon = ordTipoOrdenDao.findByCodigo(CommonConstant.ORDTIPOORDEN.RECONEXION);
                    OrdTipoOrden tipoOrdenRehab = ordTipoOrdenDao.findByCodigo(CommonConstant.ORDTIPOORDEN.REHABILITACION_FALTA_PAGO);

                    OrdOrden ultimaOrdenRecon = ordOrdenDao.findByConsumidorOrden(orden.getIdConsumidor().getId(), tipoOrdenRecon.getId(), orden.getId());
                    OrdOrden ultimaOrdenRehab = ordOrdenDao.findByConsumidorOrden(orden.getIdConsumidor().getId(), tipoOrdenRehab.getId(), orden.getId());

                    Calendar fechaUltimaOrdenRecon = Calendar.getInstance();
                    if (ultimaOrdenRecon != null) {
                        if (ultimaOrdenRecon.getIdEstado().getCodigo() != CommonConstant.ORDESTADO.ANULADA
                                && ultimaOrdenRecon.getIdEstado().getCodigo() != CommonConstant.ORDESTADO.CUMPLIDA
                                && ultimaOrdenRecon.getIdEstado().getCodigo() != CommonConstant.ORDESTADO.NO_REALIZADA
                                && ultimaOrdenRecon.getIdEstado().getCodigo() != CommonConstant.ORDESTADO.PENDIENTE_APLICACION_SISTEMA) {
                            fechaUltimaOrdenRecon.setTime(ultimaOrdenRecon.getFechaRegistro());
                            if (fechacumplimiento.getTime().compareTo(fechaUltimaOrdenRecon.getTime()) > 0) {
                                cr.setResultMessage(CommonMessage.ORDORDEN.ERROR.CORTE_FECHA_CORTE_INDEBIDO);
                                isValida = false;
                                cr.setResult(CommonConstant.RESULT_WARNING);
                            }
                        }
                    }
                    Calendar fechaUltimaOrdenRehab = Calendar.getInstance();
                    if (ultimaOrdenRehab != null) {
                        if (ultimaOrdenRehab.getIdEstado().getCodigo() != CommonConstant.ORDESTADO.ANULADA
                                && ultimaOrdenRehab.getIdEstado().getCodigo() != CommonConstant.ORDESTADO.CUMPLIDA
                                && ultimaOrdenRehab.getIdEstado().getCodigo() != CommonConstant.ORDESTADO.NO_REALIZADA
                                && ultimaOrdenRehab.getIdEstado().getCodigo() != CommonConstant.ORDESTADO.PENDIENTE_APLICACION_SISTEMA) {
                            fechaUltimaOrdenRehab.setTime(ultimaOrdenRehab.getFechaRegistro());

                            if (fechacumplimiento.getTime().compareTo(fechaUltimaOrdenRehab.getTime()) > 0) {
                                cr.setResultMessage(CommonMessage.ORDORDEN.ERROR.SUSPENSION_FECHA_CORTE_INDEBIDO);
                                isValida = false;
                                cr.setResult(CommonConstant.RESULT_WARNING);
                            }
                        }
                    }
                }
                //Valida tope de medidor
                if (nucDatosTecnicos.getIdSistemaMedicion().getCodigo() != CommonConstant.NUCSISTEMAMEDICION.DIRECTA_SIN_MEDIDOR) {
                    if (orden.getIdTipoOrden().getRetiraMedidor()) {
                        if (orden.getIdMedidorDesconexion() != null) {
                            MedCodigoMedidor medCodigoMedidor = medCodigoMedidorDao.findById(orden.getIdMedidorDesconexion().getIdCodigoMedidor().getId());
                            if (ordOrden.getIndDesconexion() != null) {
                                if (medCodigoMedidor.getEnergiaTope() != null) {
                                    BigDecimal topeMedidor = new BigDecimal(medCodigoMedidor.getEnergiaTope().trim().replace(",", "."));
                                    if (ordOrden.getIndDesconexion().compareTo(topeMedidor) > 0) {
                                        cr.setResultMessage(CommonMessage.ORDORDEN.ERROR.TOPE_MEDIDOR);
                                        isValida = false;
                                        cr.setResult(CommonConstant.RESULT_WARNING);
                                    }
                                }
                            }
                        }
                    }
                }
                if (orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.RECONEXION || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.REHABILITACION_FALTA_PAGO) {
                    if (ordOrden.getIndDesconexion() != null) {
                        if (ordOrden.getIndDesconexion().compareTo(orden.getIndConexion()) < 0) {
                            cr.setResultMessage(CommonMessage.ORDORDEN.ERROR.INDICE_ENERGIA_MAYOR);
                            isValida = false;
                            cr.setResult(CommonConstant.RESULT_WARNING);
                        }
                    }
                    OrdTipoOrden tipoOrdenCorte = ordTipoOrdenDao.findByCodigo(CommonConstant.ORDTIPOORDEN.CORTE);
                    OrdTipoOrden tipoOrdenSusp = ordTipoOrdenDao.findByCodigo(CommonConstant.ORDTIPOORDEN.SUSPENSION_FALTA_PAGO);

                    OrdOrden ultimaOrdenCorte = ordOrdenDao.findByConsumidorOrden(orden.getIdConsumidor().getId(), tipoOrdenCorte.getId(), orden.getId());
                    OrdOrden ultimaOrdenSusp = ordOrdenDao.findByConsumidorOrden(orden.getIdConsumidor().getId(), tipoOrdenSusp.getId(), orden.getId());

                    Calendar fechaUltimaOrdenCorte = Calendar.getInstance();
                    Boolean corteCumplida = false;
                    if (ultimaOrdenCorte != null) {
                        if (ultimaOrdenCorte.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.CUMPLIDA || ultimaOrdenCorte.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.PENDIENTE_APLICACION_SISTEMA) {
                            fechaUltimaOrdenCorte.setTime(ultimaOrdenCorte.getFechaCumplimiento());
                            corteCumplida = true;
                        }
                    }
                    Calendar fechaUltimaOrdenSusp = Calendar.getInstance();
                    Boolean suspensionCumplida = false;
                    if (ultimaOrdenSusp != null) {
                        if (ultimaOrdenSusp.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.CUMPLIDA || ultimaOrdenSusp.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.PENDIENTE_APLICACION_SISTEMA) {
                            fechaUltimaOrdenSusp.setTime(ultimaOrdenSusp.getFechaCumplimiento());
                            suspensionCumplida = true;

                        }
                    }

                    //switch (orden.getIdTipoOrden().getCodigo()) {
                    if (orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.RECONEXION) {

                        if (ultimaOrdenCorte != null) {
                            switch (ultimaOrdenCorte.getIdEstado().getCodigo()) {
                                case CommonConstant.ORDESTADO.CAMPO: {
                                    cr.setResultMessage(CommonMessage.ORDORDEN.ERROR.CORTE_NO_TRANSCRITO);
                                    isValida = false;
                                    cr.setResult(CommonConstant.RESULT_WARNING);
                                    break;
                                }
                                case CommonConstant.ORDESTADO.ANULADA: {
                                    cr.setResultMessage(CommonMessage.ORDORDEN.ERROR.RECONEXION_TRABAJO_EJECUTADO);
                                    isValida = false;
                                    cr.setResult(CommonConstant.RESULT_WARNING);
                                    break;
                                }
                                case CommonConstant.ORDESTADO.NO_REALIZADA: {
                                    cr.setResultMessage(CommonMessage.ORDORDEN.ERROR.RECONEXION_TRABAJO_EJECUTADO);
                                    isValida = false;
                                    cr.setResult(CommonConstant.RESULT_WARNING);
                                    break;
                                }
                                case CommonConstant.ORDESTADO.CUMPLIDA: {
                                    if (fechacumplimiento.getTime().compareTo(fechaUltimaOrdenCorte.getTime()) < 0) {
                                        cr.setResultMessage(CommonMessage.ORDORDEN.ERROR.RECONEXION_FECHA_CORTE_INDEBIDO);
                                        isValida = false;
                                        cr.setResult(CommonConstant.RESULT_WARNING);
                                    }
                                    if (fechaUltimaOrdenCorte.getTime().compareTo(fechaGeneracion.getTime()) > 0) {
                                        cr.setResultMessage(CommonMessage.ORDORDEN.ERROR.CORTE_FECHA_CORTE_INDEBIDO);
                                        isValida = false;
                                        cr.setResult(CommonConstant.RESULT_WARNING);
                                    }
                                    break;
                                }
                                case CommonConstant.ORDESTADO.PENDIENTE_APLICACION_SISTEMA: {
                                    if (fechacumplimiento.getTime().compareTo(fechaUltimaOrdenCorte.getTime()) < 0) {
                                        cr.setResultMessage(CommonMessage.ORDORDEN.ERROR.RECONEXION_FECHA_CORTE_INDEBIDO);
                                        isValida = false;
                                        cr.setResult(CommonConstant.RESULT_WARNING);
                                    }
                                    if (fechaUltimaOrdenCorte.getTime().compareTo(fechaGeneracion.getTime()) > 0) {
                                        cr.setResultMessage(CommonMessage.ORDORDEN.ERROR.CORTE_FECHA_CORTE_INDEBIDO);
                                        isValida = false;
                                        cr.setResult(CommonConstant.RESULT_WARNING);
                                    }
                                    isPendienteAplicacionOrdenAnt = true;
                                    break;
                                }
                            }
                        }

                        //Valida nivel de calidad
                        if (!motivoDemora) {
                            BigDecimal totalHoras = ordOrdenEstadosBean.calcularHoras(orden.getFechaRegistro(), ordOrden.getFechaCumplimiento(), 1);
                            switch (orden.getIdNivelCalidad().getCodigo()) {
                                case CommonConstant.NIVEL_CALIDAD.NIVEL_CALIDAD1: {
                                    if (totalHoras.compareTo(new BigDecimal(CommonConstant.TIEMPO_RECONEXION_NIVEL_CALIDAD.NIVEL_CALIDAD1)) > 0) {
                                        cr.setResultMessage(CommonMessage.ORDORDEN.ERROR.MOTIVO_DEMORA);
                                        isValida = false;
                                        cr.setResult(CommonConstant.RESULT_WARNING);
                                    }
                                    break;
                                }
                                case CommonConstant.NIVEL_CALIDAD.NIVEL_CALIDAD2: {
                                    if (totalHoras.compareTo(new BigDecimal(CommonConstant.TIEMPO_RECONEXION_NIVEL_CALIDAD.NIVEL_CALIDAD2)) > 0) {
                                        cr.setResultMessage(CommonMessage.ORDORDEN.ERROR.MOTIVO_DEMORA);
                                        isValida = false;
                                        cr.setResult(CommonConstant.RESULT_WARNING);
                                    }
                                    break;
                                }
                            }
                        }
                        // break;

                    }

                    //case CommonConstant.ORDTIPOORDEN.REHABILITACION: {
                    if (orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.REHABILITACION_FALTA_PAGO) {
                        if (ultimaOrdenCorte != null && !suspensionCumplida) {
                            switch (ultimaOrdenCorte.getIdEstado().getCodigo()) {

                                case CommonConstant.ORDESTADO.ANULADA: {
                                    cr.setResultMessage(CommonMessage.ORDORDEN.ERROR.REHABILITACION_TRABAJO_EJECUTADO);
                                    isValida = false;
                                    cr.setResult(CommonConstant.RESULT_WARNING);
                                    break;
                                }
                                case CommonConstant.ORDESTADO.NO_REALIZADA: {
                                    cr.setResultMessage(CommonMessage.ORDORDEN.ERROR.REHABILITACION_TRABAJO_EJECUTADO);
                                    isValida = false;
                                    cr.setResult(CommonConstant.RESULT_WARNING);
                                    break;
                                }
                            }
                        }
                        if (ultimaOrdenSusp != null) {
                            switch (ultimaOrdenSusp.getIdEstado().getCodigo()) {
                                case CommonConstant.ORDESTADO.CAMPO: {
                                    cr.setResultMessage(CommonMessage.ORDORDEN.ERROR.SUSPENSION_NO_TRANSCRITO);
                                    isValida = false;
                                    cr.setResult(CommonConstant.RESULT_WARNING);
                                    break;
                                }
                                case CommonConstant.ORDESTADO.ANULADA: {
                                    if (ultimaOrdenCorte != null && ultimaOrdenCorte.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.CUMPLIDA) {

                                    } else {
                                        cr.setResultMessage(CommonMessage.ORDORDEN.ERROR.REHABILITACION_TRABAJO_EJECUTADO);
                                        isValida = false;
                                        cr.setResult(CommonConstant.RESULT_WARNING);
                                    }
                                    break;
                                }
                                case CommonConstant.ORDESTADO.NO_REALIZADA: {
                                    if (ultimaOrdenCorte != null && ultimaOrdenCorte.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.CUMPLIDA) {

                                    } else {
                                        cr.setResultMessage(CommonMessage.ORDORDEN.ERROR.REHABILITACION_TRABAJO_EJECUTADO);
                                        isValida = false;
                                        cr.setResult(CommonConstant.RESULT_WARNING);
                                    }
                                    break;
                                }
                                case CommonConstant.ORDESTADO.CUMPLIDA: {
                                    if (fechacumplimiento.getTime().compareTo(fechaUltimaOrdenSusp.getTime()) < 0) {
                                        cr.setResultMessage(CommonMessage.ORDORDEN.ERROR.REHABILITACION_FECHA_CORTE_INDEBIDO);
                                        isValida = false;
                                        cr.setResult(CommonConstant.RESULT_WARNING);
                                    }
                                    if (fechaUltimaOrdenSusp.getTime().compareTo(fechaGeneracion.getTime()) > 0) {
                                        cr.setResultMessage(CommonMessage.ORDORDEN.ERROR.SUSPENSION_FECHA_CORTE_INDEBIDO);
                                        isValida = false;
                                        cr.setResult(CommonConstant.RESULT_WARNING);
                                    }
                                    //VALIDA SI TIENE UN MEDIDOR  Y ES EL MISMO QUE EL DE LA REHABILITACION
                                    if (nucDatosTecnicos.getIdSistemaMedicion().getCodigo() != CommonConstant.NUCSISTEMAMEDICION.DIRECTA_SIN_MEDIDOR) {
                                        if (ultimaOrdenSusp.getIdMedidorDesconexion().getId().compareTo(orden.getIdMedidorConexion().getId()) == 0) {
                                            orden.setIndConexion(ultimaOrdenSusp.getIndDesconexion());
                                        }
                                    }
                                    //VALIDA QUE TENGA INDICE CUANDO ES DIFERENTE DE CORTADO DEL POSTE
                                    OrdOrdenInforme ordOrdenInforme = ordOrdenInformeDao.findByIdOrdenInformeTipoTrabajo(ultimaOrdenSusp.getId());
                                    if (ordOrdenInforme != null) {
                                        if (ordOrdenInforme.getIdInforme().getCodigo() != CommonConstant.TIPOTRABAJO.CORTADO_POSTE && ordOrdenInforme.getIdInforme().getCodigo() != CommonConstant.TIPOTRABAJO.RECOJO_MEDIDOR) {
                                            if (ordOrden.getIndDesconexion() == null) {
                                                cr.setResultMessage(CommonMessage.ORDORDEN.ERROR.REHABILITACION_INDICE);
                                                isValida = false;
                                                cr.setResult(CommonConstant.RESULT_WARNING);
                                            }
                                        }
                                    }

                                    break;
                                }
                                case CommonConstant.ORDESTADO.PENDIENTE_APLICACION_SISTEMA: {

                                    if (fechacumplimiento.getTime().compareTo(fechaUltimaOrdenSusp.getTime()) < 0) {
                                        cr.setResultMessage(CommonMessage.ORDORDEN.ERROR.REHABILITACION_FECHA_CORTE_INDEBIDO);
                                        isValida = false;
                                        cr.setResult(CommonConstant.RESULT_WARNING);
                                    }
                                    if (fechaUltimaOrdenSusp.getTime().compareTo(fechaGeneracion.getTime()) > 0) {
                                        cr.setResultMessage(CommonMessage.ORDORDEN.ERROR.SUSPENSION_FECHA_CORTE_INDEBIDO);
                                        isValida = false;
                                        cr.setResult(CommonConstant.RESULT_WARNING);
                                    }
                                    isPendienteAplicacionOrdenAnt = true;

                                    //VALIDA SI TIENE UN MEDIDOR REGOGIDO Y ES EL MISMO QUE EL DE LA REHABILITACION
                                    OrdOrdenInforme ordOrdenInforme = ordOrdenInformeDao.findByIdOrdenInforme(ultimaOrdenSusp.getId(), et.com.ejb.cyr.data.CommonConstant.TIPOTRABAJO.RECOJO_MEDIDOR);
                                    if (ordOrdenInforme != null) {
                                        if (ultimaOrdenSusp.getIdMedidorDesconexion().getId().compareTo(orden.getIdMedidorConexion().getId()) == 0) {
                                            orden.setIndConexion(ultimaOrdenSusp.getIndDesconexion());
                                        }
                                    } else {
                                        if (ultimaOrdenSusp.getIdMedidorDesconexion().getId().compareTo(orden.getIdMedidorConexion().getId()) == 0) {
                                            orden.setIndConexion(ultimaOrdenSusp.getIndDesconexion());
                                        }
                                    }
                                    //VALIDA QUE TENGA INDICE CUANDO ES DIFERENTE DE CORTADO DEL POSTE
                                    OrdOrdenInforme ordOrdenInformeSusp = ordOrdenInformeDao.findByIdOrdenInformeTipoTrabajo(ultimaOrdenSusp.getId());
                                    if (ordOrdenInforme != null) {
                                        if (ordOrdenInforme.getIdInforme().getCodigo() != CommonConstant.TIPOTRABAJO.CORTADO_POSTE) {
                                            if (ordOrden.getIndDesconexion() == null) {
                                                cr.setResultMessage(CommonMessage.ORDORDEN.ERROR.REHABILITACION_INDICE);
                                                isValida = false;
                                                cr.setResult(CommonConstant.RESULT_WARNING);
                                            }
                                        }
                                    }
                                    break;
                                }
                            }
                        }

                        if (!isPendienteAplicacionOrdenAnt && nucServicio.getIdEstado().getCodigo() == CommonConstant.NUCESTADOS.CONECTADO) {
                            cr.setResultMessage(CommonMessage.ORDORDEN.ERROR.CONSUMIDOR_CONECTADO);
                            isValida = false;
                            cr.setResult(CommonConstant.RESULT_WARNING);
                        }

                        //Valida nivel de calidad
                        if (!motivoDemora) {
                            BigDecimal totalHoras = ordOrdenEstadosBean.calcularHoras(orden.getFechaRegistro(), ordOrden.getFechaCumplimiento(), 1);
                            switch (orden.getIdNivelCalidad().getCodigo()) {
                                case CommonConstant.NIVEL_CALIDAD.NIVEL_CALIDAD1: {
                                    if (totalHoras.compareTo(new BigDecimal(CommonConstant.TIEMPO_RECONEXION_NIVEL_CALIDAD.NIVEL_CALIDAD1)) > 0) {
                                        cr.setResultMessage(CommonMessage.ORDORDEN.ERROR.MOTIVO_DEMORA);
                                        isValida = false;
                                        cr.setResult(CommonConstant.RESULT_WARNING);
                                    }
                                    break;
                                }
                                case CommonConstant.NIVEL_CALIDAD.NIVEL_CALIDAD2: {
                                    if (totalHoras.compareTo(new BigDecimal(CommonConstant.TIEMPO_RECONEXION_NIVEL_CALIDAD.NIVEL_CALIDAD2)) > 0) {
                                        cr.setResultMessage(CommonMessage.ORDORDEN.ERROR.MOTIVO_DEMORA);
                                        isValida = false;
                                        cr.setResult(CommonConstant.RESULT_WARNING);
                                    }
                                    break;
                                }
                            }
                        }
                        // break;
                        // }
                    }
                }
            }

        } catch (Exception e) {
            cr.setResult(CommonConstant.RESULT_ERROR);
            cr.setResultMessage(e.getMessage());
            e.printStackTrace();
        }
        return cr;

    }

    public CommonResponse asignaSectorDestino(OrdOrden orden, int ordEstado) {
        cr = new CommonResponse();

        Boolean isValida = true;
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        try {
            if (orden != null) {
                NucArea nucArea = orden.getIdConsumidor().getIdRuta().getIdRemesa().getIdArea();
                NucServicio nucServicio = nucServicioDao.findByIdConsumidor(orden.getIdConsumidor().getId(), CommonConstant.NUCTIPOSERVICIO.ENERGIA);
                NucDatosTecnicos NucDatosTecnicos = nucDatosTecnicosDao.findByIdServicio(nucServicio.getId());
                Boolean asignaCTPT = false;
                if (NucDatosTecnicos.getIdSistemaMedicion().getCodigo() == CommonConstant.NUCSISTEMAMEDICION.INDIRECTA_CON_MEDIDOR_CT_PT || NucDatosTecnicos.getIdSistemaMedicion().getCodigo() == CommonConstant.NUCSISTEMAMEDICION.SEMIDIRECTA_CON_MEDIDOR_CT) {
                    asignaCTPT = true;
                }
                //AtcEstadosSector atcEstadosSector = atcEstadosSectorDao.getSectorDestinoAtec(nucArea.getId(), orden.getIdEstado().getId(), solEstado.getId(), null, null, false, false);
                OrdEstado ordEstados = ordEstadoDao.findByCodigoEstado(ordEstado);
                switch (ordEstado) {
                    case CommonConstant.ORDESTADO.REVISADA: {
                        AtcEstadosSector atcEstadosSector = atcEstadosSectorDao.getSectorDestinoAtec(nucArea.getId(), null, null, orden.getIdEstado().getId(), ordEstados.getId(), orden.getIdTipoOrden().getAsignaMedidor(), asignaCTPT);
                        break;
                    }
                    case CommonConstant.ORDESTADO.CAMPO: {
                        AtcEstadosSector atcEstadosSector = atcEstadosSectorDao.getSectorDestinoAtec(nucArea.getId(), null, null, orden.getIdEstado().getId(), ordEstados.getId(), orden.getIdTipoOrden().getAsignaMedidor(), asignaCTPT);
                        break;
                    }
                    case CommonConstant.ORDESTADO.CUMPLIDA: {
                        AtcEstadosSector atcEstadosSector = atcEstadosSectorDao.getSectorDestinoAtec(nucArea.getId(), null, null, orden.getIdEstado().getId(), ordEstados.getId(), orden.getIdTipoOrden().getAsignaMedidor(), asignaCTPT);
                        break;
                    }
                    case CommonConstant.ORDESTADO.PENDIENTE_APLICACION_SISTEMA: {
                        AtcEstadosSector atcEstadosSector = atcEstadosSectorDao.getSectorDestinoAtec(nucArea.getId(), null, null, orden.getIdEstado().getId(), ordEstados.getId(), orden.getIdTipoOrden().getAsignaMedidor(), asignaCTPT);
                        break;
                    }
                }
            } else {
                cr.setResult(GlobalConstant.RESULT_ERROR);
                cr.setResultMessage(CommonMessage.GLOBAL.ERROR.EMPTY_INPUT);
            }
        } catch (Exception e) {
            cr.setResult(CommonConstant.RESULT_ERROR);
            cr.setResultMessage(e.getMessage());
            e.printStackTrace();
        }
        return cr;
    }

    public CommonResponse printOrdenCorteReconexionMasivaDetalle(CommonInput input) {
        cr = new CommonResponse();
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        try {
            OrdCorteReconexionDto ordCorteReconexionDto = input.getOrdCorteReconexionDto();
            if (ordCorteReconexionDto != null) {
                Boolean print = false;
                String pathExportPdf = CommonConstant.BASE_PATH_TMP + formatDate.format(calendar.getTime()) + ".pdf";

                print = this.printOrdenCorteReconexionMasivaDetalle(ordCorteReconexionDto, pathExportPdf);

                if (print) {
                    cr.setBase64(Utils.getFileBase64(pathExportPdf));
                    cr.setResult(GlobalConstant.RESULT_SUCCESS);
                    cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.SUCCESS);

                } else {
                    cr.setResult(CommonConstant.RESULT_WARNING);
                    cr.setResultMessage(String.format(CommonMessage.ORDORDEN.WARNING.ORDEN_IMPRESION));
                }
            } else {
                cr.setResult(GlobalConstant.RESULT_ERROR);
                cr.setResultMessage(CommonMessage.GLOBAL.ERROR.EMPTY_INPUT);
            }

        } catch (Exception e) {
            cr.setResult(CommonConstant.RESULT_ERROR);
            cr.setResultMessage(e.getMessage());
            e.printStackTrace();
        }
        return cr;
    }

    public Boolean printOrdenCorteReconexionMasivaDetalle(OrdCorteReconexionDto ordCorteReconexionDto, String pathExportPdf) {
        HashMap hm = null;
        Connection conn = null;
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        try {
            conn = Utils.getConnection();

            JasperCompileManager.compileReportToFile(CommonConstant.basePathJrxml + "OrdenCorteDetalle-v0.1.jrxml", CommonConstant.basePathJrxml + "OrdenCorteDetalle-v0.1.jasper");
            hm = new HashMap();
            hm.put("idSectorDestino", ordCorteReconexionDto.getIdSectorDestino());
            hm.put("idTipoOrden", ordCorteReconexionDto.getIdTipoOrden());
            hm.put("fechaAlta", ordCorteReconexionDto.getFechaAlta());
            hm.put("fechaAltaFin", ordCorteReconexionDto.getFechaAltaFin());
            hm.put("fechaEstimada", ordCorteReconexionDto.getFechaEstimadaCorte());
            hm.put("fechaEstimadaFin", ordCorteReconexionDto.getFechaEstimadaCorteFin());
            if (ordCorteReconexionDto.getIdRutaDesde() != null) {
                hm.put("idRutaDesde", ordCorteReconexionDto.getIdRutaDesde());
            } else {
                hm.put("idRutaDesde", 0);
            }
            if (ordCorteReconexionDto.getIdRutaHasta() != null) {
                hm.put("idRutaHasta", ordCorteReconexionDto.getIdRutaHasta());
            } else {
                hm.put("idRutaHasta", 999999999);
            }
            hm.put("estPendiente", CommonConstant.ORDESTADO.PENDIENTE);
            hm.put("estCampo", CommonConstant.ORDESTADO.CAMPO);
            hm.put("estRevisada", CommonConstant.ORDESTADO.REVISADA);

            JasperPrint jprint = (JasperPrint) JasperFillManager.fillReport(CommonConstant.basePathJrxml + "OrdenCorteDetalle-v0.1.jasper", hm, conn);
            JasperExportManager.exportReportToPdfFile(jprint, pathExportPdf);

            return true;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        } finally {
            Utils.closeConnection(conn);
        }
    }

    public CommonResponse ejecutarOrdenRutaCritica() {
        cr = cumpleOrdenRutaCritica(null);
        return cr;
    }

    public CommonResponse ejecutarOrdenRutaCritica(NucConsumidor consumidor) {
        CommonInput request = new CommonInput();
        request.setNucConsumidor(consumidor);
        cr = cumpleOrdenRutaCritica(request);
        return cr;
    }

    public CommonResponse cumpleOrdenRutaCritica(CommonInput request) {
        cr = new CommonResponse();
        cr.setResult(GlobalConstant.RESULT_ERROR);
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        Boolean isUpdateOrden = false;
        Boolean isUpdateServicio = true;
        Boolean isUpdateMedidor = true;
        Boolean isUpdateMedidorDes = true;

        Integer ordEstado = 0;
        Boolean recojoMedidor = false;
        Boolean isUpdateCt = true;
        Boolean isUpdatePt = true;
        Boolean isActualizaMedidor = true;
        try {
            //List<OrdOrden> ordenList = ordOrdenDao.ordOrdenListCodigoEstadoCampo(CommonConstant.ORDESTADO.PENDIENTE_APLICACION_SISTEMA);
            List<OrdOrden> ordenList;
            if (request != null) {
                ordenList = new ArrayList<>();
                if (request.getOrdOrden() != null) {

                    OrdOrden forceOrden = ordOrdenDao.findByCodigoOrden(request.getOrdOrden().getCodigo());
                    ordenList.add(forceOrden);
                } else {

                    ordenList = ordOrdenDao.ordOrdenListCodigoEstadoCampoRC(CommonConstant.ORDESTADO.PENDIENTE_APLICACION_SISTEMA, request.getNucConsumidor().getId());

                }

            } else {
                ordenList = ordOrdenDao.ordOrdenListCodigoEstadoCampoRC(CommonConstant.ORDESTADO.PENDIENTE_APLICACION_SISTEMA);
            }

            for (OrdOrden orden : ordenList) {
                isUpdateOrden = false;
                isUpdateServicio = true;
                isUpdateMedidor = true;
                isUpdateMedidorDes = true;

                ordEstado = 0;
                recojoMedidor = false;
                isUpdateCt = true;
                isUpdatePt = true;

                isActualizaMedidor = true;
                MedEstado updateEstadoMedidor = null;
                //Verifica si existe RECOJO DE MEDIDOR
                List<OrdOrdenInforme> ordOrdenInformeList = ordOrdenInformeDao.getOrdenInforme(orden.getId());
                if (ordOrdenInformeList != null && !ordOrdenInformeList.isEmpty()) {
                    for (OrdOrdenInforme newOrdOrdenInforme : ordOrdenInformeList) {
                        OrdInforme ordInforme = ordInformeDao.findById(newOrdOrdenInforme.getIdInforme().getId());

                        if (ordInforme.getTipoTrabajo() && (ordInforme.getCodigo() == CommonConstant.TIPOTRABAJO.RECOJO_MEDIDOR || ordInforme.getCodigo() == CommonConstant.TIPOTRABAJO.MEDIDOR_PERDIDO)) {
                            recojoMedidor = true;
                        }

                        if (orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.REHABILITACION_FALTA_PAGO
                                || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.REHABILITACION
                                || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.REHABILITACION_INTERNA) {
                            List<OrdOrdenEstado> ordenEstadoList = ordOrdenEstadosDao.getOrdenEstado(orden.getId(), CommonConstant.ORDESTADO.REVISADA);

                            if (ordenEstadoList != null && !ordenEstadoList.isEmpty()) {
                                recojoMedidor = true;

                            }

                        }
                        if (ordInforme.getTipoTrabajo()) {
                            updateEstadoMedidor = ordInforme.getIdEstadoMedidor();

                        }
                    }
                }
                //Verifica si la orden fue generada desde una solicitud y si es del modulo de cortes y reconexiones
                SolSolicitudOrden solSolicitudOrden = solSolicitudOrdenDao.findByIdOrden(orden.getId());
                if (solSolicitudOrden != null || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.CORTE
                        || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.RECONEXION
                        || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.SUSPENSION_FALTA_PAGO
                        || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.REHABILITACION_FALTA_PAGO
                        || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.REHABILITACION_INTERNA
                        || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.CAMBIO_ACOMETIDA_INTERNA) {
                    Boolean isRutaCritica = this.validaRutaCritica(orden.getIdConsumidor().getIdRuta().getIdRemesa().getId());
                    if (request != null) {
                        isRutaCritica = false;
                    }
                    if (!isRutaCritica && orden.getIdSectorDestino() != null) {

                        UsuarioDto usuarioDto = new UsuarioDto();
                        usuarioDto.setId_usuario_security(orden.getUsuarioActualizacion());
                        usuarioDto.setId_sector(orden.getIdSectorDestino().getId());

                        NucServicio nucServicio = nucServicioDao.findByIdConsumidor(orden.getIdConsumidor().getId(), CommonConstant.NUCTIPOSERVICIO.ENERGIA);
                        NucDatosTecnicos nucDatosTecnicos = nucDatosTecnicosDao.findByIdServicio(nucServicio.getId());
                        ordEstado = CommonConstant.ORDESTADO.CUMPLIDA;
                        OrdTipoOrden tipoOrden = orden.getIdTipoOrden();
                        MedMedidor medidor = orden.getIdMedidorConexion();
                        MedMedidor medidorDes = orden.getIdMedidorDesconexion();

                        if (orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.REHABILITACION || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.REHABILITACION_FALTA_PAGO) { //Preguntar sobre los indices
                            //Actualiza fecha de ultimo indice y activo
                            //Solo se actualiza al cambio de medidor
                        }
                        if (orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.CORTE || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.SUSPENSION_FALTA_PAGO) {
                            //ANTES DE ACTUALIZAR EL ESTADO VERIFICAR QUE NO EXISTA UNA RECONEXION CUMPLIDA
//                            List<Object[]> lista = ordOrdenDao.getReconRehabPosterior(orden.getCodigo(), CommonConstant.ORDESTADO.CUMPLIDA, CommonConstant.ORDTIPOORDEN.RECONEXION, CommonConstant.ORDTIPOORDEN.REHABILITACION_FALTA_PAGO);
//                            if (lista.size() == 0) {
                            //Actualiza el estado del servicio
                            isUpdateServicio = updateEstadoServicio(orden, tipoOrden, usuarioDto);
//                            }
                        } else {
                            if (orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.RECONEXION || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.REHABILITACION_FALTA_PAGO) {
                                //ANTES DE ACTUALIZAR EL ESTADO VERIFICAR QUE NO EXISTA UNA CORTE CUMPLIDA
//                                List<Object[]> lista = ordOrdenDao.getReconRehabPosterior(orden.getCodigo(), CommonConstant.ORDESTADO.CUMPLIDA, CommonConstant.ORDTIPOORDEN.CORTE, CommonConstant.ORDTIPOORDEN.SUSPENSION_FALTA_PAGO);
//                                if (lista.size() == 0) {
                                //Actualiza el estado del servicio
                                isUpdateServicio = updateEstadoServicio(orden, tipoOrden, usuarioDto);
//                                }
                            } else {
                                //Actualiza el estado del servicio
                                isUpdateServicio = updateEstadoServicio(orden, tipoOrden, usuarioDto);
                            }
                        }
//                        if (orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.CONTRATO_NUEVO) {
//                            recojoMedidor = true;
//                        }

                        if (orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.CONTRATO_NUEVO || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.REHABILITACION_FALTA_PAGO
                                || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.REHABILITACION
                                || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.REHABILITACION_INTERNA
                                || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.INSTALACION_MEDIDOR) {
                            List<OrdOrdenEstado> ordenEstadoList = ordOrdenEstadosDao.getOrdenEstado(orden.getId(), CommonConstant.ORDESTADO.REVISADA);

                            if (ordenEstadoList != null && !ordenEstadoList.isEmpty()) {
                                recojoMedidor = true;

                            }
                        }

                        OrdAsignaEquipo ordAsignaEquipo = ordAsignaEquipoDao.findByIdOrden(orden.getId());

                        //Actualiza el multiplicador del medidor
                        if (medidor != null && ordAsignaEquipo != null) {

                            medidor.setMultiplicadorCalculado(orden.getMultiplicadorCalculado());
                            medMedidorDao.update(medidor);
                        }
                        Boolean isUpdateMedidorGDI = false;
                        Boolean isUpdateMedidorControl = false;

                        if (orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.CONTRATO_NUEVO_GDI) {
                            isUpdateMedidorGDI = this.updateServicioMedidor(orden, tipoOrden, medidor, ordEstado, 'C', usuarioDto);

                            Integer idConsumidor = orden.getIdConsumidor().getId();
                            OrdOrden ordenControl = ordOrdenDao.findByOrdenInstalacionControlGdi(idConsumidor);
                            MedMedidor medidorControl = ordenControl.getIdMedidorConexion();
                            isUpdateMedidorControl = this.updateServicioMedidor(ordenControl, tipoOrden, medidorControl, ordEstado, 'C', usuarioDto);
                        }

                        //Actualizar medidores y Actualiza historico de medidor 
                        if (orden.getIdTipoOrden().getAsignaMedidor() && !orden.getIdTipoOrden().getRetiraMedidor() && recojoMedidor) {
                            NucServicioMedidor nucServicioMedidorCon = nucServicioMedidorDao.findByMedidorConectadoMedidor(nucServicio.getId(), medidor.getId());
                            if (nucServicioMedidorCon == null) {
                                isUpdateMedidor = this.updateServicioMedidor(orden, tipoOrden, medidor, ordEstado, 'C', usuarioDto);
                            }
                            if (ordAsignaEquipo != null) {
                                if (ordAsignaEquipo.getIdMedCt() != null && ordAsignaEquipo.getIdMedCt().getId() != null) {
                                    isUpdateCt = this.updateCT(orden, tipoOrden, ordAsignaEquipo, ordEstado, 'C', usuarioDto);
                                }
                                if (ordAsignaEquipo.getIdMedPt() != null && ordAsignaEquipo.getIdMedPt().getId() != null) {
                                    isUpdatePt = this.updatePT(orden, tipoOrden, ordAsignaEquipo, ordEstado, 'C', usuarioDto);
                                }
                            }
                        }

                        //TIPO DE ORDEN DE CAMBIO DE MEDIDOR 
//                        if (orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.CAMBIO_MEDIDOR) {
//                            //ANTES DE ACTUALIZAR EL ESTADO VERIFICAR QUE NO EXISTA UNA CAMBIO DE MEDIDOR CUMPLIDA
//                            List<Object[]> lista = ordOrdenDao.getObtenerOrdenPosterior(orden.getId(), CommonConstant.ORDESTADO.CUMPLIDA, CommonConstant.ORDTIPOORDEN.CAMBIO_MEDIDOR);
//                            if (lista.size() > 0) {
//                                isActualizaMedidor = false;
//                            }
//                        }
                        if (isActualizaMedidor && orden.getIdTipoOrden().getAsignaMedidor() && orden.getIdTipoOrden().getRetiraMedidor() && nucDatosTecnicos.getIdSistemaMedicion().getCodigo() != CommonConstant.NUCSISTEMAMEDICION.DIRECTA_SIN_MEDIDOR) {
                            NucServicioMedidor nucServicioMedidorDes = nucServicioMedidorDao.findByMedidor(medidorDes.getId());
                            NucLecturaMedidor nucLecturaMedidor = new NucLecturaMedidor();
                            if (nucServicioMedidorDes != null) {
                                nucLecturaMedidor = nucLecturaMedidorDao.findByServicioMedidor(nucServicioMedidorDes.getId());
                            }
                            Date fechaUltimoIndiceDes = new Date();
                            //CAMBIO DE MEDIDOR  - REGISTRA CONSUMO ADICIONAL
                            if (nucLecturaMedidor != null && nucLecturaMedidor.getIndiceUltimo() != null) {
                                fechaUltimoIndiceDes = nucLecturaMedidor.getFechaUltimoIndice();
                                //Actualiza el multiplicador calculado del medidor de desconexion
                                if (medidorDes.getMultiplicadorCalculado() == null) {
                                    MedCodigoMedidor medCodigoMedidor = medCodigoMedidorDao.findById(medidorDes.getIdCodigoMedidor().getId());

                                    BigDecimal multiplicadorCalculadoMedDesc = medCodigoMedidor.getConstantePropia();
                                    if (multiplicadorCalculadoMedDesc.compareTo(new BigDecimal(0)) == 0) {
                                        multiplicadorCalculadoMedDesc = new BigDecimal(1);
                                    } else if (multiplicadorCalculadoMedDesc == null) {
                                        NucServicioCt nucServicioCt = nucServicioCtDao.findConectadoByIdServicio(nucServicio.getId());
                                        NucServicioPt nucServicioPt = nucServicioPtDao.findConectadoByIdServicio(nucServicio.getId());

                                        if (nucServicioCt != null && nucServicioCt.getIdCt().getId() != null) {
                                            MedCt ct = medCtDao.findById(nucServicioCt.getIdCt().getId());
                                            multiplicadorCalculadoMedDesc = multiplicadorCalculadoMedDesc.multiply(ct.getRelacion());
                                        }
                                        if (nucServicioPt != null && nucServicioPt.getIdPt().getId() != null) {
                                            MedPt pt = medPtDao.findById(nucServicioPt.getIdPt().getId());
                                            multiplicadorCalculadoMedDesc = multiplicadorCalculadoMedDesc.multiply(pt.getRelacion());
                                        }

                                    }
                                    medidorDes.setMultiplicadorCalculado(multiplicadorCalculadoMedDesc);
                                    medMedidorDao.update(medidorDes);
                                }
                                //CONSUMO ADICIONAL
                                NucNivelDemanda nucNivelDemanda = nucNivelDemandaDao.findById(nucServicio.getIdCategoria().getIdNivelDemanda().getId());
                                if (nucNivelDemanda.getCodigo() == CommonConstant.NIVEL_DEMANDA.PEQUENA || nucNivelDemanda.getCodigo() == CommonConstant.NIVEL_DEMANDA.MEDIANA) {
                                    BigDecimal consumoAdicional = lecInformacionAdicionalBean.calcularConsumo(medidorDes.getId(), nucLecturaMedidor.getIndiceUltimo(), orden.getIndDesconexion());
                                    if (consumoAdicional.compareTo(new BigDecimal(0)) > 0) {
                                        int tipo = LecturasParametros.TipoMedKwhAdicionales.CAMBIO_MEDIDOR;
                                        MedKwhAdicionales medKwhAdicionales = new MedKwhAdicionales();
                                        medKwhAdicionales.setIdConsumidor(orden.getIdConsumidor());
                                        medKwhAdicionales.setIdMedidor(medidorDes);//medidor
                                        medKwhAdicionales.setKwhAdicionales(consumoAdicional);
                                        medKwhAdicionales.setEstado(FacturacionParametros.EstadoKWhAdicionales.PENDIENTE.toString());
                                        medKwhAdicionales.setFechaActualizacion(calendar.getTime());
                                        medKwhAdicionales.setFechaRegistro(calendar.getTime());
                                        medKwhAdicionales.setUsuarioActualizacion(orden.getUsuarioActualizacion());
                                        medKwhAdicionales.setUsuarioRegistro(orden.getUsuarioActualizacion());
                                        medKwhAdicionales.setTipo(tipo);
                                        medKwhAdicionales.setIdOrden(orden.getId());

                                        medKwhAdicionalesDao.create(medKwhAdicionales);
                                    }
                                }
                                if (nucNivelDemanda.getCodigo() == CommonConstant.NIVEL_DEMANDA.GRANDEMANDA) {
                                    BigDecimal ultimoIndiceLectura = nucLecturaMedidor.getIndiceUltimo() == null ? new BigDecimal(0) : nucLecturaMedidor.getIndiceUltimo();
                                    BigDecimal ultimoIndiceBA = nucLecturaMedidor.getIndiceBloqueAltoUltimo() == null ? new BigDecimal(0) : nucLecturaMedidor.getIndiceBloqueAltoUltimo();
                                    BigDecimal ultimoIndiceBM = nucLecturaMedidor.getIndiceBloqueMedioUltimo() == null ? new BigDecimal(0) : nucLecturaMedidor.getIndiceBloqueMedioUltimo();
                                    BigDecimal ultimoIndiceBB = nucLecturaMedidor.getIndiceBloqueBajoUltimo() == null ? new BigDecimal(0) : nucLecturaMedidor.getIndiceBloqueBajoUltimo();
                                    BigDecimal indiceUltimoTotal = new BigDecimal(0);
                                    if (ultimoIndiceLectura.compareTo(new BigDecimal(0)) == 0) {
                                        indiceUltimoTotal = ultimoIndiceBA.add(ultimoIndiceBM).add(ultimoIndiceBB);
                                    } else {
                                        indiceUltimoTotal = ultimoIndiceLectura;
                                    }

                                    BigDecimal indiceBA = orden.getEnergiaBloqueAlto() == null ? new BigDecimal(0) : orden.getEnergiaBloqueAlto();
                                    BigDecimal indiceBM = orden.getEnergiaBloqueMedio() == null ? new BigDecimal(0) : orden.getEnergiaBloqueMedio();
                                    BigDecimal indiceBB = orden.getEnergiaBloqueBajo() == null ? new BigDecimal(0) : orden.getEnergiaBloqueBajo();

                                    BigDecimal indiceTotal = new BigDecimal(0);

                                    if (orden.getIndDesconexion().compareTo(new BigDecimal(0)) == 0) {
                                        indiceTotal = indiceBA.add(indiceBM).add(indiceBB);
                                    } else {
                                        indiceTotal = orden.getIndDesconexion();
                                    }
                                    Integer idCategoria = nucServicio.getIdCategoria().getId();

                                    HashMap consumoAdicionalGD = lecInformacionAdicionalBean.calcularConsumoGD(idCategoria, medidorDes.getId(), indiceUltimoTotal, ultimoIndiceBA,
                                            ultimoIndiceBM, ultimoIndiceBB, indiceTotal, indiceBA, indiceBM, indiceBB);
                                    BigDecimal consumo = new BigDecimal(consumoAdicionalGD.get("consumo").toString());
                                    BigDecimal consumoAlto = new BigDecimal(consumoAdicionalGD.get("consumoAlto").toString());
                                    BigDecimal consumoMedio = new BigDecimal(consumoAdicionalGD.get("consumoMedio").toString());
                                    BigDecimal consumoBajo = new BigDecimal(consumoAdicionalGD.get("consumoBajo").toString());
                                    if (consumo.compareTo(new BigDecimal(0)) > 0 || consumoAlto.compareTo(new BigDecimal(0)) > 0 || consumoMedio.compareTo(new BigDecimal(0)) > 0 || consumoBajo.compareTo(new BigDecimal(0)) > 0) {

                                        int tipo = LecturasParametros.TipoMedKwhAdicionales.CAMBIO_MEDIDOR;
                                        MedKwhAdicionales medKwhAdicionales = new MedKwhAdicionales();
                                        medKwhAdicionales.setIdConsumidor(orden.getIdConsumidor());
                                        medKwhAdicionales.setIdMedidor(medidorDes);//medidor
                                        medKwhAdicionales.setKwhAdicionales(consumo);
                                        medKwhAdicionales.setKwhAdicionalesBa(consumoAlto);
                                        medKwhAdicionales.setKwhAdicionalesBb(consumoMedio);
                                        medKwhAdicionales.setKwhAdicionalesBb(consumoBajo);
                                        medKwhAdicionales.setEstado(FacturacionParametros.EstadoKWhAdicionales.PENDIENTE.toString());
                                        medKwhAdicionales.setFechaActualizacion(calendar.getTime());
                                        medKwhAdicionales.setFechaRegistro(calendar.getTime());
                                        medKwhAdicionales.setUsuarioRegistro(orden.getUsuarioActualizacion());
                                        medKwhAdicionales.setUsuarioActualizacion(orden.getUsuarioActualizacion());
                                        medKwhAdicionales.setIdOrden(orden.getId());
                                        medKwhAdicionales.setTipo(tipo);
                                        medKwhAdicionalesDao.create(medKwhAdicionales);
                                    }
                                }

                            }

                            isUpdateMedidorDes = this.updateServicioMedidor(orden, tipoOrden, medidorDes, ordEstado, 'D', usuarioDto);
                            isUpdateMedidor = this.updateMedidor(orden, tipoOrden, medidor, ordEstado, 'C', usuarioDto, fechaUltimoIndiceDes);

                            //Si tiene equipo de medicion
                            if (ordAsignaEquipo != null) {
                                if (ordAsignaEquipo.getIdMedCt() != null && ordAsignaEquipo.getIdMedCt().getId() != null) {
                                    isUpdateCt = this.updateCT(orden, tipoOrden, ordAsignaEquipo, ordEstado, 'D', usuarioDto);
                                    isUpdateCt = this.updateCT(orden, tipoOrden, ordAsignaEquipo, ordEstado, 'C', usuarioDto);
                                }
                                if (ordAsignaEquipo.getIdMedPt() != null && ordAsignaEquipo.getIdMedPt().getId() != null) {
                                    isUpdatePt = this.updatePT(orden, tipoOrden, ordAsignaEquipo, ordEstado, 'D', usuarioDto);
                                    isUpdatePt = this.updatePT(orden, tipoOrden, ordAsignaEquipo, ordEstado, 'C', usuarioDto);
                                }
                            }

                        }
                        if (!orden.getIdTipoOrden().getAsignaMedidor() && orden.getIdTipoOrden().getRetiraMedidor() && recojoMedidor) {

                            NucServicioMedidor nucServicioMedidorDes = nucServicioMedidorDao.findByMedidor(medidorDes.getId());
                            NucLecturaMedidor nucLecturaMedidor = new NucLecturaMedidor();
                            if (nucServicioMedidorDes != null) {
                                nucLecturaMedidor = nucLecturaMedidorDao.findByServicioMedidor(nucServicioMedidorDes.getId());
                            }

                            //CAMBIO DE MEDIDOR  - REGISTRA CONSUMO ADICIONAL
                            if (nucLecturaMedidor != null && nucLecturaMedidor.getIndiceUltimo() != null) {
                                //Actualiza el multiplicador calculado del medidor de desconexion
                                if (medidorDes.getMultiplicadorCalculado() == null) {
                                    MedCodigoMedidor medCodigoMedidor = medCodigoMedidorDao.findById(medidorDes.getIdCodigoMedidor().getId());

                                    BigDecimal multiplicadorCalculadoMedDesc = medCodigoMedidor.getConstantePropia();
                                    if (multiplicadorCalculadoMedDesc.compareTo(new BigDecimal(0)) == 0) {
                                        multiplicadorCalculadoMedDesc = new BigDecimal(1);
                                    } else if (multiplicadorCalculadoMedDesc == null) {
                                        NucServicioCt nucServicioCt = nucServicioCtDao.findConectadoByIdServicio(nucServicio.getId());
                                        NucServicioPt nucServicioPt = nucServicioPtDao.findConectadoByIdServicio(nucServicio.getId());

                                        if (nucServicioCt != null && nucServicioCt.getIdCt().getId() != null) {
                                            MedCt ct = medCtDao.findById(nucServicioCt.getIdCt().getId());
                                            multiplicadorCalculadoMedDesc = multiplicadorCalculadoMedDesc.multiply(ct.getRelacion());
                                        }
                                        if (nucServicioPt != null && nucServicioPt.getIdPt().getId() != null) {
                                            MedPt pt = medPtDao.findById(nucServicioPt.getIdPt().getId());
                                            multiplicadorCalculadoMedDesc = multiplicadorCalculadoMedDesc.multiply(pt.getRelacion());
                                        }

                                    }
                                    medidorDes.setMultiplicadorCalculado(multiplicadorCalculadoMedDesc);
                                    medMedidorDao.update(medidorDes);
                                }
                                BigDecimal indiceBA = orden.getEnergiaBloqueAlto() == null ? new BigDecimal(0) : orden.getEnergiaBloqueAlto();
                                BigDecimal indiceBM = orden.getEnergiaBloqueMedio() == null ? new BigDecimal(0) : orden.getEnergiaBloqueMedio();
                                BigDecimal indiceBB = orden.getEnergiaBloqueBajo() == null ? new BigDecimal(0) : orden.getEnergiaBloqueBajo();
                                if (orden.getIndDesconexion() == null) {
                                    orden.setIndDesconexion(indiceBA.add(indiceBM).add(indiceBB));
                                }
                                //CONSUMO ADICIONAL
                                NucNivelDemanda nucNivelDemanda = nucNivelDemandaDao.findById(nucServicio.getIdCategoria().getIdNivelDemanda().getId());
                                if (nucNivelDemanda.getCodigo() == CommonConstant.NIVEL_DEMANDA.PEQUENA || nucNivelDemanda.getCodigo() == CommonConstant.NIVEL_DEMANDA.MEDIANA) {
                                    BigDecimal consumoAdicional = lecInformacionAdicionalBean.calcularConsumo(medidorDes.getId(), nucLecturaMedidor.getIndiceUltimo(), orden.getIndDesconexion());
                                    if (consumoAdicional.compareTo(new BigDecimal(0)) > 0) {
                                        int tipo = LecturasParametros.TipoMedKwhAdicionales.CAMBIO_MEDIDOR;
                                        MedKwhAdicionales medKwhAdicionales = new MedKwhAdicionales();
                                        medKwhAdicionales.setIdConsumidor(orden.getIdConsumidor());
                                        medKwhAdicionales.setIdMedidor(medidorDes);//medidor
                                        medKwhAdicionales.setKwhAdicionales(consumoAdicional);
                                        medKwhAdicionales.setEstado(FacturacionParametros.EstadoKWhAdicionales.PENDIENTE.toString());
                                        medKwhAdicionales.setFechaActualizacion(calendar.getTime());
                                        medKwhAdicionales.setFechaRegistro(calendar.getTime());
                                        medKwhAdicionales.setUsuarioActualizacion(orden.getUsuarioActualizacion());
                                        medKwhAdicionales.setUsuarioRegistro(orden.getUsuarioActualizacion());
                                        medKwhAdicionales.setIdOrden(orden.getId());
                                        medKwhAdicionales.setTipo(tipo);
                                        medKwhAdicionalesDao.create(medKwhAdicionales);
                                    }
                                }
                                if (nucNivelDemanda.getCodigo() == CommonConstant.NIVEL_DEMANDA.GRANDEMANDA) {
                                    BigDecimal ultimoIndiceLectura = nucLecturaMedidor.getIndiceUltimo() == null ? new BigDecimal(0) : nucLecturaMedidor.getIndiceUltimo();
                                    BigDecimal ultimoIndiceBA = nucLecturaMedidor.getIndiceBloqueAltoUltimo() == null ? new BigDecimal(0) : nucLecturaMedidor.getIndiceBloqueAltoUltimo();
                                    BigDecimal ultimoIndiceBM = nucLecturaMedidor.getIndiceBloqueMedioUltimo() == null ? new BigDecimal(0) : nucLecturaMedidor.getIndiceBloqueMedioUltimo();
                                    BigDecimal ultimoIndiceBB = nucLecturaMedidor.getIndiceBloqueBajoUltimo() == null ? new BigDecimal(0) : nucLecturaMedidor.getIndiceBloqueBajoUltimo();
                                    BigDecimal indiceUltimoTotal = new BigDecimal(0);
                                    if (ultimoIndiceLectura.compareTo(new BigDecimal(0)) == 0) {
                                        indiceUltimoTotal = ultimoIndiceBA.add(ultimoIndiceBM).add(ultimoIndiceBB);
                                    } else {
                                        indiceUltimoTotal = ultimoIndiceLectura;
                                    }

                                    indiceBA = orden.getEnergiaBloqueAlto() == null ? new BigDecimal(0) : orden.getEnergiaBloqueAlto();
                                    indiceBM = orden.getEnergiaBloqueMedio() == null ? new BigDecimal(0) : orden.getEnergiaBloqueMedio();
                                    indiceBB = orden.getEnergiaBloqueBajo() == null ? new BigDecimal(0) : orden.getEnergiaBloqueBajo();

                                    BigDecimal indiceTotal = new BigDecimal(0);

                                    if (orden.getIndDesconexion().compareTo(new BigDecimal(0)) == 0) {
                                        indiceTotal = indiceBA.add(indiceBM).add(indiceBB);
                                    } else {
                                        indiceTotal = orden.getIndDesconexion();
                                    }
                                    Integer idCategoria = nucServicio.getIdCategoria().getId();

                                    HashMap consumoAdicionalGD = lecInformacionAdicionalBean.calcularConsumoGD(idCategoria, medidorDes.getId(), indiceUltimoTotal, ultimoIndiceBA,
                                            ultimoIndiceBM, ultimoIndiceBB, indiceTotal, indiceBA, indiceBM, indiceBB);
                                    BigDecimal consumo = new BigDecimal(consumoAdicionalGD.get("consumo").toString());
                                    BigDecimal consumoAlto = new BigDecimal(consumoAdicionalGD.get("consumoAlto").toString());
                                    BigDecimal consumoMedio = new BigDecimal(consumoAdicionalGD.get("consumoMedio").toString());
                                    BigDecimal consumoBajo = new BigDecimal(consumoAdicionalGD.get("consumoBajo").toString());
                                    if (consumo.compareTo(new BigDecimal(0)) > 0 || consumoAlto.compareTo(new BigDecimal(0)) > 0 || consumoMedio.compareTo(new BigDecimal(0)) > 0 || consumoBajo.compareTo(new BigDecimal(0)) > 0) {

                                        int tipo = LecturasParametros.TipoMedKwhAdicionales.CAMBIO_MEDIDOR;
                                        MedKwhAdicionales medKwhAdicionales = new MedKwhAdicionales();
                                        medKwhAdicionales.setIdConsumidor(orden.getIdConsumidor());
                                        medKwhAdicionales.setIdMedidor(medidorDes);//medidor
                                        medKwhAdicionales.setKwhAdicionales(consumo);
                                        medKwhAdicionales.setKwhAdicionalesBa(consumoAlto);
                                        medKwhAdicionales.setKwhAdicionalesBb(consumoMedio);
                                        medKwhAdicionales.setKwhAdicionalesBb(consumoBajo);
                                        medKwhAdicionales.setEstado(FacturacionParametros.EstadoKWhAdicionales.PENDIENTE.toString());
                                        medKwhAdicionales.setFechaActualizacion(calendar.getTime());
                                        medKwhAdicionales.setFechaRegistro(calendar.getTime());
                                        medKwhAdicionales.setUsuarioRegistro(orden.getUsuarioActualizacion());
                                        medKwhAdicionales.setUsuarioActualizacion(orden.getUsuarioActualizacion());
                                        medKwhAdicionales.setIdOrden(orden.getId());
                                        medKwhAdicionales.setTipo(tipo);
                                        medKwhAdicionalesDao.create(medKwhAdicionales);
                                    }
                                }

                            }

                            isUpdateMedidor = updateServicioMedidor(orden, tipoOrden, medidorDes, ordEstado, 'D', usuarioDto);
                            //isUpdateMedidor = updateMedidor(orden, tipoOrden, medidorDes, ordEstado, 'D', usuarioDto);
                            //Si tiene equipo de medicion
                            if (ordAsignaEquipo != null) {
                                if (ordAsignaEquipo.getIdMedCt() != null && ordAsignaEquipo.getIdMedCt().getId() != null) {
                                    isUpdateCt = this.updateCT(orden, tipoOrden, ordAsignaEquipo, ordEstado, 'D', usuarioDto);

                                }
                                if (ordAsignaEquipo.getIdMedPt() != null && ordAsignaEquipo.getIdMedPt().getId() != null) {
                                    isUpdatePt = this.updatePT(orden, tipoOrden, ordAsignaEquipo, ordEstado, 'D', usuarioDto);

                                }
                            }

                        }

                        //ACTUALIZAR EL ESTADO DEL MEDIDOR
//                        if (nucDatosTecnicos.getIdSistemaMedicion().getCodigo() != CommonConstant.NUCSISTEMAMEDICION.DIRECTA_SIN_MEDIDOR) {
//                            if (tipoOrden.getCodigo() == CommonConstant.ORDTIPOORDEN.SUSPENSION_TEMPORAL || tipoOrden.getCodigo() == CommonConstant.ORDTIPOORDEN.SUSPENSION_DEFINITIVA || tipoOrden.getCodigo() == CommonConstant.ORDTIPOORDEN.SUSPENSION_FALTA_PAGO) {
//                                MedMedidor updateMedidor = medmedidorDao.findById(orden.getIdMedidorDesconexion().getId());
//                                if (updateEstadoMedidor != null) {
//                                    updateMedidor.setIdEstado(updateEstadoMedidor);
//                                    medmedidorDao.update(updateMedidor);
//                                }
//                            }
//                            if (tipoOrden.getCodigo() == CommonConstant.ORDTIPOORDEN.REHABILITACION || tipoOrden.getCodigo() == CommonConstant.ORDTIPOORDEN.REHABILITACION_INTERNA) {
//                                MedMedidor updateMedidor = medmedidorDao.findById(orden.getIdMedidorConexion().getId());
//                                if (updateEstadoMedidor != null) {
//                                    updateMedidor.setIdEstado(updateEstadoMedidor);
//                                    medmedidorDao.update(updateMedidor);
//                                }
//
//                            }
//                            if (tipoOrden.getCodigo() == CommonConstant.ORDTIPOORDEN.REHABILITACION_FALTA_PAGO) {
//                                isUpdateMedidor = medmedidorDao.updateConect(orden.getIdMedidorConexion().getId());
//                            }
//                        }
                        //GENERA CARGOS DE RECONEXION Y REHABILITACION
                        if (tipoOrden.getCodigo() == CommonConstant.ORDTIPOORDEN.RECONEXION || tipoOrden.getCodigo() == CommonConstant.ORDTIPOORDEN.REHABILITACION_FALTA_PAGO) {
                            // ACTUALIZAR IMPORTES EN FACTURACION
                            Boolean generaCargo = Optional.ofNullable(orden.getGeneraCargo()).orElse(true);
                            if (generaCargo) {
                                FacItemFacturacion facItemFacturacionRec = facItemFacturacionDao.findByCodigo(FacturacionParametros.ItemFacturacion.CARGORECONEXION.getCodigo());
                                FacItemFacturacion facItemFacturacionReh = facItemFacturacionDao.findByCodigo(FacturacionParametros.ItemFacturacion.CARGOREHABILITACION.getCodigo());
                                Integer facControlTarifaId = facControlTarifaDao.findByResVig();
                                FacCategoriaTarifa facCategoriaTarifaria = facCategoriaTarifariaDao.findByIdControlTarifa(facControlTarifaId, nucServicio.getIdCategoria().getId());
                                FacOtrosCargosTarifa facOtrosCargosTarifa = facOtrosCargosTarifaDao.findByIdCategoriaTarifa(facCategoriaTarifaria.getId(), facItemFacturacionReh.getId());

                                BigDecimal importe = new java.math.BigDecimal(0);
                                if (facOtrosCargosTarifa != null) {
                                    importe = facOtrosCargosTarifa.getImporte();

                                } else {
                                    cr.setResultMessage(String.format(et.com.ejb.atc.data.CommonMessage.SOLSOLICITUDCARGOS.ERROR.ERROR_CARGO_CONEXION, facOtrosCargosTarifa));
                                }
                                if (tipoOrden.getCodigo() == CommonConstant.ORDTIPOORDEN.RECONEXION) {
                                    facConceptoPeriodoControlDao.insertarNuevoConcepto(orden.getIdConsumidor().getId(), FacturacionParametros.ItemFacturacion.CARGORECONEXION.getCodigo(), importe);
                                } else {
                                    facConceptoPeriodoControlDao.insertarNuevoConcepto(orden.getIdConsumidor().getId(), FacturacionParametros.ItemFacturacion.CARGOREHABILITACION.getCodigo(), importe);
                                }
                            }
                            //PARA LA ACTUALIZACION DE LA TABLA DE CORTES/SUSPENSIONES CON SUS RESPECTIVAS RECONEXIONES Y REHABILITACIONES
                            //Boolean isEmpareja = this.emparejarCorteReconexiones(orden);

                        }
                        //Actualiza la Solicitud
                        //SolSolicitudOrden solSolicitudOrden = solSolicitudOrdenDao.findByIdOrden(orden.getId());
                        if (solSolicitudOrden != null) {
                            SolSolicitud solicitud = solSolicitudOrden.getIdSolicitud();

                            //ACTUALIZA LAS ORDENES ASOCIADAS
                            Boolean isOrdenSolicitud = false;
                            if (solSolicitudOrden != null) {
                                List<SolSolicitudOrden> solSolicitudOrdenList = solSolicitudOrdenDao.findByIdSolicitud(solSolicitudOrden.getIdSolicitud().getId());
                                for (SolSolicitudOrden solicitudOrden : solSolicitudOrdenList) {
                                    //ejecutarOrdenesAsociada(orden, solicitudOrden.getOrdId());
                                    OrdOrden ordenSolicitud = ordOrdenDao.findById(solicitudOrden.getOrdId().getId());
                                    isOrdenSolicitud = true;
                                    //Verificar si tiene un cambio de categoria para aplicar
                                    if (solicitudOrden.getIdSolicitud().getIdTipoSolicitud().getCodigo() == et.com.ejb.atc.data.CommonConstant.SOLTIPOSOLICITUD.CAMBIO_TARIFA || solicitudOrden.getIdSolicitud().getIdTipoSolicitud().getCodigo() == et.com.ejb.atc.data.CommonConstant.SOLTIPOSOLICITUD.TRASLADO_MISMA_CASA || solicitudOrden.getIdSolicitud().getIdTipoSolicitud().getCodigo() == et.com.ejb.atc.data.CommonConstant.SOLTIPOSOLICITUD.INCREMENTO_CARGA) {
                                        SolServicio solServicio = solServicioDao.findByIdSolicitud(solicitudOrden.getIdSolicitud().getId());
                                        SolDatosTecnicos solDatosTecnicos = solDatosTecnicosDao.findByIdServicio(solServicio.getId());
                                        NucConsumidor nucConsumidor = nucConsumidorDao.findById(solServicio.getIdConsumidor().getId());

                                        //Actualiza campos a nucleo servicio
                                        if (nucServicio != null) {
                                            nucServicio.setIdCategoria(solServicio.getIdCategoria());
                                            nucServicio.setFechaActualizacion(calendar.getTime());
                                            isUpdateServicio = nucServicioDao.update(nucServicio);
                                            nucConsumidor.setIdActividadEconomica(solServicio.getIdActividadEconomica());
                                            nucConsumidorDao.update(nucConsumidor);

//                                          //VERIFICA CANTIDAD DE VARIOS SERVICIOS
//                                          this.validaVariosServicios(solServicio.getIdConsumidor(), solServicio.getIdCategoria());
                                            //ACTUALIZA LA CATEGORIA DE ASEO
                                            Boolean isCotizaTAS = this.verificaCotizaTAS(orden.getIdConsumidor().getIdRuta());
                                            if (isCotizaTAS) {
                                                NucServicio servicioTAS = nucServicioDao.findByIdConsumidor(orden.getIdConsumidor().getId(), CommonConstant.NUCTIPOSERVICIO.TAS);
                                                NucAsignaAseo nucAsignaAseo = nucAsignaAseoDao.findByAreaCategoria(orden.getIdConsumidor().getIdRuta().getIdRemesa().getIdArea().getId(), solServicio.getIdCategoria().getId());
                                                NucEstado nucEstadoConectado = nucEstadoDao.findByCodigo(CommonConstant.NUCESTADOS.CONECTADO);
                                                if (servicioTAS != null) {

                                                    servicioTAS.setIdConsumidor(orden.getIdConsumidor());
                                                    servicioTAS.setIdCategoria(nucAsignaAseo.getIdCategoriaAseo());
                                                    servicioTAS.setIdEstado(nucEstadoConectado);
                                                    servicioTAS.setFechaEstado(calendar.getTime());
                                                    servicioTAS.setFechaRegistro(calendar.getTime());
                                                    servicioTAS.setFechaActualizacion(calendar.getTime());

                                                    servicioTAS.setUsuarioActualizacion(orden.getUsuarioActualizacion());
                                                    nucServicioDao.update(servicioTAS);
                                                } else {
                                                    NucServicio nucServicioTAS = new NucServicio();
                                                    nucServicioTAS.setIdConsumidor(orden.getIdConsumidor());
                                                    nucServicioTAS.setIdCategoria(nucAsignaAseo.getIdCategoriaAseo());
                                                    nucServicioTAS.setIdEstado(nucEstadoConectado);
                                                    nucServicioTAS.setFechaEstado(calendar.getTime());
                                                    nucServicioTAS.setFechaRegistro(calendar.getTime());
                                                    nucServicioTAS.setFechaActualizacion(calendar.getTime());
                                                    nucServicioTAS.setUsuarioRegistro(orden.getUsuarioActualizacion());
                                                    nucServicioTAS.setUsuarioActualizacion(orden.getUsuarioActualizacion());
                                                    nucServicioDao.create(nucServicioTAS);
                                                }
                                            }
                                            //Verifica si el tipo de categoria es domiciliaria para continuar con el beneficio de la ley 1886
                                            NucCategoria nucCategoria = nucCategoriaDao.findById(solServicio.getIdCategoria().getId());
                                            if (nucCategoria.getIdTipoCategoria().getId().compareTo(et.com.ejb.atc.data.CommonConstant.NUCTIPOCATEGORIA.DOMICILIARIO) != 0) {
                                                leyHistorialBean.darBajaBeneficioDesdeSolicitud(orden.getIdConsumidor().getId(), et.com.ejb.ley.data.CommonConstant.CodigoMotivoBajaLey1886.CAMBIOCATEGORIA, "", solicitud.getUsuarioActualizacion(), solicitud.getIdAgencia().getId());
                                            }
                                        }

                                        //Actualiza campos a nucleo datos tecnicos
                                        Boolean isUpdateDatosTecnicos = false;
                                        if (nucDatosTecnicos != null) {
                                            nucDatosTecnicos.setIdSistemaMedicion(solDatosTecnicos.getIdSistemaMedicion());
                                            nucDatosTecnicos.setIdPuntoSuministro(solDatosTecnicos.getIdPuntoSuministro());
                                            nucDatosTecnicos.setIdPuntoMedida(solDatosTecnicos.getIdPuntoMedida());
                                            nucDatosTecnicos.setIdVoltajeAsignado(solDatosTecnicos.getIdVoltajeAsignado());
                                            nucDatosTecnicos.setIdVoltajeRed(solDatosTecnicos.getIdVoltajeRed());
                                            nucDatosTecnicos.setPotenciaMaximaDeclarada(solDatosTecnicos.getPotenciaMaximaDeclarada());
                                            nucDatosTecnicos.setPotenciaPuntaDeclarada(solDatosTecnicos.getPotenciaPuntaDeclarada());
                                            nucDatosTecnicos.setIdPuntoSuministro(solDatosTecnicos.getIdPuntoSuministro());
                                            nucDatosTecnicos.setCapacidadInstalada(solDatosTecnicos.getCapacidadInstalada());
                                            nucDatosTecnicos.setPotenciaDemandada(solDatosTecnicos.getPotenciaDemandada());
                                            nucDatosTecnicos.setIdFormaConexion(solDatosTecnicos.getIdFormaConexion());
                                            nucDatosTecnicos.setFase1(solDatosTecnicos.getFase1());
                                            nucDatosTecnicos.setFase2(solDatosTecnicos.getFase2());
                                            nucDatosTecnicos.setFase3(solDatosTecnicos.getFase3());
                                            nucDatosTecnicos.setFase4(solDatosTecnicos.getFase4());
                                            isUpdateDatosTecnicos = nucDatosTecnicosDao.update(nucDatosTecnicos);
                                        }
                                    }

                                    //Actualiza la orden
                                    ordenSolicitud.setFechaApliacacion(calendar.getTime());
                                    ordenSolicitud.setFechaActualizacion(calendar.getTime());
                                    isUpdateOrden = ordOrdenDao.update(ordenSolicitud);

                                    if (isUpdateOrden) {
                                        ordOrdenEstadosBean.updateEstadoOrden(ordenSolicitud, ordEstado);
                                        cr.setResult(GlobalConstant.RESULT_SUCCESS);
                                        cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.SUCCESS);
                                    }
                                }
                                if (isOrdenSolicitud) {
                                    solicitud.setFechaActualizacion(orden.getFechaCumplimiento());
                                    solSolicitudEstadosBean.updateEstadoSolicitud(solicitud, et.com.ejb.atc.data.CommonConstant.SOLESTADO.CUMPLIDA, usuarioDto);
                                }

                                //Verifica si tiene transformador
//                                NucConsumidor nucConsumidor = nucConsumidorDao.findById(orden.getIdConsumidor().getId());
//                                List<SolSolicitudTransformador> solTransformadorList = solSolicitudTransformadorDao.findByIdSolicitud(solSolicitudOrden.getIdSolicitud().getId());
//                                for (SolSolicitudTransformador solTransformador : solTransformadorList) {
//                                    LecConsumidorPerdidasTrafo newLecConsumidorPerdidasTrafo = new LecConsumidorPerdidasTrafo();
//                                    newLecConsumidorPerdidasTrafo.setIdConsumidor(nucConsumidor);
//                                    newLecConsumidorPerdidasTrafo.setTrafoNro(solTransformador.getNumeroTrafo().toString());
//                                    newLecConsumidorPerdidasTrafo.setTrafoFechaAlta(calendar.getTime());
//                                    newLecConsumidorPerdidasTrafo.setTrafoCapacidad(solTransformador.getCapacidad());
//                                    newLecConsumidorPerdidasTrafo.setTrafoPropiedad(solTransformador.getPropiedadEmpresa() == true ? 'E' : 'C');
//                                    newLecConsumidorPerdidasTrafo.setEstado(1);
//                                    newLecConsumidorPerdidasTrafo.setFechaRegistro(calendar.getTime());
//                                    newLecConsumidorPerdidasTrafo.setUsuarioRegistro(orden.getUsuarioActualizacion());
//                                    lecConsumidorPerdidasTrafoDao.create(newLecConsumidorPerdidasTrafo);
//                                }
                            }
                        }

                        if (solSolicitudOrden == null) {

                            //Actualiza la orden
                            orden.setFechaApliacacion(calendar.getTime());
                            orden.setFechaActualizacion(calendar.getTime());
                            isUpdateOrden = ordOrdenDao.update(orden);

                            if (isUpdateOrden) {
                                ordOrdenEstadosBean.updateEstadoOrden(orden, ordEstado);
                                cr.setResult(GlobalConstant.RESULT_SUCCESS);
                                cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.SUCCESS);
                            }
                        }
                    }
                }
            }
        } catch (Exception e) {
            cr.setResultMessage(CommonMessage.GLOBAL.ERROR.ERROR);
            e.printStackTrace();
        }
        return cr;
    }

    public CommonResponse reanudarOrden(CommonInput input) {
        cr = new CommonResponse();
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        UsuarioDto usuarioDto = input.getUsuarioDto();
        OrdOrden ordOrden = input.getOrdOrden();
        String observacion = "";
        try {
            if (ordOrden != null) {
                OrdOrden orden = ordOrdenDao.findById(ordOrden.getId());
                if (orden.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.SUSPENDIDA) {
                    OrdEstado ordEstado = ordEstadoDao.findByCodigoEstado(CommonConstant.ORDESTADO.REANUDADA);
//                    NucConsumidor nucConsumidor = nucConsumidorDao.findById(orden.getIdConsumidor().getId());
//                    observacion = orden.getObservacion() + " " + ordOrden.getObservacion();
                    observacion = ordOrden.getObservacion();
                    orden.setObservacion(observacion);
                    orden.setFechaActualizacion(calendar.getTime());
                    orden.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                    orden.setIdEstado(ordEstado);
                    ordOrdenDao.update(orden);
                    ordOrdenEstadosBean.updateEstadoOrden(orden, CommonConstant.ORDESTADO.REANUDADA);
                    cr.setResult(GlobalConstant.RESULT_SUCCESS);
                    cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.SUCCESS);
                } else {
                    cr.setResult(GlobalConstant.RESULT_WARNING);
                    cr.setResultMessage(String.format(CommonMessage.ORDORDEN.WARNING.REANUDAR_ORDEN_ESTADO_INCORRETO, orden.getIdEstado().getDescripcion()));
                }
            } else {
                cr.setResult(GlobalConstant.RESULT_ERROR);
                cr.setResultMessage(CommonMessage.GLOBAL.ERROR.EMPTY_INPUT);
            }
        } catch (Exception e) {
            cr.setResult(GlobalConstant.RESULT_ERROR);
            cr.setResultMessage(CommonMessage.GLOBAL.ERROR.ERROR);
            e.printStackTrace();
        }
        return cr;
    }

    public CommonResponse reaunudarOrden(CommonInput input) {
        cr = new CommonResponse();
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        UsuarioDto usuarioDto = input.getUsuarioDto();
        OrdOrden ordOrden = input.getOrdOrden();
        List solicitudOrdenList = input.getSolSolicitudOrdenList();
        OrdEstado ordEstadoReanudar = ordEstadoDao.findByCodigoEstado(CommonConstant.ORDESTADO.REANUDADA);
        String observacion = "";
        try {
            if (ordOrden != null) {
                OrdOrden orden = ordOrdenDao.findById(ordOrden.getId());
                Boolean asignaCTPT = false;
                if (orden.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.PENDIENTE || orden.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.SUSPENDIDA || orden.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.SUSPENDIDA_EMPRESA) {
                    OrdEstado ordEstado = ordEstadoDao.findByCodigoEstado(CommonConstant.ORDESTADO.REANUDADA);
                    NucConsumidor nucConsumidor = nucConsumidorDao.findById(orden.getIdConsumidor().getId());
                    NucServicio nucServicio = nucServicioDao.findByIdConsumidor(orden.getIdConsumidor().getId(), CommonConstant.NUCTIPOSERVICIO.ENERGIA);
                    NucDatosTecnicos nucDatosTecnicos = nucDatosTecnicosDao.findByIdServicio(nucServicio.getId());
                    if (nucDatosTecnicos != null) {
                        if (nucDatosTecnicos.getIdSistemaMedicion().getCodigo() == CommonConstant.NUCSISTEMAMEDICION.INDIRECTA_CON_MEDIDOR_CT_PT || nucDatosTecnicos.getIdSistemaMedicion().getCodigo() == CommonConstant.NUCSISTEMAMEDICION.SEMIDIRECTA_CON_MEDIDOR_CT) {
                            asignaCTPT = true;
                        }
                    }
                    NucArea nucArea = nucConsumidor.getIdRuta().getIdRemesa().getIdArea();
                    AtcEstadosSector atcEstadosSector = atcEstadosSectorDao.getSectorDestinoAtec(nucArea.getId(), null, null, orden.getIdEstado().getCodigo(), ordEstado.getCodigo(), orden.getIdTipoOrden().getAsignaMedidor(), asignaCTPT);
                    if (atcEstadosSector != null) {
                        orden.setIdSectorDestino(atcEstadosSector.getIdSector());
                    }
                    observacion = orden.getObservacion() + " " + ordOrden.getObservacion();
                    orden.setObservacion(observacion);
                    orden.setFechaActualizacion(calendar.getTime());
                    orden.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                    //orden.setIdEstado(ordEstado);
                    ordOrdenDao.update(orden);
//                    if (orden.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.SUSPENDIDA) {
//                        ordOrdenEstadosBean.updateEstadoOrden(orden, CommonConstant.ORDESTADO.REANUDADA, ordOrden.getObservacion());
//                    } else {
//                        ordOrdenEstadosBean.updateEstadoOrden(orden, CommonConstant.ORDESTADO.REANUDADA_EMPRESA, ordOrden.getObservacion());
//                    }

                    //ACTUALIZA LAS ORDENES ASOCIADAS
                    Boolean isOrdenSolicitud = false;
                    SolSolicitud solicitud = new SolSolicitud();

                    List<SolSolicitudOrden> solSolicitudOrdenList = new ArrayList<>();
                    SolSolicitudOrden solSolicitudOrden = solSolicitudOrdenDao.findByIdOrden(orden.getId());
                    if (solSolicitudOrden != null) {
                        solSolicitudOrdenList = solSolicitudOrdenDao.findByIdSolicitud(solSolicitudOrden.getIdSolicitud().getId());
                    } else {
                        if (orden.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.SUSPENDIDA) {
                            ordOrdenEstadosBean.updateEstadoOrden(orden, CommonConstant.ORDESTADO.REANUDADA, ordOrden.getObservacion());
                        } else {
                            ordOrdenEstadosBean.updateEstadoOrden(orden, CommonConstant.ORDESTADO.REANUDADA_EMPRESA, ordOrden.getObservacion());
                        }
                    }

                    for (SolSolicitudOrden solicitudOrden : solSolicitudOrdenList) {
                        solicitud = solicitudOrden.getIdSolicitud();
                        OrdOrden ordenAsociada = ordOrdenDao.findById(solicitudOrden.getOrdId().getId());
                        if (orden.getId() != ordenAsociada.getId()) {
                            if (atcEstadosSector != null) {
                                ordenAsociada.setIdSectorDestino(atcEstadosSector.getIdSector());
                            }
                            //observacion = orden.getObservacion() + " " + ordOrden.getObservacion();
                            ordenAsociada.setObservacion(observacion);
                            ordenAsociada.setFechaActualizacion(calendar.getTime());
                            ordenAsociada.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                            ordOrdenDao.update(ordenAsociada);

                            if (orden.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.SUSPENDIDA) {
                                ordOrdenEstadosBean.updateEstadoOrden(ordenAsociada, CommonConstant.ORDESTADO.REANUDADA, ordOrden.getObservacion());
                            }
                            if (orden.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.SUSPENDIDA_EMPRESA) {
                                ordOrdenEstadosBean.updateEstadoOrden(ordenAsociada, CommonConstant.ORDESTADO.REANUDADA_EMPRESA, ordOrden.getObservacion());
                            }

                        }
                        isOrdenSolicitud = true;

                    }
                    if (isOrdenSolicitud) {
                        //ACTUALIZACION DE FECHA DE SOLICITUD
                        solicitud.setFechaActualizacion(calendar.getTime());

                        if (orden.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.SUSPENDIDA) {
                            ordOrdenEstadosBean.updateEstadoOrden(orden, CommonConstant.ORDESTADO.REANUDADA, ordOrden.getObservacion());
                            solSolicitudEstadosBean.updateEstadoSolicitud(solicitud, et.com.ejb.atc.data.CommonConstant.SOLESTADO.ORDEN_REANUDADA, usuarioDto);
                        }
                        if (orden.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.SUSPENDIDA_EMPRESA) {
                            ordOrdenEstadosBean.updateEstadoOrden(orden, CommonConstant.ORDESTADO.REANUDADA_EMPRESA, ordOrden.getObservacion());
                            solSolicitudEstadosBean.updateEstadoSolicitud(solicitud, et.com.ejb.atc.data.CommonConstant.SOLESTADO.ORDEN_REANUDADA_EMPRESA, usuarioDto);
                        }

                    }

                    //GENERA ORDENES y ADICIONA EL TIPO DE ORDEN EN SOLSOLICITUD ORDEN
                    if (solSolicitudOrden != null && solicitudOrdenList != null) {
                        createOrdenCampo(solicitud, usuarioDto, solicitudOrdenList);
                    }
                    cr.setResult(GlobalConstant.RESULT_SUCCESS);
                    cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.SUCCESS);

                } else {
                    cr.setResult(GlobalConstant.RESULT_WARNING);
                    cr.setResultMessage(String.format(CommonMessage.ORDORDEN.WARNING.REANUDAR_ORDEN_ESTADO_INCORRETO, orden.getIdEstado().getDescripcion()));
                }
            } else {
                cr.setResult(GlobalConstant.RESULT_ERROR);
                cr.setResultMessage(CommonMessage.GLOBAL.ERROR.EMPTY_INPUT);
            }

        } catch (Exception e) {
            cr.setResult(GlobalConstant.RESULT_ERROR);
            cr.setResultMessage(CommonMessage.GLOBAL.ERROR.ERROR);
            e.printStackTrace();
        }
        return cr;
    }

    public CommonResponse createOrdenCampo(CommonInput input) {
        cr = new CommonResponse();
        Boolean isSaveOrden = false;
        cr.setResult(GlobalConstant.RESULT_ERROR);
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        try {
            OrdOrden ordOrden = input.getOrdOrden();
            if (ordOrden != null) {
                NucConsumidor nucConsumidor = nucConsumidorDao.findById(ordOrden.getIdConsumidor().getId());
                NucServicio nucServicio = nucServicioDao.findByIdConsumidor(ordOrden.getIdConsumidor().getId(), CommonConstant.NUCTIPOSERVICIO.ENERGIA);
                NucDatosTecnicos nucDatosTecnicos = nucDatosTecnicosDao.findByIdServicio(nucServicio.getId());

                NucArea nucArea = nucConsumidor.getIdRuta().getIdRemesa().getIdArea();
                RedTecnicaConsumidor redTecnicaConsumidor = redTecnicaConsumidorDao.findByIdConsumidor(nucConsumidor.getId());
                MedMedidor medMedidor = medmedidorDao.findById(ordOrden.getIdMedidorConexion().getId());
                NucServicioMedidor nucServicioMedidor = new NucServicioMedidor();
                NucLecturaMedidor nucLecturaMedidor = new NucLecturaMedidor();
                Boolean asignaCTPT = false;
                int ordEstado = 0;
                if (nucDatosTecnicos.getIdSistemaMedicion().getCodigo() == CommonConstant.NUCSISTEMAMEDICION.INDIRECTA_CON_MEDIDOR_CT_PT || nucDatosTecnicos.getIdSistemaMedicion().getCodigo() == CommonConstant.NUCSISTEMAMEDICION.SEMIDIRECTA_CON_MEDIDOR_CT) {
                    asignaCTPT = true;
                }
                nucServicioMedidor = nucServicioMedidorDao.findByMedidorConectado(nucServicio.getId());

                if (nucServicioMedidor != null) {
                    nucLecturaMedidor = nucLecturaMedidorDao.findByServicioMedidor(nucServicioMedidor.getId());
                }

                OrdTipoOrden ordTipoOrden = ordTipoOrdenDao.findById(ordOrden.getIdTipoOrden().getId());
                OrdOrden orden = new OrdOrden();
                isSaveOrden = false;
                orden
                        .setCodigo(Utils.getNextNumber(em, OrdOrden.class,
                                "codigo"));
                orden.setIdMedidorConexion(ordOrden.getIdMedidorConexion());
                orden.setIndConexion(medMedidor.getIndiceEnergia());
                orden.setIdTipoOrden(ordOrden.getIdTipoOrden());
                orden.setIdConsumidor(ordOrden.getIdConsumidor());
                orden.setIdEstado(ordEstadoDao.findByCodigoEstado(CommonConstant.ORDESTADO.PENDIENTE));
                orden.setIdSectorOrigen(ordOrden.getIdSectorOrigen());

                if (ordOrden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.CAMBIO_MEDIDOR) {
                    ordEstado = CommonConstant.ORDESTADO.REVISADA;
                } else {
                    ordEstado = CommonConstant.ORDESTADO.PENDIENTE;
                }
                OrdEstado ordEstados = ordEstadoDao.findByCodigoEstado(ordEstado);
                OrdEstado ordEstadoCampo = ordEstadoDao.findByCodigoEstado(CommonConstant.ORDESTADO.CAMPO);
                AtcEstadosSector atcEstadosSector = atcEstadosSectorDao.getSectorDestinoAtec(nucArea.getId(), null, null, ordEstados.getId(), ordEstadoCampo.getId(), orden.getIdTipoOrden().getAsignaMedidor(), asignaCTPT);
                if (atcEstadosSector != null) {
                    orden.setIdSectorDestino(atcEstadosSector.getIdSector());
                }

                if (redTecnicaConsumidor != null) {
                    orden.setIdPuesto(redTecnicaConsumidor.getIdRedPuesto());
                    orden.setIdPoste(redTecnicaConsumidor.getIdRedPoste());
                }

                orden.setIdRuta(nucConsumidor.getIdRuta());
                orden.setIdVoltaje(nucDatosTecnicos.getIdVoltajeAsignado());
                orden.setIdNivelCalidad(nucServicio.getIdNivelCalidad());
                orden.setRazonSocial(nucConsumidor.getRazonSocial());
                orden.setIdCategoria(nucServicio.getIdCategoria());
                orden.setFechaRegistro(calendar.getTime());
                orden.setFechaActualizacion(calendar.getTime());

                if (ordTipoOrden.getAsignaMedidor() && ordTipoOrden.getCodigo() != CommonConstant.ORDTIPOORDEN.CONTRATO_NUEVO && ordTipoOrden.getCodigo() != CommonConstant.ORDTIPOORDEN.CAMBIO_MEDIDOR) {
                    //Recupera medidor anterior para la orden que asignan medidor
                    if (nucServicioMedidor != null) {
                        orden.setIdMedidorConexion(nucServicioMedidor.getIdMedidor());
                        orden.setIndConexion(nucLecturaMedidor.getIndiceUltimo());
                    }
                }

                if (ordTipoOrden.getCodigo() == CommonConstant.ORDTIPOORDEN.CAMBIO_MEDIDOR || ordTipoOrden.getRetiraMedidor()) {
                    //Recupera medidor anterior para la orden de cambio de medidor
                    if (nucServicioMedidor != null) {
                        orden.setIdMedidorDesconexion(nucServicioMedidor.getIdMedidor());
                        orden.setIndDesconexion(nucLecturaMedidor.getIndiceUltimo());
                    }
                }
                isSaveOrden = ordOrdenDao.create(orden);

                if (isSaveOrden) {
                    if (ordTipoOrden.getCodigo() == CommonConstant.ORDTIPOORDEN.CAMBIO_MEDIDOR) {
                        ordOrdenEstadosBean.updateEstadoOrden(orden, CommonConstant.ORDESTADO.REVISADA);
                    } else {
                        ordOrdenEstadosBean.updateEstadoOrden(orden, CommonConstant.ORDESTADO.PENDIENTE);
                    }
                    cr.setResult(GlobalConstant.RESULT_SUCCESS);
                    cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.SUCCESS);
                }
            } else {
                cr.setResult(GlobalConstant.RESULT_ERROR);
                cr.setResultMessage(CommonMessage.GLOBAL.ERROR.EMPTY_INPUT);
            }

        } catch (Exception e) {
            cr.setResultMessage(CommonMessage.GLOBAL.ERROR.ERROR);
            e.printStackTrace();
        }
        return cr;
    }

    public CommonResponse printOrdenCorteReconexionSeleccionado(CommonInput input) {
        cr = new CommonResponse();
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        try {
            List<OrdOrden> ordenList = input.getOrdOrdenList();
            UsuarioDto usuarioDto = input.getUsuarioDto();
            Date fechaImpresion = calendar.getTime();
            if (ordenList != null) {
                Boolean updateEstadoOrden = false;
                String ordenes = "{";
                OrdOrden orden = new OrdOrden();
                for (OrdOrden ordOrden : ordenList) {
                    fechaImpresion = calendar.getTime();
                    orden = ordOrdenDao.findById(ordOrden.getId());

                    //VALIDA EL SECTOR DESTINO
                    if (!usuarioDto.getId_sector().equals(orden.getIdSectorDestino().getId())) {
                        cr.setResult(GlobalConstant.RESULT_WARNING);
                        cr.setResultMessage(String.format(CommonMessage.ORDORDEN.WARNING.ORDEN_SECTOR_DESTINO));
                        return cr;
                    }

                    if (orden.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.PENDIENTE || orden.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.CAMPO || orden.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.REVISADA || orden.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.REANUDADA) {
                        //orden.setFechaImpresion(calendar.getTime());
                        if (orden.getFechaImpresion() != null) {
                            fechaImpresion = orden.getFechaImpresion();
                        }
                        if (orden.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.PENDIENTE
                                || orden.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.REVISADA
                                || orden.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.REANUDADA
                                || orden.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.REANUDADA_EMPRESA) {
                            updateEstadoOrden = ordOrdenEstadosBean.updateEstadoOrdenCortesReconex(orden.getId(), CommonConstant.ORDESTADO.CAMPO, orden.getIdSectorDestino().getId(), usuarioDto.getId_usuario_security(), fechaImpresion);
                        } else {
                            updateEstadoOrden = true;
                        }
                        //updateEstadoOrden = ordOrdenEstadosBean.updateEstadoOrden(orden, CommonConstant.ORDESTADO.CAMPO);
                        ordenes = ordenes + orden.getId() + ",";
                    }
                }
                if (!ordenes.equals("")) {
                    ordenes = ordenes.substring(0, ordenes.length() - 1);
                    ordenes = ordenes + '}';
                }
                if (updateEstadoOrden) {

                    String pathExportPdf = CommonConstant.BASE_PATH_TMP + formatDate.format(calendar.getTime()) + ".pdf";

                    String pathExportText = CommonConstant.BASE_PATH_TMP + formatDate.format(calendar.getTime()) + ".txt";
                    OrdTipoOrden ordTipoOrden = ordTipoOrdenDao.findById(orden.getIdTipoOrden().getId());
                    this.printOrdenCorteReconexionSeleccionado(ordTipoOrden.getCodigo(), ordenes, pathExportText);

                    cr.setBase64(Utils.getFileBase64(pathExportText));
                    cr.setResult(GlobalConstant.RESULT_SUCCESS);
                    cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.SUCCESS);

                } else {
                    cr.setResult(CommonConstant.RESULT_ERROR);
                    cr.setResultMessage(CommonMessage.GLOBAL.ERROR.ERROR);
                }

            } else {
                cr.setResult(CommonConstant.RESULT_WARNING);
                cr.setResultMessage(String.format(CommonMessage.ORDORDEN.WARNING.ORDEN_IMPRESION));
            }

        } catch (Exception e) {
            cr.setResult(CommonConstant.RESULT_ERROR);
            cr.setResultMessage(e.getMessage());
            e.printStackTrace();
        }
        return cr;
    }

    public CommonResponse printOrdenCorteReconexionCumplida(CommonInput input) {
        cr = new CommonResponse();
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        try {
            List<OrdOrden> ordenList = input.getOrdOrdenList();
            UsuarioDto usuarioDto = input.getUsuarioDto();
            Date fechaImpresion = calendar.getTime();
            if (ordenList != null) {
                Boolean updateEstadoOrden = false;
                String ordenes = "{";
                OrdOrden orden = new OrdOrden();
                for (OrdOrden ordOrden : ordenList) {
                    fechaImpresion = calendar.getTime();
                    orden = ordOrdenDao.findById(ordOrden.getId());

                    //VALIDA EL SECTOR DESTINO
                    if (usuarioDto != null && !usuarioDto.getId_sector().equals(orden.getIdSectorDestino().getId())) {
                        cr.setResult(GlobalConstant.RESULT_WARNING);
                        cr.setResultMessage(String.format(CommonMessage.ORDORDEN.WARNING.ORDEN_SECTOR_DESTINO));
                        return cr;
                    }

//                    if (orden.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.PENDIENTE || orden.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.CAMPO || orden.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.REVISADA) {
                    if (orden.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.CUMPLIDA) {
                        //orden.setFechaImpresion(calendar.getTime());
                        if (orden.getFechaImpresion() != null) {
                            fechaImpresion = orden.getFechaImpresion();
                        }
//                        if (orden.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.PENDIENTE
//                                || orden.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.REVISADA
//                                || orden.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.REANUDADA) {
//                            updateEstadoOrden = ordOrdenEstadosBean.updateEstadoOrdenCortesReconex(orden.getId(), CommonConstant.ORDESTADO.CAMPO, orden.getIdSectorDestino().getId(), usuarioDto.getId_usuario_security(), fechaImpresion);
//                        } else {
                        updateEstadoOrden = true;
//                        }
                        //updateEstadoOrden = ordOrdenEstadosBean.updateEstadoOrden(orden, CommonConstant.ORDESTADO.CAMPO);
                        ordenes = ordenes + orden.getId() + ",";
                    }
                }
                if (!ordenes.equals("")) {
                    ordenes = ordenes.substring(0, ordenes.length() - 1);
                    ordenes = ordenes + '}';
                }
                if (updateEstadoOrden) {

                    String pathExportPdf = CommonConstant.BASE_PATH_TMP + formatDate.format(calendar.getTime()) + ".pdf";

                    String pathExportText = CommonConstant.BASE_PATH_TMP + formatDate.format(calendar.getTime()) + ".txt";
                    OrdTipoOrden ordTipoOrden = ordTipoOrdenDao.findById(orden.getIdTipoOrden().getId());
                    this.printOrdenCorteReconexionSeleccionadoCumplida(ordTipoOrden.getCodigo(), ordenes, pathExportText);

                    cr.setBase64(Utils.getFileBase64(pathExportText));
                    cr.setResult(GlobalConstant.RESULT_SUCCESS);
                    cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.SUCCESS);

                } else {
                    cr.setResult(CommonConstant.RESULT_ERROR);
                    cr.setResultMessage(String.format(CommonMessage.ORDORDEN.WARNING.ORDEN_IMPRESION_CUMPLIDA));
                }
            } else {
                cr.setResult(CommonConstant.RESULT_WARNING);
                cr.setResultMessage(CommonMessage.GLOBAL.ERROR.ERROR);
            }

        } catch (Exception e) {
            cr.setResult(CommonConstant.RESULT_ERROR);
            cr.setResultMessage(e.getMessage());
            e.printStackTrace();
        }
        return cr;
    }

    public Boolean printOrdenCorteReconexionSeleccionado(Integer codigoTipoOrden, String ordenes, String pathExportPdf) {
        //HashMap hm = null;
        Connection conn = null;
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        List<String> lines = null;
        try {
            conn = Utils.getConnection();

            switch (codigoTipoOrden) {
                case CommonConstant.ORDTIPOORDEN.CORTE: {
                    lines = this.ordenCorteReporte(ordenes);
//PDF PRINT
//                    JasperCompileManager.compileReportToFile(et.com.ejb.ord.data.CommonConstant.basePathJrxml + "OrdenCorteMasivoLista-v0.1.jrxml", et.com.ejb.ord.data.CommonConstant.basePathJrxml + "OrdenCorteMasivoLista-v0.1.jasper");
//                    hm = new HashMap();
//                    hm.put("ordenes", ordenes);                    
//                    JasperPrint jprint = (JasperPrint) JasperFillManager.fillReport(et.com.ejb.ord.data.CommonConstant.basePathJrxml + "OrdenCorteMasivoLista-v0.1.jasper", hm, conn);
//                    JasperExportManager.exportReportToPdfFile(jprint, pathExportPdf);
//END PDF PRINT                
                    break;
                }
                case CommonConstant.ORDTIPOORDEN.RECONEXION: {
                    lines = this.ordenReconexionReporte(ordenes);

//                    JasperCompileManager.compileReportToFile(et.com.ejb.ord.data.CommonConstant.basePathJrxml + "OrdenReconexionMasivoLista-v0.1.jrxml", et.com.ejb.ord.data.CommonConstant.basePathJrxml + "OrdenReconexionMasivoLista-v0.1.jasper");
//                    hm = new HashMap();
//                    hm.put("ordenes", ordenes);
//                    JasperPrint jprint = (JasperPrint) JasperFillManager.fillReport(et.com.ejb.ord.data.CommonConstant.basePathJrxml + "OrdenReconexionMasivoLista-v0.1.jasper", hm, conn);
//                    JasperExportManager.exportReportToPdfFile(jprint, pathExportPdf);
                    break;
                }
                case CommonConstant.ORDTIPOORDEN.SUSPENSION_FALTA_PAGO: {
                    lines = this.ordenSuspencionReporte(ordenes, 1);
//                    JasperCompileManager.compileReportToFile(et.com.ejb.ord.data.CommonConstant.basePathJrxml + "OrdenSuspencionServicioMasivoLista-v0.1.jrxml", et.com.ejb.ord.data.CommonConstant.basePathJrxml + "OrdenSuspencionServicioMasivoLista-v0.1.jasper");
//                    hm = new HashMap();
//                    hm.put("ordenes", ordenes);
//                    JasperPrint jprint = (JasperPrint) JasperFillManager.fillReport(et.com.ejb.ord.data.CommonConstant.basePathJrxml + "OrdenSuspencionServicioMasivoLista-v0.1.jasper", hm, conn);
//                    JasperExportManager.exportReportToPdfFile(jprint, pathExportPdf);
                    break;
                }
                case CommonConstant.ORDTIPOORDEN.REHABILITACION_FALTA_PAGO: {
                    lines = this.ordenRehabilitacionReporte(ordenes, 1);
//                    JasperCompileManager.compileReportToFile(et.com.ejb.ord.data.CommonConstant.basePathJrxml + "OrdenRehabilitacionServicioMasivoLista-v0.1.jrxml", et.com.ejb.ord.data.CommonConstant.basePathJrxml + "OrdenRehabilitacionServicioMasivoLista-v0.1.jasper");
//                    hm = new HashMap();
//                    hm.put("ordenes", ordenes);
//                    JasperPrint jprint = (JasperPrint) JasperFillManager.fillReport(et.com.ejb.ord.data.CommonConstant.basePathJrxml + "OrdenRehabilitacionServicioMasivoLista-v0.1.jasper", hm, conn);
//                    JasperExportManager.exportReportToPdfFile(jprint, pathExportPdf);
                    break;
                }
            }
            Path file = Paths.get(pathExportPdf);
            Files.write(file, lines, StandardCharsets.UTF_8);
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        } finally {
            Utils.closeConnection(conn);
        }
    }

    public Boolean printOrdenCorteReconexionSeleccionadoCumplida(Integer codigoTipoOrden, String ordenes, String pathExportPdf) {
        //HashMap hm = null;
        Connection conn = null;
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        List<String> lines = null;
        try {
            conn = Utils.getConnection();

            switch (codigoTipoOrden) {
                case CommonConstant.ORDTIPOORDEN.CORTE: {
                    lines = this.ordenCorteReporteCumplida(ordenes);
//PDF PRINT
//                    JasperCompileManager.compileReportToFile(et.com.ejb.ord.data.CommonConstant.basePathJrxml + "OrdenCorteMasivoLista-v0.1.jrxml", et.com.ejb.ord.data.CommonConstant.basePathJrxml + "OrdenCorteMasivoLista-v0.1.jasper");
//                    hm = new HashMap();
//                    hm.put("ordenes", ordenes);                    
//                    JasperPrint jprint = (JasperPrint) JasperFillManager.fillReport(et.com.ejb.ord.data.CommonConstant.basePathJrxml + "OrdenCorteMasivoLista-v0.1.jasper", hm, conn);
//                    JasperExportManager.exportReportToPdfFile(jprint, pathExportPdf);
//END PDF PRINT                
                    break;
                }
                case CommonConstant.ORDTIPOORDEN.RECONEXION: {
                    lines = this.ordenReconexionReporteCumplida(ordenes);

//                    JasperCompileManager.compileReportToFile(et.com.ejb.ord.data.CommonConstant.basePathJrxml + "OrdenReconexionMasivoLista-v0.1.jrxml", et.com.ejb.ord.data.CommonConstant.basePathJrxml + "OrdenReconexionMasivoLista-v0.1.jasper");
//                    hm = new HashMap();
//                    hm.put("ordenes", ordenes);
//                    JasperPrint jprint = (JasperPrint) JasperFillManager.fillReport(et.com.ejb.ord.data.CommonConstant.basePathJrxml + "OrdenReconexionMasivoLista-v0.1.jasper", hm, conn);
//                    JasperExportManager.exportReportToPdfFile(jprint, pathExportPdf);
                    break;
                }
                case CommonConstant.ORDTIPOORDEN.SUSPENSION_FALTA_PAGO: {
                    lines = this.ordenSuspencionReporteCumplida(ordenes, 1);
//                    JasperCompileManager.compileReportToFile(et.com.ejb.ord.data.CommonConstant.basePathJrxml + "OrdenSuspencionServicioMasivoLista-v0.1.jrxml", et.com.ejb.ord.data.CommonConstant.basePathJrxml + "OrdenSuspencionServicioMasivoLista-v0.1.jasper");
//                    hm = new HashMap();
//                    hm.put("ordenes", ordenes);
//                    JasperPrint jprint = (JasperPrint) JasperFillManager.fillReport(et.com.ejb.ord.data.CommonConstant.basePathJrxml + "OrdenSuspencionServicioMasivoLista-v0.1.jasper", hm, conn);
//                    JasperExportManager.exportReportToPdfFile(jprint, pathExportPdf);
                    break;
                }
                case CommonConstant.ORDTIPOORDEN.REHABILITACION_FALTA_PAGO: {
                    lines = this.ordenRehabilitacionReporteCumplida(ordenes, 1);
//                    JasperCompileManager.compileReportToFile(et.com.ejb.ord.data.CommonConstant.basePathJrxml + "OrdenRehabilitacionServicioMasivoLista-v0.1.jrxml", et.com.ejb.ord.data.CommonConstant.basePathJrxml + "OrdenRehabilitacionServicioMasivoLista-v0.1.jasper");
//                    hm = new HashMap();
//                    hm.put("ordenes", ordenes);
//                    JasperPrint jprint = (JasperPrint) JasperFillManager.fillReport(et.com.ejb.ord.data.CommonConstant.basePathJrxml + "OrdenRehabilitacionServicioMasivoLista-v0.1.jasper", hm, conn);
//                    JasperExportManager.exportReportToPdfFile(jprint, pathExportPdf);
                    break;
                }
            }
            Path file = Paths.get(pathExportPdf);
            Files.write(file, lines, StandardCharsets.UTF_8);
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        } finally {
            Utils.closeConnection(conn);
        }
    }

    /**
     * Numera ordenes de cyr seleccionados
     *
     * @param input
     * @return
     */
    public CommonResponse numerarCorteReconexionSeleccionado(CommonInput input) {
        cr = new CommonResponse();
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        Integer numeracion = 0;
        List cantidadOrdenList = new ArrayList<>();
        List<OrdOrden> ordenes = new ArrayList<>();
        try {
            OrdCorteReconexionDto ordCorteReconexionDto = input.getOrdCorteReconexionDto();
            if (ordCorteReconexionDto != null) {
                if (ordCorteReconexionDto.getIdTipoOrden() == CommonConstant.ORDTIPOORDEN.CORTE || ordCorteReconexionDto.getIdTipoOrden() == CommonConstant.ORDTIPOORDEN.SUSPENSION_FALTA_PAGO) {
                    numeracion = cyrProgramaDao.findUltimoNumeroOrden(ordCorteReconexionDto.getIdSectorDestino(), ordCorteReconexionDto.getIdTipoOrden(), ordCorteReconexionDto.getFechaEstimadaCorteFin());
                    ordenes = input.getOrdOrdenList();
                    for (OrdOrden orden : ordenes) {
                        OrdOrden updateOrden = ordOrdenDao.findById(orden.getId());
                        numeracion++;
                        updateOrden.setNumeroCorte(numeracion);
                        ordOrdenDao.update(updateOrden);
                    }
                    cr.setResult(GlobalConstant.RESULT_SUCCESS);
                    cr.setResultMessage(CommonMessage.ORDORDEN.SUCCESS.NUMERACION_CORRECTA);
                }
            } else {
                cr.setResult(GlobalConstant.RESULT_ERROR);
                cr.setResultMessage(CommonMessage.GLOBAL.ERROR.EMPTY_INPUT);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return cr;
    }

    public List numerarCorteReconexionMasiva(CommonInput input, Integer numeracion) {
        cr = new CommonResponse();
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        String ordenes = "{";
        List cantidadOrdenList = new ArrayList<>();
        try {
            OrdCorteReconexionDto ordCorteReconexionDto = input.getOrdCorteReconexionDto();
            if (ordCorteReconexionDto != null) {
                Boolean updateEstadoOrden = false;
                Boolean corte = false;
                Boolean suspension = false;

                if (ordCorteReconexionDto.getIdTipoOrden() == CommonConstant.ORDTIPOORDEN.CORTE) {
                    corte = true;
                }
                if (ordCorteReconexionDto.getIdTipoOrden() == CommonConstant.ORDTIPOORDEN.SUSPENSION_FALTA_PAGO) {
                    suspension = true;
                }
                if (ordCorteReconexionDto.getIdTipoOrden() == CommonConstant.ORDTIPOORDEN.CORTE || ordCorteReconexionDto.getIdTipoOrden() == CommonConstant.ORDTIPOORDEN.SUSPENSION_FALTA_PAGO) {
                    Integer cantidadImprimir = 0;
                    Integer numeroCorte = 0;
                    Integer cantidadImprimirUltimo = 0;
                    Integer idPrograma = 0;
                    //Define la cantidad a imprimir
//                    List<CyrPrograma> cyrProgramaList = cyrProgramaDao.findByIdFechaEstimada(ordCorteReconexionDto.getIdSectorDestino(), corte, suspension, ordCorteReconexionDto.getFechaEstimadaCorte());
//                    for (CyrPrograma programa : cyrProgramaList) {
//                        cantidadImprimir = cantidadImprimir + programa.getCantidadAGenerar();
//                        cantidadImprimirUltimo = programa.getCantidadAGenerar();
//                    }

                    List<Object[]> cyrProgramaList = cyrProgramaDao.findByIdFechaEstimadaOrdenes(ordCorteReconexionDto.getIdSectorDestino(), CommonConstant.ORDESTADO.PENDIENTE, ordCorteReconexionDto.getIdTipoOrden(), ordCorteReconexionDto.getFechaEstimadaCorteFin());
                    for (Object[] cyrProgramaObject : cyrProgramaList) {
                        if (cyrProgramaObject[0] != null) {
                            idPrograma = (Integer) cyrProgramaObject[0];
                            cantidadImprimir = cantidadImprimir + (cyrProgramaObject[1] != null ? (Integer) cyrProgramaObject[1] : 0);
                            cantidadImprimirUltimo = (Integer) cyrProgramaObject[1];
                        }
                    }

//                    cantidadOrdenList = ordOrdenDao.updateCorteReconexionMasivoAnterior(ordCorteReconexionDto.getIdSectorDestino(), ordCorteReconexionDto.getIdTipoOrden(), ordCorteReconexionDto.getFechaEstimadaCorte(), CommonConstant.ORDESTADO.PENDIENTE, CommonConstant.ORDESTADO.REVISADA, ordenes);
//                    numeroCorte = (Integer) cantidadOrdenList.get(0);
//                    ordenes = (String) cantidadOrdenList.get(1);
//                    cantidadOrdenList = ordOrdenDao.updateCorteReconexionMasivoActual(ordCorteReconexionDto.getIdSectorDestino(), ordCorteReconexionDto.getIdTipoOrden(), ordCorteReconexionDto.getFechaEstimadaCorte(), ordCorteReconexionDto.getFechaEstimadaCorteFin(), numeroCorte, CommonConstant.ORDESTADO.PENDIENTE, CommonConstant.ORDESTADO.REVISADA, cantidadImprimir, ordenes, cantidadOrdenList);
                    cantidadOrdenList = ordOrdenDao.updateCorteReconexionMasivoAnteriorActual(
                            ordCorteReconexionDto.getIdSectorDestino(),
                            ordCorteReconexionDto.getIdTipoOrden(),
                            ordCorteReconexionDto.getFechaEstimadaCorte(),
                            ordCorteReconexionDto.getFechaEstimadaCorteFin(),
                            CommonConstant.ORDESTADO.PENDIENTE,
                            CommonConstant.ORDESTADO.REVISADA,
                            ordenes,
                            cantidadImprimir,
                            cantidadImprimirUltimo,
                            numeracion,
                            input.getOrdCorteReconexionDto().getIdRutaDesde(),//codigoRuta
                            input.getOrdCorteReconexionDto().getIdRutaHasta());//codigo Ruta
                    numeroCorte = (Integer) cantidadOrdenList.get(0);
                    ordenes = (String) cantidadOrdenList.get(1);
                }
            } else {
                cr.setResult(GlobalConstant.RESULT_ERROR);
                cr.setResultMessage(CommonMessage.GLOBAL.ERROR.EMPTY_INPUT);
            }

        } catch (Exception e) {
            cr.setResult(CommonConstant.RESULT_ERROR);
            cr.setResultMessage(e.getMessage());
            e.printStackTrace();
        }
        return cantidadOrdenList;
    }

    public CommonResponse printOrdenMasivo(CommonInput input) {
        cr = new CommonResponse();
        cr.setResult(GlobalConstant.RESULT_ERROR);
        Boolean updateEstadoOrden = false;
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        try {
            NucSector nucSector = input.getNucSector();
            OrdTipoOrden ordTipoOrden = input.getOrdTipoOrden();
            UsuarioDto usuarioDto = input.getUsuarioDto();

            if (ordTipoOrden != null) {
                OrdTipoOrden tipoOrden = ordTipoOrdenDao.findById(ordTipoOrden.getId());
                String pathExportPdf = CommonConstant.BASE_PATH_TMP + "orden" + formatDate.format(calendar.getTime()) + ".pdf";
                List<OrdOrden> ordenList = ordOrdenDao.findByOrdenesPendienteTipoFromSolicitud(nucSector.getId(), tipoOrden.getId(), CommonConstant.ORDESTADO.PENDIENTE, CommonConstant.ORDESTADO.REVISADA);
                if (ordenList.isEmpty()) {
                    cr.setResult(CommonConstant.RESULT_WARNING);
                    cr.setResultMessage(CommonMessage.GLOBAL.WARNING.WARNING);
                    return cr;
                }
                String ordenes = "{";
                for (OrdOrden ordOrden : ordenList) {
                    OrdOrden orden = ordOrdenDao.findById(ordOrden.getId());
                    //VALIDA EL SECTOR DESTINO
                    if (!usuarioDto.getId_sector().equals(orden.getIdSectorDestino().getId())) {
                        cr.setResult(GlobalConstant.RESULT_WARNING);
                        cr.setResultMessage(String.format(CommonMessage.ORDORDEN.WARNING.ORDEN_SECTOR_DESTINO));
                        return cr;
                    }

                    //PARA LA IMPRESION DE ORDENES PARALELAS
                    SolSolicitudOrden solSolicitudOrden = solSolicitudOrdenDao.findByIdOrden(orden.getId());
                    List<SolSolicitudOrden> solSolicitudOrdenList = solSolicitudOrdenDao.findByIdSolicitud(solSolicitudOrden.getIdSolicitud().getId());

                    //VERIFICA QUE TODAS LAS ORDENES ESTEN LISTAS PARA SU IMPRESION
                    Boolean isCumpleEstado = true;
                    for (SolSolicitudOrden solicitudOrden : solSolicitudOrdenList) {
                        OrdEstado ordEstadoTemp = ordEstadoDao.findById(solicitudOrden.getOrdId().getIdEstado().getId());
                        if ((orden.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.PENDIENTE && ordEstadoTemp.getCodigo() == CommonConstant.ORDESTADO.ASIGNADA_MEDIDORES) || (orden.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.ASIGNADA_MEDIDORES && ordEstadoTemp.getCodigo() == CommonConstant.ORDESTADO.PENDIENTE)) {
                            isCumpleEstado = false;
                        }

                    }
                    SolSolicitudOrden ordenPrincipal;
                    if (isCumpleEstado) {
                        ordenPrincipal = solSolicitudOrdenList.stream()
                                .filter(o -> o.getIdTipoOrden().getAsignaMedidor() == true && o.getIdTipoOrden().getRetiraMedidor() == true)
                                .findFirst()
                                .orElse(null);
                        if (ordenPrincipal == null) {
                            ordenPrincipal = solSolicitudOrdenList.stream()
                                    .filter(o -> o.getIdTipoOrden().getAsignaMedidor() == true || o.getIdTipoOrden().getRetiraMedidor() == true)
                                    .findFirst()
                                    .orElse(null);
                        }
                        for (SolSolicitudOrden solicitudOrden : solSolicitudOrdenList) {
                            if (solicitudOrden.getOrdId().getIdEstado().getCodigo() == CommonConstant.ORDESTADO.PENDIENTE
                                    || solicitudOrden.getOrdId().getIdEstado().getCodigo() == CommonConstant.ORDESTADO.REVISADA
                                    || solicitudOrden.getOrdId().getIdEstado().getCodigo() == CommonConstant.ORDESTADO.REANUDADA) {
                                if (ordenPrincipal != null && solicitudOrden.getId() != ordenPrincipal.getId()) {
                                    solicitudOrden.getOrdId().setIdMedidorConexion(ordenPrincipal.getOrdId().getIdMedidorConexion());
                                    solicitudOrden.getOrdId().setIdMedidorDesconexion(ordenPrincipal.getOrdId().getIdMedidorDesconexion());
                                }
                                solicitudOrden.getOrdId().setFechaImpresion(calendar.getTime());
                                solicitudOrden.getOrdId().setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                                updateEstadoOrden = ordOrdenEstadosBean.updateEstadoOrden(solicitudOrden.getOrdId(), CommonConstant.ORDESTADO.CAMPO);
                            } else {
                                updateEstadoOrden = true;
                            }

                        }
                        if (ordenPrincipal != null) {
                            ordenes = ordenes + ordenPrincipal.getOrdId().getId() + ",";
                            tipoOrden = ordenPrincipal.getIdTipoOrden();
                        } else {
                            ordenes = ordenes + orden.getId() + ",";
                        }
                    }
                }
                if (updateEstadoOrden) {
                    if (!ordenes.equals("")) {
                        ordenes = ordenes.substring(0, ordenes.length() - 1);
                        ordenes = ordenes + '}';

                        this.printOrdenMasivo(tipoOrden, ordenes, pathExportPdf);
                        cr.setBase64(Utils.getFileBase64(pathExportPdf));
                        cr.setResult(GlobalConstant.RESULT_SUCCESS);
                        cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.SUCCESS);

                    }
                } else {
                    cr.setResult(CommonConstant.RESULT_ERROR);
                    cr.setResultMessage(CommonMessage.GLOBAL.ERROR.ERROR);
                }

            } else {
                cr.setResult(GlobalConstant.RESULT_ERROR);
                cr.setResultMessage(CommonMessage.GLOBAL.ERROR.EMPTY_INPUT);
            }
        } catch (Exception e) {
            cr.setResult(CommonConstant.RESULT_ERROR);
            cr.setResultMessage(CommonMessage.GLOBAL.ERROR.ERROR);
            e.printStackTrace();
        }

        return cr;
    }

    public boolean printOrdenMasivo(OrdTipoOrden tipoOrden, String ordenes, String pathExportPdf) {
        HashMap hm = null;
        //Connection conn = null;
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        List<String> lines = null;
        try {
            //conn = Utils.getConnection();
            hm = new HashMap();
            switch (tipoOrden.getCodigo()) {

                case CommonConstant.ORDTIPOORDEN.CONTRATO_NUEVO: {
                    lines = this.ordenContratoNuevoReporte(ordenes);
                    Path file = Paths.get(pathExportPdf);
                    Files.write(file, lines, StandardCharsets.UTF_8);
                    break;
                }
                case CommonConstant.ORDTIPOORDEN.SUSPENSION_TEMPORAL: {
                    lines = this.ordenSuspencionReporte(ordenes, 2);
                    Path file = Paths.get(pathExportPdf);
                    Files.write(file, lines, StandardCharsets.UTF_8);
                    break;
                }
                case CommonConstant.ORDTIPOORDEN.SUSPENSION_DEFINITIVA: {
                    lines = this.ordenSuspencionReporte(ordenes, 2);
                    Path file = Paths.get(pathExportPdf);
                    Files.write(file, lines, StandardCharsets.UTF_8);
                    break;
                }
                case CommonConstant.ORDTIPOORDEN.REHABILITACION: {
                    lines = this.ordenRehabilitacionReporte(ordenes, 2);
                    List<SolSolicitudOrden> solSolicitudOrdenList = new ArrayList<>();
                    String ordenesTemp = ordenes.substring(1, ordenes.length() - 1);
                    String ordenesSolicitud[] = ordenesTemp.split(",");
                    for (String orden : ordenesSolicitud) {

                        SolSolicitudOrden solSolicitudOrden = solSolicitudOrdenDao.findByIdOrden(new Integer(orden));
                        if (solSolicitudOrden != null) {
                            solSolicitudOrdenList = solSolicitudOrdenDao.findByIdSolicitud(solSolicitudOrden.getIdSolicitud().getId());

                            if (solSolicitudOrdenList.size() > 1) {
                                lines = this.ordenCambioMedidorReporte(ordenes);
                            }

                        }
                    }
                    //lines = this.ordenRehabilitacionReporte(ordenes, 2);
                    Path file = Paths.get(pathExportPdf);
                    Files.write(file, lines, StandardCharsets.UTF_8);
                    break;
                }
                case CommonConstant.ORDTIPOORDEN.INSTALACION_MEDIDOR: {
                    lines = this.ordenInstalaciónMedidorReporte(ordenes);
                    Path file = Paths.get(pathExportPdf);
                    Files.write(file, lines, StandardCharsets.UTF_8);
                    break;
                }
                case CommonConstant.ORDTIPOORDEN.CONTRATO_NUEVO_GDI: {
                    lines = this.ordenConexionGdi(ordenes);
                    Path file = Paths.get(pathExportPdf);
                    Files.write(file, lines, StandardCharsets.UTF_8);
                    break;
                }
                default: {
                    lines = this.ordenCambioMedidorReporte(ordenes);
                    Path file = Paths.get(pathExportPdf);
                    Files.write(file, lines, StandardCharsets.UTF_8);
                }
            }
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        } finally {
            //Utils.closeConnection(conn);
        }
    }

    public CommonResponse printOrdenDetalle(CommonInput input) {
        cr = new CommonResponse();
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        try {
            NucSector nucSector = input.getNucSector();
            OrdTipoOrden ordTipoOrden = input.getOrdTipoOrden();
            //OrdTipoOrden ordTipoOrden = input.getOrdTipoOrden();

            if (nucSector != null) {

                Boolean print = false;
                String pathExportPdf = CommonConstant.BASE_PATH_TMP + formatDate.format(calendar.getTime()) + ".pdf";

                print = this.printOrdenDetalle(nucSector.getId(), ordTipoOrden.getId(), pathExportPdf);

                if (print) {
                    cr.setBase64(Utils.getFileBase64(pathExportPdf));
                    cr.setResult(GlobalConstant.RESULT_SUCCESS);
                    cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.SUCCESS);

                } else {
                    cr.setResult(CommonConstant.RESULT_WARNING);
                    cr.setResultMessage(String.format(CommonMessage.ORDORDEN.WARNING.ORDEN_IMPRESION));
                }
            } else {
                cr.setResult(GlobalConstant.RESULT_ERROR);
                cr.setResultMessage(CommonMessage.GLOBAL.ERROR.EMPTY_INPUT);
            }

        } catch (Exception e) {
            cr.setResult(CommonConstant.RESULT_ERROR);
            cr.setResultMessage(e.getMessage());
            e.printStackTrace();
        }
        return cr;
    }

    public Boolean printOrdenDetalle(Integer idSectorDestino, Integer idTipoOrden, String pathExportPdf) {
        HashMap hm = null;
        Connection conn = null;
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        try {
            conn = Utils.getConnection();

            JasperCompileManager.compileReportToFile(CommonConstant.basePathJrxml + "OrdenCorteDetalle-v0.1.jrxml", CommonConstant.basePathJrxml + "OrdenCorteDetalle-v0.1.jasper");
            hm = new HashMap();
            hm.put("idSectorDestino", idSectorDestino);
            hm.put("idTipoOrden", idTipoOrden);
            hm.put("estPendiente", CommonConstant.ORDESTADO.PENDIENTE);
            //hm.put("estCampo", CommonConstant.ORDESTADO.CAMPO);
            hm.put("estRevisada", CommonConstant.ORDESTADO.REVISADA);

            JasperPrint jprint = (JasperPrint) JasperFillManager.fillReport(CommonConstant.basePathJrxml + "OrdenDetalle-v0.1.jasper", hm, conn);
            JasperExportManager.exportReportToPdfFile(jprint, pathExportPdf);

            return true;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        } finally {
            Utils.closeConnection(conn);
        }
    }

    public CommonResponse ejecutarValidar(CommonInput input) {
        cr = new CommonResponse();
        OrdOrden ordOrden = input.getOrdOrden();
        OrdOrden ordOrdenControl = input.getOrdOrdenControl();
        try {
            if (ordOrden != null) {
                OrdOrden orden = new OrdOrden();
                OrdOrden ordOrdenPrioridad = new OrdOrden();
                if (ordOrden.getId() != null) {
                    orden = ordOrdenDao.findById(ordOrden.getId());
                } else {
                    orden = ordOrdenDao.findByCodigoOrden(ordOrden.getCodigo());
                }

                //VERIFICAR QUE TODAS LAS ORDENES PARALELAS ESTEN EN EL ESTADO APROPIADO
                SolSolicitudOrden solSolicitudOrden = solSolicitudOrdenDao.findByIdOrden(orden.getId());
                Boolean isCumpleEstado = true;
                Boolean hasProject = false;
                if (Optional.ofNullable(solSolicitudOrden)
                        .map(o -> o.getIdSolicitud())
                        .map(o -> o.getId())
                        .orElse(0) != 0) {

                    List<SolSolicitudOrden> solSolicitudOrdenList = solSolicitudOrdenDao.findByIdSolicitud(solSolicitudOrden.getIdSolicitud().getId());

                    for (SolSolicitudOrden solicitudOrden : solSolicitudOrdenList) {

                        if (solicitudOrden.getOrdId().getIdEstado().getCodigo() != CommonConstant.ORDESTADO.ANULADA) {
                            //                        isCumpleEstado = false;
                            OrdEstado ordEstadoTemp = ordEstadoDao.findById(solicitudOrden.getOrdId().getIdEstado().getId());
                            if (!ordEstadoTemp.getCodigo().equals(CommonConstant.ORDESTADO.CAMPO)
                                    && !ordEstadoTemp.getCodigo().equals(CommonConstant.ORDESTADO.REVISADA)
                                    && !ordEstadoTemp.getCodigo().equals(CommonConstant.ORDESTADO.REANUDADA)
                                    && !ordEstadoTemp.getCodigo().equals(CommonConstant.ORDESTADO.REANUDADA_EMPRESA)) {
                                isCumpleEstado = false;
                            }
                            if ((solicitudOrden.getOrdId().getIdTipoOrden().getAsignaMedidor() == true && solicitudOrden.getOrdId().getIdTipoOrden().getRetiraMedidor() == false)
                                    || (solicitudOrden.getOrdId().getIdTipoOrden().getAsignaMedidor() == false && solicitudOrden.getOrdId().getIdTipoOrden().getRetiraMedidor() == true)
                                    || (solicitudOrden.getOrdId().getIdTipoOrden().getAsignaMedidor() == true && solicitudOrden.getOrdId().getIdTipoOrden().getRetiraMedidor() == true)) {
                                if (solicitudOrden.getOrdId().getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.INSTALACION_MED_CONTROL) {
                                    ordOrdenControl = solicitudOrden.getOrdId();
                                } else {
                                    ordOrdenPrioridad = solicitudOrden.getOrdId();
                                }
                            }
                        }
                        if (!hasProject) {
                            hasProject = orderHasProject.test(solicitudOrden.getOrdId().getIdTipoOrden().getCodigo());
                        }
                    }

                    if (solSolicitudOrdenList.size() > 1 && ordOrdenPrioridad.getId() != null) {
                        //OBTENER LA ORDEN DE PRIORIDAD A EJECUTAR
                        orden = ordOrdenPrioridad;
                    }
                    if (hasProject) {
                        cr.setHmListado(ordOrdenDao.listProyects(orden.getCodigo()));
                        orden.setNumeroProyectoMaterial("0");
                    }
                } else {
                    //Sin solicitud, orden interna por cambio de acometida
                    if (orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.CAMBIO_ACOMETIDA_INTERNA) {
                        cr.setHmListado(ordOrdenDao.listProyects(orden.getCodigo()));
                    }
                    orden.setNumeroProyectoMaterial("0");
                }
                if (isCumpleEstado) {

                    //                if (orden != null && (orden.getIdEstado().getCodigo().equals(CommonConstant.ORDESTADO.CAMPO)
                    //                        || orden.getIdEstado().getCodigo().equals(CommonConstant.ORDESTADO.REVISADA)
                    //                        || orden.getIdEstado().getCodigo().equals(CommonConstant.ORDESTADO.REANUDADA))) {
                    cr.setResult(CommonConstant.RESULT_SUCCESS);
                    cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.OBJECT);
                    cr.setOrdOrden(orden);
                    cr.setOrdOrdenControl(ordOrdenControl);
                } else {
                    cr.setResult(GlobalConstant.RESULT_WARNING);
                    cr.setResultMessage(String.format(CommonMessage.ORDORDEN.WARNING.ESTADO_INCORRECTO_MODIFICACION_DENEGADA, orden.getIdEstado().getDescripcion()));

                }
                //control de coordenadas
                cr.setShowCoordenadas(ordOrdenDao.showCoordenadas(orden.getId()));
            } else {
                cr.setResult(GlobalConstant.RESULT_ERROR);
                cr.setResultMessage(CommonMessage.GLOBAL.ERROR.EMPTY_INPUT);
            }

        } catch (Exception e) {
            cr.setResult(GlobalConstant.RESULT_ERROR);
            cr.setResultMessage(CommonMessage.GLOBAL.ERROR.ERROR);
            e.printStackTrace();
        }
        return cr;
    }

    public Boolean applyAnulaCargoReconRehab(FacConceptoPeriodoControl facConceptoPeriodoControl) {
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        Boolean isAnulaConcepto = false;
        try {
            facConceptoPeriodoControlDao.modificarEstado(facConceptoPeriodoControl.getId(), FacturacionParametros.EstadoConceptoPeriodo.ANULADO);
            isAnulaConcepto = true;
        } catch (Exception e) {
            e.printStackTrace();

        }
        return isAnulaConcepto;
    }

    public CommonResponse ejecutarValidarCortesReconex(CommonInput input) {
        cr = new CommonResponse();
        OrdOrden ordOrden = input.getOrdOrden();

        try {
            if (ordOrden != null) {
                OrdOrden orden = new OrdOrden();
                if (ordOrden.getId() != null) {
                    orden = ordOrdenDao.findById(ordOrden.getId());
                } else if (ordOrden.getCodigo() != null) {
                    orden = ordOrdenDao.findByCodigoOrden(ordOrden.getCodigo());
                }

                if (orden == null) {
                    cr.setResult(GlobalConstant.RESULT_WARNING);
                    cr.setResultMessage(String.format(CommonMessage.ORDORDEN.WARNING.ORDEN_NO_ENCONTRADA));
                    return cr;

                }
                if (orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.CORTE || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.RECONEXION || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.SUSPENSION_FALTA_PAGO || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.REHABILITACION_FALTA_PAGO) {
                    Calendar fechaGeneracion = Calendar.getInstance();
                    fechaGeneracion.setTime(orden.getFechaRegistro());
                    if (orden != null && (orden.getIdEstado().getCodigo().equals(CommonConstant.ORDESTADO.CAMPO)
                            || orden.getIdEstado().getCodigo().equals(CommonConstant.ORDESTADO.REVISADA)
                            || orden.getIdEstado().getCodigo().equals(CommonConstant.ORDESTADO.REANUDADA))) {
                        cr.setResult(CommonConstant.RESULT_SUCCESS);
                        cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.SUCCESS);
                    } else {
                        cr.setResult(GlobalConstant.RESULT_WARNING);
                        cr.setResultMessage(String.format(CommonMessage.ORDORDEN.WARNING.ESTADO_INCORRECTO_MODIFICACION_DENEGADA, orden.getIdEstado().getDescripcion()));

                    }
                    //
//                    if (orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.CORTE || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.SUSPENSION_FALTA_PAGO) {
//
//                        OrdTipoOrden tipoOrdenRecon = ordTipoOrdenDao.findByCodigo(CommonConstant.ORDTIPOORDEN.RECONEXION);
//                        OrdTipoOrden tipoOrdenRehab = ordTipoOrdenDao.findByCodigo(CommonConstant.ORDTIPOORDEN.REHABILITACION_FALTA_PAGO);
//
//                        OrdOrden ultimaOrdenRecon = ordOrdenDao.findByConsumidorOrden(orden.getIdConsumidor().getId(), tipoOrdenRecon.getId(), orden.getId());
//                        OrdOrden ultimaOrdenRehab = ordOrdenDao.findByConsumidorOrden(orden.getIdConsumidor().getId(), tipoOrdenRehab.getId(), orden.getId());
//
//                        Calendar fechaUltimaOrdenRecon = Calendar.getInstance();
//                        if (ultimaOrdenRecon != null) {
////                            if (ultimaOrdenRecon.getIdEstado().getCodigo() != CommonConstant.ORDESTADO.ANULADA
////                                    && ultimaOrdenRecon.getIdEstado().getCodigo() != CommonConstant.ORDESTADO.CUMPLIDA
////                                    && ultimaOrdenRecon.getIdEstado().getCodigo() != CommonConstant.ORDESTADO.PENDIENTE_APLICACION_SISTEMA) {
////                                fechaUltimaOrdenRecon.setTime(ultimaOrdenRecon.getFechaRegistro());
////                                if (fechacumplimiento.getTime().compareTo(fechaUltimaOrdenRecon.getTime()) > 0) {
////                                    cr.setResultMessage(CommonMessage.ORDORDEN.ERROR.CORTE_FECHA_CORTE_INDEBIDO);
////                                    isValida = false;
////                                    cr.setResult(CommonConstant.RESULT_WARNING);
////                                }
////                            }
//                        }
//                        Calendar fechaUltimaOrdenRehab = Calendar.getInstance();
//                        if (ultimaOrdenRehab != null) {
////                            if (ultimaOrdenRehab.getIdEstado().getCodigo() != CommonConstant.ORDESTADO.ANULADA
////                                    && ultimaOrdenRehab.getIdEstado().getCodigo() != CommonConstant.ORDESTADO.CUMPLIDA
////                                    && ultimaOrdenRehab.getIdEstado().getCodigo() != CommonConstant.ORDESTADO.PENDIENTE_APLICACION_SISTEMA) {
////                                fechaUltimaOrdenRehab.setTime(ultimaOrdenRehab.getFechaRegistro());
////
////                                if (fechacumplimiento.getTime().compareTo(fechaUltimaOrdenRehab.getTime()) > 0) {
////                                    cr.setResultMessage(CommonMessage.ORDORDEN.ERROR.SUSPENSION_FECHA_CORTE_INDEBIDO);
////                                    isValida = false;
////                                    cr.setResult(CommonConstant.RESULT_WARNING);
////                                }
////                            }
//                        }
//                    }
                    if (orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.RECONEXION || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.REHABILITACION_FALTA_PAGO) {
                        OrdTipoOrden tipoOrdenCorte = ordTipoOrdenDao.findByCodigo(CommonConstant.ORDTIPOORDEN.CORTE);
                        OrdTipoOrden tipoOrdenSusp = ordTipoOrdenDao.findByCodigo(CommonConstant.ORDTIPOORDEN.SUSPENSION_FALTA_PAGO);

                        OrdOrden ultimaOrdenCorte = ordOrdenDao.findByConsumidorOrdenEfectivo(orden.getIdConsumidor().getId(), tipoOrdenCorte.getId(), orden.getId());
                        OrdOrden ultimaOrdenSusp = ordOrdenDao.findByConsumidorOrdenEfectivo(orden.getIdConsumidor().getId(), tipoOrdenSusp.getId(), orden.getId());

                        Calendar fechaUltimaOrdenCorte = Calendar.getInstance();
                        Boolean corteCumplido = false;
                        if (ultimaOrdenCorte != null) {
                            if (ultimaOrdenCorte.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.CUMPLIDA || ultimaOrdenCorte.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.PENDIENTE_APLICACION_SISTEMA) {
                                fechaUltimaOrdenCorte.setTime(ultimaOrdenCorte.getFechaCumplimiento());
                                corteCumplido = true;
                            }
                        }
                        Calendar fechaUltimaOrdenSusp = Calendar.getInstance();
                        Boolean suspensionCumplida = false;
                        if (ultimaOrdenSusp != null) {
                            if (ultimaOrdenSusp.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.CUMPLIDA || ultimaOrdenSusp.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.PENDIENTE_APLICACION_SISTEMA) {
                                fechaUltimaOrdenSusp.setTime(ultimaOrdenSusp.getFechaCumplimiento());
                                suspensionCumplida = true;
                            }
                        }

                        if (orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.RECONEXION) {

                            if (ultimaOrdenCorte != null) {
                                switch (ultimaOrdenCorte.getIdEstado().getCodigo()) {
                                    case CommonConstant.ORDESTADO.CAMPO: {
                                        cr.setResult(GlobalConstant.RESULT_WARNING);
                                        cr.setResultMessage(String.format(CommonMessage.ORDORDEN.ERROR.CORTE_NO_TRANSCRITO_NRO, ultimaOrdenCorte.getCodigo()));
                                        return cr;

                                        //break;
                                    }
                                    case CommonConstant.ORDESTADO.ANULADA: {

                                        cr.setResult(GlobalConstant.RESULT_WARNING);
                                        cr.setResultMessage(String.format(CommonMessage.ORDORDEN.ERROR.RECONEXION_TRABAJO_EJECUTADO));
                                        return cr;

                                    }
                                    case CommonConstant.ORDESTADO.NO_REALIZADA: {
                                        cr.setResult(GlobalConstant.RESULT_WARNING);
                                        cr.setResultMessage(String.format(CommonMessage.ORDORDEN.ERROR.RECONEXION_TRABAJO_EJECUTADO));
                                        return cr;
                                    }
                                    case CommonConstant.ORDESTADO.CUMPLIDA: {

                                        if (fechaUltimaOrdenCorte.getTime().compareTo(fechaGeneracion.getTime()) > 0) {
                                            cr.setResult(GlobalConstant.RESULT_WARNING);
                                            cr.setResultMessage(String.format(CommonMessage.ORDORDEN.ERROR.CORTE_FECHA_CORTE_INDEBIDO));
                                            return cr;

                                        }
                                        break;
                                    }
                                    case CommonConstant.ORDESTADO.PENDIENTE_APLICACION_SISTEMA: {

                                        if (fechaUltimaOrdenCorte.getTime().compareTo(fechaGeneracion.getTime()) > 0) {
                                            cr.setResult(GlobalConstant.RESULT_WARNING);
                                            cr.setResultMessage(String.format(CommonMessage.ORDORDEN.ERROR.CORTE_FECHA_CORTE_INDEBIDO));
                                            return cr;
                                        }
                                        break;
                                    }
                                }
                            }

                        }

                        //case CommonConstant.ORDTIPOORDEN.REHABILITACION: {
                        if (orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.REHABILITACION_FALTA_PAGO) {
                            if (ultimaOrdenCorte != null && !suspensionCumplida) {
                                switch (ultimaOrdenCorte.getIdEstado().getCodigo()) {

                                    case CommonConstant.ORDESTADO.ANULADA: {

                                        cr.setResult(GlobalConstant.RESULT_WARNING);
                                        cr.setResultMessage(String.format(CommonMessage.ORDORDEN.ERROR.REHABILITACION_TRABAJO_EJECUTADO));
                                        return cr;

                                    }
                                    case CommonConstant.ORDESTADO.NO_REALIZADA: {
                                        cr.setResult(GlobalConstant.RESULT_WARNING);
                                        cr.setResultMessage(String.format(CommonMessage.ORDORDEN.ERROR.REHABILITACION_TRABAJO_EJECUTADO));
                                        if (ultimaOrdenSusp != null) {

                                        } else {
                                            return cr;
                                        }
                                    }
                                }
                            }
                            if (ultimaOrdenSusp != null) {
                                switch (ultimaOrdenSusp.getIdEstado().getCodigo()) {
                                    case CommonConstant.ORDESTADO.CAMPO: {

                                        cr.setResult(GlobalConstant.RESULT_WARNING);
                                        cr.setResultMessage(String.format(CommonMessage.ORDORDEN.ERROR.SUSPENSION_NO_TRANSCRITO_NRO, ultimaOrdenSusp.getCodigo()));
                                        return cr;

                                    }
                                    case CommonConstant.ORDESTADO.ANULADA: {
                                        if (ultimaOrdenCorte != null && ultimaOrdenCorte.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.CUMPLIDA) {

                                        } else {
                                            cr.setResult(GlobalConstant.RESULT_WARNING);
                                            cr.setResultMessage(String.format(CommonMessage.ORDORDEN.ERROR.REHABILITACION_TRABAJO_EJECUTADO));
                                            return cr;
                                        }
                                        break;
                                    }
//                                    case CommonConstant.ORDESTADO.NO_REALIZADA: {
//                                        if (ultimaOrdenCorte != null && ultimaOrdenCorte.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.CUMPLIDA) {
//
//                                        } else {
//                                            cr.setResult(GlobalConstant.RESULT_WARNING);
//                                            cr.setResultMessage(String.format(CommonMessage.ORDORDEN.ERROR.REHABILITACION_TRABAJO_EJECUTADO));
//                                            return cr;
//                                        }
//                                        break;
//                                    }
                                    case CommonConstant.ORDESTADO.CUMPLIDA: {

                                        if (fechaUltimaOrdenSusp.getTime().compareTo(fechaGeneracion.getTime()) > 0) {

                                            cr.setResult(GlobalConstant.RESULT_WARNING);
                                            cr.setResultMessage(String.format(CommonMessage.ORDORDEN.ERROR.SUSPENSION_FECHA_CORTE_INDEBIDO));
                                            return cr;

                                        }
                                        break;
                                    }
                                    case CommonConstant.ORDESTADO.PENDIENTE_APLICACION_SISTEMA: {

                                        if (fechaUltimaOrdenSusp.getTime().compareTo(fechaGeneracion.getTime()) > 0) {
                                            cr.setResult(GlobalConstant.RESULT_WARNING);
                                            cr.setResultMessage(String.format(CommonMessage.ORDORDEN.ERROR.SUSPENSION_FECHA_CORTE_INDEBIDO));
                                            return cr;
                                        }
                                        break;
                                    }
                                }
                            }
                        }
                    }
                    //
                } else {
                    cr.setResult(GlobalConstant.RESULT_WARNING);
                    cr.setResultMessage(String.format(CommonMessage.ORDORDEN.WARNING.TIPO_ORDEN_INCORRECTO_EJECUCION, orden.getIdTipoOrden().getDescripcion()));

                }
            } else {
                cr.setResult(GlobalConstant.RESULT_ERROR);
                cr.setResultMessage(CommonMessage.GLOBAL.ERROR.EMPTY_INPUT);
            }

        } catch (Exception e) {
            cr.setResult(GlobalConstant.RESULT_ERROR);
            cr.setResultMessage(CommonMessage.GLOBAL.ERROR.ERROR);
            e.printStackTrace();
        }
        return cr;
    }

    public CommonResponse ejecutarOrdenInternaRutaCritica() {
        cr = cumpleOrdenInternaRutaCritica(null);
        return cr;
    }

    public CommonResponse cumpleOrdenInternaRutaCritica(CommonInput request) {
        cr = new CommonResponse();
        cr.setResult(GlobalConstant.RESULT_ERROR);
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        Boolean isUpdateOrden = false;
        Boolean isAplyOrden = false;
        Integer ordEstado = 0;

        try {
            List<OrdOrden> ordenList;
            if (request != null) {
                ordenList = new ArrayList<>();
                OrdOrden forceOrden = ordOrdenDao.findByCodigoOrden(request.getOrdOrden().getCodigo());
                ordenList.add(forceOrden);

            } else {
                ordenList = ordOrdenDao.ordOrdenListCodigoEstadoEscritorio(CommonConstant.ORDESTADO.PENDIENTE_APLICACION_SISTEMA);
            }

            for (OrdOrden orden : ordenList) {
                Boolean isRutaCritica = this.validaRutaCritica(orden.getIdConsumidor().getIdRuta().getIdRemesa().getId());
                if (request != null) {//&& orden.getCodigo() == request.getOrdOrden().getCodigo()) {
                    isRutaCritica = false;
                }
                if (!isRutaCritica) {
                    UsuarioDto usuarioDto = new UsuarioDto();
                    usuarioDto.setId_usuario_security(orden.getUsuarioActualizacion());

                    NucConsumidor nucConsumidor = nucConsumidorDao.findById(orden.getIdConsumidor().getId());
                    NucServicio nucServicio = nucServicioDao.findByIdConsumidor(orden.getIdConsumidor().getId(), CommonConstant.NUCTIPOSERVICIO.ENERGIA);
                    NucDatosTecnicos nucDatosTecnicos = nucDatosTecnicosDao.findByIdServicio(nucServicio.getId());
                    ordEstado = CommonConstant.ORDESTADO.CUMPLIDA;
                    List<OrdDetalle> ordDetalleList = ordDetalleDao.findByOrden(orden.getId());
                    OrdTipoOrden tipoOrden = orden.getIdTipoOrden();

                    switch (tipoOrden.getCodigo()) {

                        case CommonConstant.ORDTIPOORDEN.ALTA_BAJA_CONDICION_CONSUMIDOR: {
                            this.applyAltaBajaCondicionConsumidorRC(nucConsumidor, ordDetalleList);
                            isAplyOrden = true;
                            break;
                        }
                        case CommonConstant.ORDTIPOORDEN.BAJA_ALTA_CLIENTES_CARTA_FACT: {

                            this.applyAltaBajaCartaFacturaRC(nucConsumidor, ordDetalleList);
                            isAplyOrden = true;
                            break;
                        }

                        case CommonConstant.ORDTIPOORDEN.CAMBIO_TARIFA: {
                            isAplyOrden = this.applyCambioTarifaRC(nucConsumidor, ordDetalleList);
                            isAplyOrden = true;
                            break;
                        }
                        case CommonConstant.ORDTIPOORDEN.CORRECCION_DIRECCION: {
                            for (OrdDetalle ordDetalle : ordDetalleList) {

                                if (ordDetalle.getCampo().equals("direccion")) {
                                    nucConsumidor.setDireccion(ordDetalle.getValorActual());
                                }
                                if (ordDetalle.getCampo().equals("NUMERO")) {
                                    nucConsumidor.setNumeroCasa(ordDetalle.getValorActual());
                                }
                                if (ordDetalle.getCampo().equals("NUMERODEPARTAMENTO")) {
                                    nucConsumidor.setPisoDepartamento(ordDetalle.getValorActual());
                                }
                                if (ordDetalle.getCampo().equals("PISO")) {
                                    nucConsumidor.setNumeroDepartamento(ordDetalle.getValorActual());
                                }

                            }
                            nucConsumidor.setFechaActualizacion(calendar.getTime());
                            nucConsumidor.setUsuarioActualizacion(orden.getUsuarioActualizacion());
                            nucConsumidorDao.update(nucConsumidor);
                            isAplyOrden = true;
                            break;
                        }

                        case CommonConstant.ORDTIPOORDEN.CORRECCION_NOMBRE: {
                            String razonSocial = "";
                            for (OrdDetalle ordDetalle : ordDetalleList) {
                                if (ordDetalle.getCampo().equals("RAZON_SOCIAL")) {
                                    nucConsumidor.setRazonSocial(ordDetalle.getValorActual());
                                    razonSocial = razonSocial + ordDetalle.getValorActual() + " ";
                                }
                                if (ordDetalle.getCampo().equals("APELLIDO_PATERNO")) {
                                    nucConsumidor.setApellidoPaterno(ordDetalle.getValorActual());
                                    razonSocial = razonSocial + ordDetalle.getValorActual() + " ";
                                }
                                if (ordDetalle.getCampo().equals("APELLIDO_MATERNO")) {
                                    nucConsumidor.setApellidoMaterno(ordDetalle.getValorActual());
                                    razonSocial = razonSocial + ordDetalle.getValorActual() + " ";
                                }
                                if (ordDetalle.getCampo().equals("nombre")) {
                                    nucConsumidor.setNombre(ordDetalle.getValorActual());
                                    razonSocial = razonSocial + ordDetalle.getValorActual() + " ";
                                }

                            }
                            nucConsumidor.setRazonSocial(razonSocial);
                            nucConsumidor.setFechaActualizacion(calendar.getTime());
                            nucConsumidor.setUsuarioActualizacion(orden.getUsuarioActualizacion());
                            nucConsumidorDao.update(nucConsumidor);
                            isAplyOrden = true;
                            break;
                        }
                        case CommonConstant.ORDTIPOORDEN.CORRECCION_NUMERO_TELEFONO: {
                            for (OrdDetalle ordDetalle : ordDetalleList) {
                                if (ordDetalle.getCampo().equals("celular")) {
                                    nucConsumidor.setTelefono(ordDetalle.getValorActual());
                                }
                                if (ordDetalle.getCampo().equals("telefono")) {
                                    nucConsumidor.setCelular(ordDetalle.getValorActual());
                                }
                            }
                            nucConsumidor.setFechaActualizacion(calendar.getTime());
                            nucConsumidor.setUsuarioActualizacion(orden.getUsuarioActualizacion());
                            nucConsumidorDao.update(nucConsumidor);
                            isAplyOrden = true;
                            break;
                        }

                        case CommonConstant.ORDTIPOORDEN.SISTEMA_MEDICION: {
                            isAplyOrden = this.applyCorreccionSistemaMedicionRC(nucConsumidor, ordDetalleList);
                            isAplyOrden = true;
                            break;
                        }
                        case CommonConstant.ORDTIPOORDEN.CAMBIO_POBLACION: {
                            isAplyOrden = this.applyCambioPoblacionRC(nucConsumidor, nucConsumidor.getIdRuta().getIdRemesa().getIdArea(), ordDetalleList, usuarioDto);
                            isAplyOrden = true;
                            break;
                        }
                        case CommonConstant.ORDTIPOORDEN.CORRECCION_NRODOCUMENTO_NIT: {
                            Integer idTipoDocumento = null;
                            Integer idCiExpedido = null;
                            for (OrdDetalle ordDetalle : ordDetalleList) {
                                if (ordDetalle.getCampo().equals("tipoDocumento")) {
                                    if (ordDetalle.getValorActual() != null) {
                                        NucTipoDocumento nucTipoDocumento = new NucTipoDocumento();
                                        nucTipoDocumento.setId(Integer.parseInt(ordDetalle.getValorActual()));
                                        nucConsumidor.setIdTipoDocumento(nucTipoDocumento);
                                    } else {
                                        nucConsumidor.setIdTipoDocumento(null);
                                    }
                                    idTipoDocumento = Integer.parseInt(ordDetalle.getValorActual());
                                }
                                if (ordDetalle.getCampo().equals("numeroDocumento")) {
                                    nucConsumidor.setNumeroDocumento(ordDetalle.getValorActual());
                                }
                                if (ordDetalle.getCampo().equals("complementoDocumento")) {
                                    nucConsumidor.setComplemento(ordDetalle.getValorActual());
                                }
                                if (ordDetalle.getCampo().equals("ciExpedido")) {
                                    if (ordDetalle.getValorActual() != null) {
                                        NucCiExpedido nucCiExpedido = new NucCiExpedido();
                                        nucCiExpedido.setId(Integer.parseInt(ordDetalle.getValorActual()));
                                        nucConsumidor.setIdCiExpedido(nucCiExpedido);
                                    } else {
                                        nucConsumidor.setIdCiExpedido(null);
                                    }
                                    idCiExpedido = Integer.parseInt(ordDetalle.getValorActual());
                                }
                                if (ordDetalle.getCampo().equals("tipoDocumentoFactura")) {
                                    if (ordDetalle.getValorActual() != null) {
                                        NucDocumentosSivel nucDocumentosSivel = new NucDocumentosSivel();
                                        nucDocumentosSivel.setId(Integer.parseInt(ordDetalle.getValorActual()));
                                        nucConsumidor.setIdTipoDocumentoFeel(nucDocumentosSivel);
                                    } else {
                                        nucConsumidor.setIdTipoDocumentoFeel(null);
                                    }
                                }
                                if (ordDetalle.getCampo().equals("nit")) {
                                    nucConsumidor.setNit(ordDetalle.getValorActual());
                                }
                            }

                            nucConsumidor.setFechaActualizacion(calendar.getTime());
                            nucConsumidor.setUsuarioActualizacion(orden.getUsuarioActualizacion());
                            nucConsumidorDao.update(nucConsumidor);
                            isAplyOrden = true;

                            //VERIFICACION DE EXISTENCIA EN LA LEY 1886
                            LeyHistorial leyHistorial = leyHistorialDao.finIdConsumidor(nucConsumidor.getId());
                            if (leyHistorial != null) {
                                leyHistorial.setNumeroDocumento(nucConsumidor.getNumeroDocumento());
                                leyHistorial.setIdTipoDocumento(idTipoDocumento);
                                leyHistorial.setIdCiExpedido(idCiExpedido);
                                leyHistorialDao.update(leyHistorial);
                            }
                            break;
                        }
                        //Cambio de estado suspendido -baja
                        /*    case CommonConstant.ORDTIPOORDEN.ELIMINACION_TASA_ASEO: {
                            NucServicio nucServicio = input.getNucServicio();
                            cr = createOrdenInterna(input);
                            applyAltaBajaTasaAseo(consumidor, nucServicio);
                            break;
                        }*/
                    }
                    if (isAplyOrden) {
                        //Actualiza la orden
                        orden.setFechaApliacacion(calendar.getTime());
                        orden.setFechaActualizacion(calendar.getTime());
                        isUpdateOrden = ordOrdenDao.update(orden);

                        if (isUpdateOrden) {
                            ordOrdenEstadosBean.updateEstadoOrden(orden, ordEstado);
                            cr.setResult(GlobalConstant.RESULT_SUCCESS);
                            cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.SUCCESS);
                        }
                    }
                }
            }
        } catch (Exception e) {
            cr.setResultMessage(CommonMessage.GLOBAL.ERROR.ERROR);
            e.printStackTrace();
        }
        return cr;
    }

    public CommonResponse corregirOrdenesMalTranscritas(CommonInput input) {
        cr = new CommonResponse();
        cr.setResult(GlobalConstant.RESULT_ERROR);
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        Boolean isUpdateOrden = false;
        Boolean isUpdateServicio = true;
        Boolean isUpdateMedidor = true;
        Boolean isUpdateMedidorDes = true;

        Integer ordEstado = 0;
        Boolean recojoMedidor = false;
        OrdOrden ordOrden = input.getOrdOrden();
        int tipoCorreccion = input.getTipoCorreccion();
        UsuarioDto usuarioDto = input.getUsuarioDto();

        OrdDetalleDto ordenDetalleDto = new OrdDetalleDto();
        List<OrdDetalleDto> ordenDetalleDtoList = new ArrayList<OrdDetalleDto>();
        SimpleDateFormat frmDate = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");
        try {
            OrdOrden orden = ordOrdenDao.findByCodigoOrden(ordOrden.getCodigo());
            NucConsumidor nucConsumidor = nucConsumidorDao.findById(orden.getIdConsumidor().getId());
            NucServicio nucServicio = nucServicioDao.findByIdConsumidor(orden.getIdConsumidor().getId(), CommonConstant.NUCTIPOSERVICIO.ENERGIA);
            NucDatosTecnicos nucDatosTecnicos = nucDatosTecnicosDao.findByIdServicio(nucServicio.getId());

            OrdTipoOrden ordTipoOrdenReconexion = ordTipoOrdenDao.findByCodigo(CommonConstant.ORDTIPOORDEN.RECONEXION);
            OrdTipoOrden ordTipoOrdenRehabilitacion = ordTipoOrdenDao.findByCodigo(CommonConstant.ORDTIPOORDEN.REHABILITACION_FALTA_PAGO);
            OrdTipoOrden ordTipoOrdenRehabilitacionServicio = ordTipoOrdenDao.findByCodigo(CommonConstant.ORDTIPOORDEN.REHABILITACION_INTERNA);
            OrdTipoOrden ordTipoOrdenMedRecupSusp = ordTipoOrdenDao.findByCodigo(CommonConstant.ORDTIPOORDEN.RECOJO_MEDIDOR_SERVICIO_DADO_BAJA);
            OrdTipoOrden ordTipoOrdenMalTranscrita = ordTipoOrdenDao.findByCodigo(CommonConstant.ORDTIPOORDEN.CORRECCION_ORDEN_MAL_TRANSCRITA);

            OrdOrden ultimaOrdenRecon = ordOrdenDao.findByConsumidorTipoOrden(orden.getIdConsumidor().getId(), ordTipoOrdenReconexion.getId());
            OrdOrden ultimaOrdenRehab = ordOrdenDao.findByConsumidorTipoOrden(orden.getIdConsumidor().getId(), ordTipoOrdenRehabilitacion.getId());
            OrdOrden ultimaOrdenRehabServ = ordOrdenDao.findByConsumidorTipoOrden(orden.getIdConsumidor().getId(), ordTipoOrdenRehabilitacionServicio.getId());
            OrdOrden ultimaOrdenMedRecupSusp = ordOrdenDao.findByConsumidorTipoOrdenEfectivo(orden.getIdConsumidor().getId(), ordTipoOrdenMedRecupSusp.getId());

            Integer ordenRecon = ultimaOrdenRecon == null ? 0 : ultimaOrdenRecon.getCodigo();
            Integer ordenRehab = ultimaOrdenRehab == null ? 0 : ultimaOrdenRehab.getCodigo();
            Integer ordenRehabServ = ultimaOrdenRehabServ == null ? 0 : ultimaOrdenRehabServ.getCodigo();
            Integer ordenMedRecupSusp = ultimaOrdenMedRecupSusp == null ? 0 : ultimaOrdenMedRecupSusp.getCodigo();

            input.setNucConsumidor(nucConsumidor);
            input.setOrdTipoOrden(ordTipoOrdenMalTranscrita);

            switch (tipoCorreccion) {
                case 1: {//Regresar a campo Se ingresó la Orden de Reconexion/ Suspensión como Trabajo No Realizado 
                    if (orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.CORTE || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.SUSPENSION_FALTA_PAGO
                            || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.RECONEXION || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.REHABILITACION_FALTA_PAGO) {
                        if (orden.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.NO_REALIZADA) {

                            OrdEstado estado = ordEstadoDao.findByCodigoEstado(CommonConstant.ORDESTADO.CAMPO);
                            orden.setIdEstado(estado);
                            orden.setFechaActualizacion(orden.getFechaImpresion());
                            orden.setFechaCumplimiento(null);
                            orden.setFechaTranscripcion(null);
                            orden.setFechaApliacacion(null);
                            String observacion = orden.getObservacion() + ordOrden.getObservacion() + " Corregida por mantenimiento";
                            orden.setObservacion(observacion);
                            isUpdateOrden = ordOrdenDao.update(orden);

                            ordOrdenInformeDao.deleteOrdenInformeAll(orden.getId());

                            OrdOrdenEstado ordOrdenEstado = ordOrdenEstadoDao.getOrdenEstado(orden.getId(), 11).get(0);
                            if (ordOrdenEstado != null) {
                                ordOrdenEstadoDao.delete(ordOrdenEstado);
                            }

                            //Genera orden interna
                            ordenDetalleDto.setNombre("REGRESAR ORDEN A CAMPO TRABAJO NO REALIZADO");
                            ordenDetalleDto.setValorAnterior("EJECUTADO");
                            ordenDetalleDto.setValorActual("EN CAMPO");
                            ordenDetalleDtoList.add(ordenDetalleDto);
                            input.setOrdDetalleDtoList(ordenDetalleDtoList);
                            this.createOrdenInterna(input);

                            if (isUpdateOrden) {
                                cr.setResult(GlobalConstant.RESULT_SUCCESS);
                                cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.SUCCESS);
                            }

                        } else {
                            cr.setResult(GlobalConstant.RESULT_WARNING);
                            cr.setResultMessage(String.format(CommonMessage.ORDORDEN.WARNING.ESTADO_INCORRECTO_CORRECCION, orden.getIdEstado().getDescripcion()));

                        }
                    } else {
                        cr.setResult(GlobalConstant.RESULT_WARNING);
                        cr.setResultMessage(String.format(CommonMessage.ORDORDEN.WARNING.TIPO_ORDEN_INCORRECTO_CORRECCION, orden.getIdTipoOrden().getDescripcion()));

                    }

                    break;
                }
                case 2: {//Se ingresó la Orden de Corte/Suspensión como Trabajo Ejecutado  y  era Trabajo  No Realizado
                    if (orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.CORTE || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.SUSPENSION_FALTA_PAGO) {
                        if (orden.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.CUMPLIDA || orden.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.PENDIENTE_APLICACION_SISTEMA) {
                            ordEstado = CommonConstant.ORDESTADO.NO_REALIZADA;

                            //Actualiza su estado anterior del servicio
                            nucServicio.setIdEstado(orden.getIdEstadoServicio());
                            if (orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.SUSPENSION_FALTA_PAGO) {
                                nucServicio.setIdSubestado(null);
                            }
                            nucServicioDao.update(nucServicio);

                            OrdInforme ordInforme = ordInformeDao.findById(9); //trabajo no ejecutado
                            OrdOrdenInforme ordOrdenInforme = new OrdOrdenInforme();
                            ordOrdenInforme.setIdInforme(ordInforme);
                            ordOrdenInforme.setIdOrden(orden);
                            ordOrdenInformeDao.create(ordOrdenInforme);

                            List<OrdOrdenInforme> ordOrdenInformeList = ordOrdenInformeDao.getOrdenInforme(orden.getId());
                            if (ordOrdenInformeList != null && !ordOrdenInformeList.isEmpty()) {
                                for (OrdOrdenInforme newOrdOrdenInforme : ordOrdenInformeList) {
                                    ordInforme = ordInformeDao.findById(newOrdOrdenInforme.getIdInforme().getId());
                                    if (ordInforme.getTipoTrabajo() && ordInforme.getCodigo() == CommonConstant.TIPOTRABAJO.RECOJO_MEDIDOR) {
                                        recojoMedidor = true;
                                    }
                                }
                            }

                            //Actualizar medidores y Actualiza historico de medidor
                            if (!orden.getIdTipoOrden().getAsignaMedidor() && orden.getIdTipoOrden().getRetiraMedidor() && recojoMedidor) {
                                isUpdateMedidor = updateMedidor(orden, orden.getIdTipoOrden(), orden.getIdMedidorDesconexion(), orden.getIdEstado().getCodigo(), 'C', usuarioDto);
                            }

                            //ACTUALIZAR EL CORTE COMO NO EJECUTADO
                            CyrCorteReconexion cyrCorteReconexion = cyrCorteReconexionDao.findByIdCorte(orden.getId());
                            if (cyrCorteReconexion != null) {
                                cyrCorteReconexion.setEjecutado(false);
                                cyrCorteReconexion.setFechaActualizacion(calendar.getTime());
                                if (usuarioDto != null) {
                                    cyrCorteReconexion.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                                }
                                cyrCorteReconexionDao.update(cyrCorteReconexion);
                            }
                            //ACTUALIZA EL ESTADO Y EL HISTORICO DE LA ORDEN
                            String observacion = orden.getObservacion() + " " + ordOrden.getObservacion();
                            orden.setObservacion(observacion);
                            Boolean isUpdateEstadoOrden = ordOrdenEstadosBean.updateEstadoOrden(orden, ordEstado);

                            if (isUpdateEstadoOrden) {
                                cr.setResult(GlobalConstant.RESULT_SUCCESS);
                                cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.SUCCESS);
                            }
                        } else {
                            cr.setResult(GlobalConstant.RESULT_WARNING);
                            cr.setResultMessage(String.format(CommonMessage.ORDORDEN.WARNING.ESTADO_INCORRECTO_CORRECCION, orden.getIdEstado().getDescripcion()));

                        }
                    } else {
                        cr.setResult(GlobalConstant.RESULT_WARNING);
                        cr.setResultMessage(String.format(CommonMessage.ORDORDEN.WARNING.TIPO_ORDEN_INCORRECTO_CORRECCION, orden.getIdTipoOrden().getDescripcion()));

                    }
                    break;
                }

                case 3: {//Se Suspendió el Servicio como Cortado del Poste/CAJA DE BARRAS y era Medidor Recogido
                    if (orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.CORTE || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.SUSPENSION_FALTA_PAGO) {
                        if (orden.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.CUMPLIDA || orden.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.PENDIENTE_APLICACION_SISTEMA) {
                            if (orden.getCodigo().compareTo(ordenRecon) > 0 && orden.getCodigo().compareTo(ordenRehab) > 0 && orden.getCodigo().compareTo(ordenRehabServ) > 0 && orden.getCodigo().compareTo(ordenMedRecupSusp) > 0) {
                                OrdInforme ordInformeCP = ordInformeDao.findByCodigo(CommonConstant.TIPOTRABAJO.CORTADO_POSTE);
                                OrdInforme ordInformeCB = ordInformeDao.findByCodigo(CommonConstant.TIPOTRABAJO.CAJA_BARRA);
                                ordOrdenInformeDao.deleteOrdenInforme(orden.getId(), ordInformeCP.getId());
                                ordOrdenInformeDao.deleteOrdenInforme(orden.getId(), ordInformeCB.getId());
                                //preguntar a que estado va volver conectado o cortado
                                OrdInforme ordInforme = ordInformeDao.findByCodigo(CommonConstant.TIPOTRABAJO.RECOJO_MEDIDOR); //trabajo no ejecutado
                                OrdOrdenInforme ordOrdenInforme = new OrdOrdenInforme();
                                ordOrdenInforme.setIdInforme(ordInforme);
                                ordOrdenInforme.setIdOrden(orden);
                                ordOrdenInformeDao.create(ordOrdenInforme);
                                recojoMedidor = true;

                                //Actualizar medidores y Actualiza historico de medidor
                                if (!orden.getIdTipoOrden().getAsignaMedidor() && orden.getIdTipoOrden().getRetiraMedidor() && recojoMedidor) {
                                    isUpdateMedidor = updateMedidor(orden, orden.getIdTipoOrden(), orden.getIdMedidorDesconexion(), orden.getIdEstado().getCodigo(), 'D', usuarioDto);
                                }

                                //ACTUALIZA EL ESTADO Y EL HISTORICO DE LA ORDEN
                                String observacion = orden.getObservacion() + " " + ordOrden.getObservacion();
                                orden.setObservacion(observacion);
                                Boolean isUpdateEstadoOrden = ordOrdenEstadosBean.updateEstadoOrden(orden, orden.getIdEstado().getCodigo());

                                //Genera orden interna
                                ordenDetalleDto.setNombre("TIPO TRABAJO");
                                ordenDetalleDto.setValorAnterior("CORTADO DE POSTE");
                                ordenDetalleDto.setValorActual("MEDIDOR RECOGIDO");
                                ordenDetalleDtoList.add(ordenDetalleDto);
                                input.setOrdDetalleDtoList(ordenDetalleDtoList);
                                this.createOrdenInterna(input);

                                if (isUpdateEstadoOrden) {
                                    cr.setResult(GlobalConstant.RESULT_SUCCESS);
                                    cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.SUCCESS);
                                }
                            } else {
                                cr.setResult(GlobalConstant.RESULT_WARNING);
                                cr.setResultMessage(CommonMessage.ORDORDEN.WARNING.REHABILITACION_EN_CURSO);

                            }
                        } else {
                            cr.setResult(GlobalConstant.RESULT_WARNING);
                            cr.setResultMessage(String.format(CommonMessage.ORDORDEN.WARNING.ESTADO_INCORRECTO_CORRECCION, orden.getIdEstado().getDescripcion()));

                        }
                    } else {
                        cr.setResult(GlobalConstant.RESULT_WARNING);
                        cr.setResultMessage(String.format(CommonMessage.ORDORDEN.WARNING.TIPO_ORDEN_INCORRECTO_CORRECCION, orden.getIdTipoOrden().getDescripcion()));

                    }
                    break;
                }

                case 4: {//Se Suspendió el Servicio como Medidor Recogido y era Cortado del Poste
                    if (orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.CORTE || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.SUSPENSION_FALTA_PAGO) {
                        if (orden.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.CUMPLIDA || orden.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.PENDIENTE_APLICACION_SISTEMA) {
                            if (orden.getCodigo().compareTo(ordenRecon) > 0 && orden.getCodigo().compareTo(ordenRehab) > 0 && orden.getCodigo().compareTo(ordenRehabServ) > 0 && orden.getCodigo().compareTo(ordenMedRecupSusp) > 0) {
                                OrdInforme ordInformeRM = ordInformeDao.findByCodigo(CommonConstant.TIPOTRABAJO.RECOJO_MEDIDOR);
                                ordOrdenInformeDao.deleteOrdenInforme(orden.getId(), ordInformeRM.getId());
                                //preguntar a que estado va volver conectado o cortado
                                OrdInforme ordInforme = ordInformeDao.findByCodigo(CommonConstant.TIPOTRABAJO.CORTADO_POSTE);
                                OrdOrdenInforme ordOrdenInforme = new OrdOrdenInforme();
                                ordOrdenInforme.setIdInforme(ordInforme);
                                ordOrdenInforme.setIdOrden(orden);
                                ordOrdenInformeDao.create(ordOrdenInforme);

                                //Actualizar medidores y Actualiza historico de medidor
                                if (!orden.getIdTipoOrden().getAsignaMedidor() && orden.getIdTipoOrden().getRetiraMedidor()) {
                                    isUpdateMedidor = updateMedidor(orden, orden.getIdTipoOrden(), orden.getIdMedidorDesconexion(), orden.getIdEstado().getCodigo(), 'C', usuarioDto);
                                }

                                //ACTUALIZA EL ESTADO Y EL HISTORICO DE LA ORDEN
                                String observacion = orden.getObservacion() + " " + ordOrden.getObservacion();
                                orden.setObservacion(observacion);
                                Boolean isUpdateEstadoOrden = ordOrdenEstadosBean.updateEstadoOrden(orden, orden.getIdEstado().getCodigo());

                                //Genera orden interna
                                ordenDetalleDto.setNombre("TIPO TRABAJO");
                                ordenDetalleDto.setValorAnterior("MEDIDOR RECOGIDO");
                                ordenDetalleDto.setValorActual("CORTADO DEL POSTE");
                                ordenDetalleDtoList.add(ordenDetalleDto);
                                input.setOrdDetalleDtoList(ordenDetalleDtoList);
                                this.createOrdenInterna(input);

                                if (isUpdateEstadoOrden) {
                                    cr.setResult(GlobalConstant.RESULT_SUCCESS);
                                    cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.SUCCESS);
                                }
                            } else {
                                cr.setResult(GlobalConstant.RESULT_WARNING);
                                cr.setResultMessage(CommonMessage.ORDORDEN.WARNING.REHABILITACION_EN_CURSO);

                            }
                        } else {
                            cr.setResult(GlobalConstant.RESULT_WARNING);
                            cr.setResultMessage(String.format(CommonMessage.ORDORDEN.WARNING.ESTADO_INCORRECTO_CORRECCION, orden.getIdEstado().getDescripcion()));

                        }
                    } else {
                        cr.setResult(GlobalConstant.RESULT_WARNING);
                        cr.setResultMessage(String.format(CommonMessage.ORDORDEN.WARNING.TIPO_ORDEN_INCORRECTO_CORRECCION, orden.getIdTipoOrden().getDescripcion()));

                    }
                    break;
                }

                case 5: {//Modificación de la Fecha y Hora de Cumplimiento
                    if (orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.CORTE
                            || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.SUSPENSION_FALTA_PAGO
                            || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.RECONEXION
                            || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.SUSPENSION_FALTA_PAGO
                            || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.REHABILITACION_FALTA_PAGO) {

                        if (orden.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.CUMPLIDA
                                || orden.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.PENDIENTE_APLICACION_SISTEMA) {

                            Boolean isRutaCritica = this.validaRutaCritica(orden.getIdConsumidor().getIdRuta().getIdRemesa().getId());
                            if (isRutaCritica) {
                                cr.setResultMessage(CommonMessage.ORDORDEN.WARNING.ORDEN_INTERNA_RUTA_CRITICA);
                                cr.setResult(CommonConstant.RESULT_WARNING);
                                return cr;
                            }
                            String fechaCumplimientoAnt = orden.getFechaCumplimiento().toString();
                            orden.setFechaCumplimiento(ordOrden.getFechaCumplimiento());
                            orden.setFechaActualizacion(ordOrden.getFechaCumplimiento());

                            nucServicio.setFechaEstado(ordOrden.getFechaCumplimiento());
                            nucServicioDao.update(nucServicio);

                            //ACTUALIZA EL ESTADO Y EL HISTORICO DE LA ORDEN
                            String observacion = orden.getObservacion() + " " + ordOrden.getObservacion();
                            orden.setObservacion(observacion);
                            isUpdateOrden = ordOrdenDao.update(orden);

                            OrdOrdenEstado estadoCumplida = ordOrdenEstadosDao.getOrdenEstadoEdit(orden.getId(), 13);
                            estadoCumplida.setFechaRegistro(ordOrden.getFechaCumplimiento());
                            estadoCumplida.setFechaActualizacion(ordOrden.getFechaCumplimiento());
                            ordOrdenEstadosDao.update(estadoCumplida);

                            Boolean isUpdateEstadoOrden = ordOrdenEstadosBean.updateEstadoOrden(orden, orden.getIdEstado().getCodigo());

                            //Genera orden interna
                            ordenDetalleDto.setNombre("CORRECION FECHA CUMPLIMIENTO");
                            ordenDetalleDto.setValorAnterior(fechaCumplimientoAnt);
                            ordenDetalleDto.setValorActual(ordOrden.getFechaCumplimiento().toString());
                            ordenDetalleDtoList.add(ordenDetalleDto);
                            input.setOrdDetalleDtoList(ordenDetalleDtoList);
                            this.createOrdenInternaFechas(input);

                            if (isUpdateEstadoOrden) {
                                cr.setOrdOrden(orden);
                                cr.setResult(GlobalConstant.RESULT_SUCCESS);
                                cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.SUCCESS);
                            }
                        } else {
                            cr.setResult(GlobalConstant.RESULT_WARNING);
                            cr.setResultMessage(String.format(CommonMessage.ORDORDEN.WARNING.ESTADO_INCORRECTO_CORRECCION, orden.getIdEstado().getDescripcion()));

                        }
                    } else {
                        cr.setResult(GlobalConstant.RESULT_WARNING);
                        cr.setResultMessage(String.format(CommonMessage.ORDORDEN.WARNING.TIPO_ORDEN_INCORRECTO_CORRECCION, orden.getIdTipoOrden().getDescripcion()));

                    }
                    break;
                }

                case 6: {//Se Suspendió el Servicio como Medidor Recogido y era CAJA DE BARRAS
                    if (orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.CORTE || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.SUSPENSION_FALTA_PAGO) {
                        if (orden.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.CUMPLIDA || orden.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.PENDIENTE_APLICACION_SISTEMA) {
                            if (orden.getCodigo().compareTo(ordenRecon) > 0 && orden.getCodigo().compareTo(ordenRehab) > 0 && orden.getCodigo().compareTo(ordenRehabServ) > 0 && orden.getCodigo().compareTo(ordenMedRecupSusp) > 0) {
                                OrdInforme ordInformeRM = ordInformeDao.findByCodigo(CommonConstant.TIPOTRABAJO.RECOJO_MEDIDOR);
                                ordOrdenInformeDao.deleteOrdenInforme(orden.getId(), ordInformeRM.getId());
                                //preguntar a que estado va volver conectado o cortado
                                OrdInforme ordInforme = ordInformeDao.findByCodigo(CommonConstant.TIPOTRABAJO.CAJA_BARRA);
                                OrdOrdenInforme ordOrdenInforme = new OrdOrdenInforme();
                                ordOrdenInforme.setIdInforme(ordInforme);
                                ordOrdenInforme.setIdOrden(orden);
                                ordOrdenInformeDao.create(ordOrdenInforme);

                                //Actualizar medidores y Actualiza historico de medidor
                                if (!orden.getIdTipoOrden().getAsignaMedidor() && orden.getIdTipoOrden().getRetiraMedidor()) {
                                    isUpdateMedidor = updateMedidor(orden, orden.getIdTipoOrden(), orden.getIdMedidorDesconexion(), orden.getIdEstado().getCodigo(), 'C', usuarioDto);
                                }

                                //ACTUALIZA EL ESTADO Y EL HISTORICO DE LA ORDEN
                                String observacion = orden.getObservacion() + " " + ordOrden.getObservacion();
                                orden.setObservacion(observacion);
                                Boolean isUpdateEstadoOrden = ordOrdenEstadosBean.updateEstadoOrden(orden, orden.getIdEstado().getCodigo());

                                //Genera orden interna
                                ordenDetalleDto.setNombre("TIPO TRABAJO");
                                ordenDetalleDto.setValorAnterior("MEDIDOR RECOGIDO");
                                ordenDetalleDto.setValorActual("CAJA DE BARRA");
                                ordenDetalleDtoList.add(ordenDetalleDto);
                                input.setOrdDetalleDtoList(ordenDetalleDtoList);
                                this.createOrdenInterna(input);

                                if (isUpdateEstadoOrden) {
                                    cr.setResult(GlobalConstant.RESULT_SUCCESS);
                                    cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.SUCCESS);
                                }
                            } else {
                                cr.setResult(GlobalConstant.RESULT_WARNING);
                                cr.setResultMessage(CommonMessage.ORDORDEN.WARNING.REHABILITACION_EN_CURSO);

                            }
                        } else {
                            cr.setResult(GlobalConstant.RESULT_WARNING);
                            cr.setResultMessage(String.format(CommonMessage.ORDORDEN.WARNING.ESTADO_INCORRECTO_CORRECCION, orden.getIdEstado().getDescripcion()));

                        }
                    } else {
                        cr.setResult(GlobalConstant.RESULT_WARNING);
                        cr.setResultMessage(String.format(CommonMessage.ORDORDEN.WARNING.TIPO_ORDEN_INCORRECTO_CORRECCION, orden.getIdTipoOrden().getDescripcion()));

                    }
                    break;
                }

                case 7: {//Corrección de observación de la orden 
                    if (orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.CORTE || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.SUSPENSION_FALTA_PAGO
                            || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.RECONEXION || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.REHABILITACION_FALTA_PAGO) {
                        if (orden.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.CUMPLIDA || orden.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.PENDIENTE_APLICACION_SISTEMA) {

                            String observacionAnt = orden.getObservacion();
                            orden.setObservacion(ordOrden.getObservacion());
                            isUpdateOrden = ordOrdenDao.update(orden);

                            //Genera orden interna
                            ordenDetalleDto.setNombre("CORRECION OBSERVACION");
                            ordenDetalleDto.setValorAnterior(observacionAnt);
                            ordenDetalleDto.setValorActual(ordOrden.getObservacion());
                            ordenDetalleDtoList.add(ordenDetalleDto);
                            input.setOrdDetalleDtoList(ordenDetalleDtoList);
                            this.createOrdenInterna(input);

                            if (isUpdateOrden) {
                                cr.setResult(GlobalConstant.RESULT_SUCCESS);
                                cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.SUCCESS);
                            }

                        } else {
                            cr.setResult(GlobalConstant.RESULT_WARNING);
                            cr.setResultMessage(String.format(CommonMessage.ORDORDEN.WARNING.ESTADO_INCORRECTO_CORRECCION, orden.getIdEstado().getDescripcion()));

                        }
                    } else {
                        cr.setResult(GlobalConstant.RESULT_WARNING);
                        cr.setResultMessage(String.format(CommonMessage.ORDORDEN.WARNING.TIPO_ORDEN_INCORRECTO_CORRECCION, orden.getIdTipoOrden().getDescripcion()));

                    }

                    break;
                }
                case 8: { //Retroceder orden cumplida a campo
                    Boolean isRutaCritica = this.validaRutaCritica(orden.getIdConsumidor().getIdRuta().getIdRemesa().getId());
                    if (isRutaCritica) {
                        cr.setResultMessage(CommonMessage.ORDORDEN.WARNING.ORDEN_INTERNA_RUTA_CRITICA);
                        cr.setResult(CommonConstant.RESULT_WARNING);
                        return cr;
                    }
                    ordenDetalleDto.setNombre("RETROCEDER ORDEN A CAMPO");
                    ordenDetalleDto.setValorAnterior("CUMPLIDA");
                    ordenDetalleDto.setValorActual(ordOrden.getObservacion());
                    ordenDetalleDtoList.add(ordenDetalleDto);
                    input.setOrdDetalleDtoList(ordenDetalleDtoList);

                    this.createOrdenInterna(input);
                    Integer result = ordMantenimientoBean.revertOrderState(ordOrden.getCodigo());
                    if (result == 0) {
                        cr.setResult(GlobalConstant.RESULT_WARNING);
                        cr.setResultMessage(CommonMessage.ORDORDEN.ERROR.RETROCESO_ESTADO);
                    } else {
                        cr.setResult(GlobalConstant.RESULT_SUCCESS);
                        cr.setResultMessage(CommonMessage.ORDORDEN.SUCCESS.SUCCESS);
                    }
                }
                case 9: {//Modificación de la Fecha y Hora de Impresion
                    if (orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.CORTE
                            || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.SUSPENSION_FALTA_PAGO
                            || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.RECONEXION
                            || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.SUSPENSION_FALTA_PAGO
                            || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.REHABILITACION_FALTA_PAGO) {

                        if (orden.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.CAMPO) {
                            orden.setFechaImpresion(ordOrden.getFechaImpresion());
                            orden.setFechaActualizacion(ordOrden.getFechaImpresion());
                            String observacion = orden.getObservacion() + " " + ordOrden.getObservacion();
                            orden.setObservacion(observacion);
                            //ACTUALIZA EL ESTADO Y EL HISTORICO DE LA ORDEN
                            OrdOrdenEstado ordestados = ordOrdenEstadoDao.getOrdenEstadoEdit(orden.getId(), orden.getIdEstado().getCodigo());
                            ordestados.setFechaRegistro(ordOrden.getFechaImpresion());
                            ordestados.setFechaActualizacion(calendar.getTime());
                            ordOrdenEstadoDao.update(ordestados);
                            cr.setOrdOrden(orden);
                            cr.setResult(GlobalConstant.RESULT_SUCCESS);
                            cr.setResultMessage(CommonMessage.ORDORDEN.SUCCESS.SUCCESS);
                        } else {
                            cr.setResult(GlobalConstant.RESULT_WARNING);
                            cr.setResultMessage(String.format(CommonMessage.ORDORDEN.WARNING.ESTADO_INCORRECTO_CORRECCION, orden.getIdEstado().getDescripcion()));

                        }
                    } else {
                        cr.setResult(GlobalConstant.RESULT_WARNING);
                        cr.setResultMessage(String.format(CommonMessage.ORDORDEN.WARNING.TIPO_ORDEN_INCORRECTO_CORRECCION, orden.getIdTipoOrden().getDescripcion()));

                    }
                    break;
                }

                case 10: {//Modificacion de la Fecha y Hora de Cumplimiento Revisado y/o Campo
                    Predicate<OrdOrden> validDaysToRevert = (o) -> ordMantenimientoBean.countDays.apply(o.getFechaRegistro()) <= CommonConstant.MANTENIMIENTO_CONF.MAX_DIAS_REVERTIR;
                    boolean validToRevert = validDaysToRevert.test(orden);
                    if (validToRevert) {
                        if (orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.CORTE
                                || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.SUSPENSION_FALTA_PAGO
                                || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.RECONEXION
                                || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.REHABILITACION_FALTA_PAGO) {
                            //todo CONTROLAS DIAS 
                            if (orden.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.CUMPLIDA
                                    || orden.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.PENDIENTE_APLICACION_SISTEMA
                                    || orden.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.REVISADA
                                    || orden.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.CAMPO) {

                                String fechaCumplimientoAnt = orden.getFechaCumplimiento() == null ? "" : orden.getFechaCumplimiento().toString();
                                String fechaRevisadoAnt = orden.getFechaAsignacionMedidor() == null ? "" : orden.getFechaAsignacionMedidor().toString();
                                String fechaImpresionAnt = orden.getFechaImpresion() == null ? "" : orden.getFechaImpresion().toString();

                                orden.setFechaCumplimiento(ordOrden.getFechaCumplimiento());
                                orden.setFechaAsignacionMedidor(ordOrden.getFechaAsignacionMedidor());
                                orden.setFechaImpresion(ordOrden.getFechaImpresion());
                                orden.setFechaActualizacion(ordOrden.getFechaCumplimiento());

                                //TODO CONTROL FECHA CUMPLIMIENTO NULO
                                nucServicio.setFechaEstado(ordOrden.getFechaCumplimiento());
                                nucServicioDao.update(nucServicio);

                                //ACTUALIZA EL ESTADO Y EL HISTORICO DE LA ORDEN
                                String observacion = orden.getObservacion() + " " + ordOrden.getObservacion();
                                orden.setObservacion(observacion);
                                isUpdateOrden = ordOrdenDao.update(orden);

                                OrdOrdenEstado estadoRevisado = ordOrdenEstadosDao.getOrdenEstadoEdit(orden.getId(), 3);
                                estadoRevisado.setFechaRegistro(ordOrden.getFechaAsignacionMedidor());
                                estadoRevisado.setFechaActualizacion(ordOrden.getFechaAsignacionMedidor());
                                ordOrdenEstadosDao.update(estadoRevisado);
                                OrdOrdenEstado estadoCampo = ordOrdenEstadosDao.getOrdenEstadoEdit(orden.getId(), 4);
                                estadoCampo.setFechaRegistro(ordOrden.getFechaImpresion());
                                estadoCampo.setFechaActualizacion(ordOrden.getFechaImpresion());
                                ordOrdenEstadosDao.update(estadoCampo);
                                OrdOrdenEstado estadoCumplida = ordOrdenEstadosDao.getOrdenEstadoEdit(orden.getId(), 13);
                                estadoCumplida.setFechaRegistro(ordOrden.getFechaCumplimiento());
                                estadoCumplida.setFechaActualizacion(ordOrden.getFechaCumplimiento());
                                ordOrdenEstadosDao.update(estadoCumplida);

                                Boolean isUpdateEstadoOrden = ordOrdenEstadosBean.updateEstadoOrden(orden, orden.getIdEstado().getCodigo());

                                //Genera orden interna
                                ordenDetalleDto = new OrdDetalleDto();
                                ordenDetalleDto.setNombre("CORRECION FECHA CUMPLIMIENTO");
                                ordenDetalleDto.setValorAnterior(fechaCumplimientoAnt);
                                ordenDetalleDto.setValorActual(frmDate.format(ordOrden.getFechaCumplimiento()));
                                ordenDetalleDtoList.add(ordenDetalleDto);
                                ordenDetalleDto = new OrdDetalleDto();
                                ordenDetalleDto.setNombre("CORRECION FECHA ASIGNACION MEDIDOR");
                                ordenDetalleDto.setValorAnterior(fechaRevisadoAnt);
                                ordenDetalleDto.setValorActual(frmDate.format(ordOrden.getFechaAsignacionMedidor()));
                                ordenDetalleDtoList.add(ordenDetalleDto);
                                ordenDetalleDto = new OrdDetalleDto();
                                ordenDetalleDto.setNombre("CORRECION FECHA IMPRESION");
                                ordenDetalleDto.setValorAnterior(fechaImpresionAnt);
                                ordenDetalleDto.setValorActual(frmDate.format(ordOrden.getFechaImpresion()));
                                ordenDetalleDtoList.add(ordenDetalleDto);
                                input.setOrdDetalleDtoList(ordenDetalleDtoList);
                                this.createOrdenInternaFechas(input);

                                if (isUpdateEstadoOrden) {
                                    cr.setOrdOrden(orden);
                                    cr.setResult(GlobalConstant.RESULT_SUCCESS);
                                    cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.SUCCESS);
                                }
                            } else {
                                cr.setResult(GlobalConstant.RESULT_WARNING);
                                cr.setResultMessage(String.format(CommonMessage.ORDORDEN.WARNING.ESTADO_INCORRECTO_CORRECCION, orden.getIdEstado().getDescripcion()));

                            }
                        } else {
                            cr.setResult(GlobalConstant.RESULT_WARNING);
                            cr.setResultMessage(String.format(CommonMessage.ORDORDEN.WARNING.TIPO_ORDEN_INCORRECTO_CORRECCION, orden.getIdTipoOrden().getDescripcion()));

                        }
                    } else {
                        cr.setResult(GlobalConstant.RESULT_WARNING);
                        cr.setResultMessage("No se puede modificar, sobrepaso el tiempo maximo para hacerlo.");
                    }
                    break;
                }

                case 11: {//Modificacion de la Fecha y Hora Revisado y/o Campo
                    Predicate<OrdOrden> validDaysToRevert = (o) -> ordMantenimientoBean.countDays.apply(o.getFechaRegistro()) <= CommonConstant.MANTENIMIENTO_CONF.MAX_DIAS_REVERTIR;
                    boolean validToRevert = validDaysToRevert.test(orden);
                    if (validToRevert) {
                        //todo CONTROLAS DIAS 
                        if (orden.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.REVISADA
                                || orden.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.CAMPO) {

                            String fechaRevisadoAnt = orden.getFechaAsignacionMedidor() == null ? "" : orden.getFechaAsignacionMedidor().toString();
                            String fechaImpresionAnt = orden.getFechaImpresion() == null ? "" : orden.getFechaImpresion().toString();

                            orden.setFechaAsignacionMedidor(ordOrden.getFechaAsignacionMedidor());
                            orden.setFechaImpresion(ordOrden.getFechaImpresion());
                            orden.setFechaActualizacion(ordOrden.getFechaImpresion());

                            //ACTUALIZA EL ESTADO Y EL HISTORICO DE LA ORDEN
                            String observacion = orden.getObservacion() + " " + ordOrden.getObservacion();
                            orden.setObservacion(observacion);
                            isUpdateOrden = ordOrdenDao.update(orden);

                            Boolean isUpdateEstadoOrden = ordOrdenEstadosBean.updateEstadoOrden(orden, orden.getIdEstado().getCodigo());
                            OrdOrdenEstado estadoCampo = ordOrdenEstadosDao.getOrdenEstadoEdit(orden.getId(), 4);
                            estadoCampo.setFechaRegistro(ordOrden.getFechaImpresion());
                            estadoCampo.setFechaActualizacion(ordOrden.getFechaImpresion());
                            ordOrdenEstadosDao.update(estadoCampo);
                            OrdOrdenEstado estadoRevisado = ordOrdenEstadosDao.getOrdenEstadoEdit(orden.getId(), 3);
                            estadoRevisado.setFechaRegistro(ordOrden.getFechaAsignacionMedidor());
                            estadoRevisado.setFechaActualizacion(ordOrden.getFechaAsignacionMedidor());
                            ordOrdenEstadosDao.update(estadoRevisado);

                            //Genera orden interna
                            ordenDetalleDto = new OrdDetalleDto();
                            ordenDetalleDto.setNombre("CORRECION FECHA ASIGNACION MEDIDOR");
                            ordenDetalleDto.setValorAnterior(fechaRevisadoAnt);
                            ordenDetalleDto.setValorActual(frmDate.format(ordOrden.getFechaAsignacionMedidor()));
                            ordenDetalleDtoList.add(ordenDetalleDto);
                            ordenDetalleDto = new OrdDetalleDto();
                            ordenDetalleDto.setNombre("CORRECION FECHA IMPRESION");
                            ordenDetalleDto.setValorAnterior(fechaImpresionAnt);
                            ordenDetalleDto.setValorActual(frmDate.format(ordOrden.getFechaImpresion()));
                            ordenDetalleDtoList.add(ordenDetalleDto);
                            input.setOrdDetalleDtoList(ordenDetalleDtoList);
                            this.createOrdenInternaFechas(input);

                            if (isUpdateEstadoOrden) {
                                cr.setOrdOrden(orden);
                                cr.setResult(GlobalConstant.RESULT_SUCCESS);
                                cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.SUCCESS);
                            }
                        } else {
                            cr.setResult(GlobalConstant.RESULT_WARNING);
                            cr.setResultMessage(String.format(CommonMessage.ORDORDEN.WARNING.ESTADO_INCORRECTO_CORRECCION, orden.getIdEstado().getDescripcion()));

                        }
                    } else {
                        cr.setResult(GlobalConstant.RESULT_WARNING);
                        cr.setResultMessage("No se puede modificar, sobrepaso el tiempo maximo para hacerlo.");
                    }
                    break;
                }

            }
        } catch (Exception e) {
            cr.setResultMessage(CommonMessage.GLOBAL.ERROR.ERROR);
            e.printStackTrace();
        }
        return cr;
    }

    public CommonResponse cambiarSectorDestino(CommonInput input) {
        cr = new CommonResponse();
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        List<OrdOrden> ordOrdenList = input.getOrdOrdenList();
        UsuarioDto usuarioDto = input.getUsuarioDto();
        NucSector nucSector = input.getNucSector();
        Boolean isUpdateOrden = false;
        try {
            if (ordOrdenList != null && nucSector != null) {
                NucSector sector = nucSectorDao.findById(nucSector.getId());
                for (OrdOrden ordOrden : ordOrdenList) {
                    OrdOrden orden = ordOrdenDao.findById(ordOrden.getId());
                    if (orden.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.CUMPLIDA || orden.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.PENDIENTE_APLICACION_SISTEMA || orden.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.ANULADA) {
                        cr.setResult(GlobalConstant.RESULT_WARNING);
                        cr.setResultMessage(String.format(CommonMessage.ORDORDEN.WARNING.ESTADO_INCORRECTO_CAMBIAR_SECTOR, orden.getIdEstado().getDescripcion()));

                        return cr;
                    }
                    orden.setIdSectorDestino(sector);
                    orden.setFechaActualizacion(calendar.getTime());
                    if (usuarioDto != null) {
                        orden.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                    }
                    ordOrdenDao.update(orden);
                }
                if (isUpdateOrden) {
                    cr.setResult(GlobalConstant.RESULT_SUCCESS);
                    cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.SUCCESS);
                }
            } else {
                cr.setResult(GlobalConstant.RESULT_ERROR);
                cr.setResultMessage(CommonMessage.GLOBAL.ERROR.EMPTY_INPUT);
            }

        } catch (Exception e) {
            cr.setResult(CommonConstant.RESULT_ERROR);
            cr.setResultMessage(e.getMessage());
            e.printStackTrace();
        }
        return cr;
    }

    public Boolean applyAltaBajaCondicionConsumidorRC(NucConsumidor consumidor, List<OrdDetalle> ordenDetalleList) {
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        Boolean isCondicionConsumidor = false;
        try {

            Boolean isEstadoOrden = false;

            Boolean isOrdDetalle = false;
            if (ordenDetalleList != null) {
                for (OrdDetalle ordDetalle : ordenDetalleList) {
                    //String[] codigoCondiciones = ordDetalle.getValorActual().split(",");
                    String condicion = ordDetalle.getValorActual();//.split(",");
                    if (condicion != null) {
                        condicion = condicion.replace(',', ' ').trim();
                    }
                    //for (String condicion : codigoCondiciones) {
                    if (condicion != null) {
                        NucConsCon oldNucConsCon = nucConsConDao.findByConsumidorCondicion(consumidor.getId(), new Integer(condicion));
                        if (oldNucConsCon == null) {
                            NucConsumidorCondicion newNucConsumidorCondicion = nucConsumidorCondicionDao.findByCodigo(new Integer(condicion));
                            NucConsCon nucConsCon = new NucConsCon();
                            nucConsCon.setIdConsumidor(consumidor);
                            nucConsCon.setIdConsumidorCondicion(newNucConsumidorCondicion);
                            nucConsCon.setFechaInicio(calendar.getTime());
                            nucConsCon.setActivo(true);
                            nucConsCon.setFechaRegistro(calendar.getTime());
                            nucConsCon.setFechaActualizacion(calendar.getTime());
                            nucConsCon.setUsuarioRegistro(ordDetalle.getIdOrden().getUsuarioActualizacion());
                            nucConsCon.setUsuarioActualizacion(ordDetalle.getIdOrden().getUsuarioActualizacion());
                            nucConsConDao.create(nucConsCon);
                        }
                    }
                    //}
                    List<NucConsCon> oldNucConsConList = nucConsConDao.findByIdConsumidor(consumidor.getId());
                    for (NucConsCon oldNucConsCon : oldNucConsConList) {
                        Boolean isExiste = false;
                        //for (String condicion : codigoCondiciones) {
                        if (condicion != null) {
                            NucConsumidorCondicion newNucConsumidorCondicion = nucConsumidorCondicionDao.findByCodigo(new Integer(condicion));
                            if (oldNucConsCon.getIdConsumidorCondicion().getCodigo() == newNucConsumidorCondicion.getCodigo()) {
                                isExiste = true;
                            }
                        }
                        //}
                        if (!isExiste) {
                            oldNucConsCon.setActivo(false);
                            oldNucConsCon.setFechaFin(calendar.getTime());
                            oldNucConsCon.setFechaActualizacion(calendar.getTime());
                            oldNucConsCon.setUsuarioRegistro(ordDetalle.getIdOrden().getUsuarioActualizacion());
                            oldNucConsCon.setUsuarioActualizacion(ordDetalle.getIdOrden().getUsuarioActualizacion());
                            nucConsConDao.update(oldNucConsCon);
                        }
                    }
                    isCondicionConsumidor = true;
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return isCondicionConsumidor;
    }

    public Boolean applyAltaBajaCartaFacturaRC(NucConsumidor consumidor, List<OrdDetalle> ordenDetalleList) {
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        Boolean isCartaFactura = false;
        try {

            for (OrdDetalle ordDetalle : ordenDetalleList) {
                if (ordDetalle.getCampo().equals("codigo_carta_factura")) {
                    if (!ordDetalle.getValorActual().equals("")) {
                        NucCartaFactura nucCartaFactura = nucCartaFacturaDao.findByCodigo(new Integer(ordDetalle.getValorActual()));
                        if (nucCartaFactura != null) {
                            consumidor.setIdCartaFactura(nucCartaFactura);
                            consumidor.setFechaActualizacion(calendar.getTime());
                            consumidor.setUsuarioActualizacion(ordDetalle.getIdOrden().getUsuarioActualizacion());
                            nucConsumidorDao.update(consumidor);
                        }
                    } else {
                        consumidor.setIdCartaFactura(null);
                        consumidor.setFechaActualizacion(calendar.getTime());
                        consumidor.setUsuarioActualizacion(ordDetalle.getIdOrden().getUsuarioActualizacion());
                        nucConsumidorDao.update(consumidor);
                    }

                }
                isCartaFactura = true;

            }

        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return isCartaFactura;
    }

    public Boolean applyCambioTarifaRC(NucConsumidor consumidor, List<OrdDetalle> ordenDetalleList) {
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        Boolean isCorrigeCategoria = false;
        try {

            if (consumidor != null) {
                //incluir validacion de punto de medida

                NucServicio servicio = nucServicioDao.findByIdConsumidor(consumidor.getId(), CommonConstant.NUCTIPOSERVICIO.ENERGIA);
                NucDatosTecnicos datosTecnicos = nucDatosTecnicosDao.findByIdServicio(servicio.getId());
                NucServicio servicioTAS = nucServicioDao.findByIdConsumidor(consumidor.getId(), CommonConstant.NUCTIPOSERVICIO.TAS);
                for (OrdDetalle ordDetalle : ordenDetalleList) {
                    if (ordDetalle.getCampo().equals("ACTIVIDAD_ECONOMICA")) {
                        NucActividadEconomica nucActividadEconomica = nucActividadEconomicaDao.findByCodigo(ordDetalle.getValorActual().toString());
                        consumidor.setIdActividadEconomica(nucActividadEconomica);
                        consumidor.setFechaActualizacion(calendar.getTime());
                        consumidor.setUsuarioActualizacion(ordDetalle.getIdOrden().getUsuarioActualizacion());
                        nucConsumidorDao.update(consumidor);

                    }
                    if (ordDetalle.getCampo().equals("codigo_categoria")) {
                        NucCategoria nucCategoria = nucCategoriaDao.finByCodigo(new Integer(ordDetalle.getValorActual()));

                        servicio.setIdCategoria(nucCategoria);
                        servicio.setFechaActualizacion(calendar.getTime());
                        servicio.setUsuarioActualizacion(ordDetalle.getIdOrden().getUsuarioActualizacion());
                        nucServicioDao.update(servicio);

                        //Verifica si el tipo de categoria es domiciliaria para continuar con el beneficio de la ley 1886
                        if (nucCategoria.getIdTipoCategoria().getId().compareTo(et.com.ejb.atc.data.CommonConstant.NUCTIPOCATEGORIA.DOMICILIARIO) != 0) {
                            Integer idAgencia = null;
                            if (ordDetalle.getIdOrden().getIdAgencia() != null) {
                                idAgencia = ordDetalle.getIdOrden().getIdAgencia().getId();
                            }
                            leyHistorialBean.darBajaBeneficioDesdeSolicitud(consumidor.getId(), et.com.ejb.ley.data.CommonConstant.CodigoMotivoBajaLey1886.CAMBIOCATEGORIA, "", ordDetalle.getIdOrden().getUsuarioActualizacion(), idAgencia);
                        }

                        //VERIFICA CANTIDAD DE VARIOS SERVICIOS
                        //this.validaVariosServicios(consumidor, nucCategoria);
                    }
                    if (ordDetalle.getCampo().equals("CODIGO_PUNTO_SUMINISTRO")) {
                        NucNivelTension nucNivelTension = nucNivelTensionDao.findByCodigo(new Integer(ordDetalle.getValorActual()));
                        datosTecnicos.setIdPuntoSuministro(nucNivelTension);
                        nucDatosTecnicosDao.update(datosTecnicos);
                    }

                    isCorrigeCategoria = true;
                }

                Boolean isCotizaTAS = this.verificaCotizaTAS(consumidor.getIdRuta());
                if (isCotizaTAS) {
                    NucAsignaAseo nucAsignaAseo = nucAsignaAseoDao.findByAreaCategoria(consumidor.getIdRuta().getIdRemesa().getIdArea().getId(), servicio.getIdCategoria().getId());
                    NucEstado nucEstadoConectado = nucEstadoDao.findByCodigo(CommonConstant.NUCESTADOS.CONECTADO);
                    if (servicioTAS != null) {

                        servicioTAS.setIdConsumidor(consumidor);
                        servicioTAS.setIdCategoria(nucAsignaAseo.getIdCategoriaAseo());
                        servicioTAS.setIdEstado(nucEstadoConectado);

                        nucServicioDao.update(servicioTAS);
                    } else {
                        NucServicio nucServicioTAS = new NucServicio();
                        nucServicioTAS.setIdConsumidor(consumidor);
                        nucServicioTAS.setIdCategoria(nucAsignaAseo.getIdCategoriaAseo());
                        nucServicioTAS.setIdEstado(nucEstadoConectado);

                        nucServicioDao.create(nucServicioTAS);
                    }

                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return isCorrigeCategoria;
    }

    public CommonResponse reaunudarCorteSuepension(CommonInput input) {
        cr = new CommonResponse();
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        UsuarioDto usuarioDto = input.getUsuarioDto();
        OrdOrden ordOrden = input.getOrdOrden();
        OrdEstado ordEstadoReanudar = ordEstadoDao.findByCodigoEstado(CommonConstant.ORDESTADO.REANUDADA);
        try {
            if (ordOrden != null) {
                OrdOrden orden = ordOrdenDao.findById(ordOrden.getId());
                if (orden.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.SUSPENDIDA) {

                    orden.setFechaActualizacion(calendar.getTime());
                    orden.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                    ordOrdenDao.update(orden);
                    ordOrdenEstadosBean.updateEstadoOrden(orden, CommonConstant.ORDESTADO.REANUDADA);

                    //ACTUALIZA LAS ORDENES ASOCIADAS
                    Boolean isOrdenSolicitud = false;
                    SolSolicitud solicitud = new SolSolicitud();
                    List<SolSolicitudOrden> solSolicitudOrdenList = solSolicitudOrdenDao.findByIdOrdenList(orden.getId());
                    for (SolSolicitudOrden solicitudOrden : solSolicitudOrdenList) {
                        OrdOrden ordenAsociada = ordOrdenDao.findById(solicitudOrden.getOrdId().getId());
                        if (orden.getId() != ordenAsociada.getId()) {
                            ordenAsociada.setFechaActualizacion(calendar.getTime());
                            ordenAsociada.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                            ordOrdenDao.update(ordenAsociada);
                            ordOrdenEstadosBean.updateEstadoOrden(ordenAsociada, CommonConstant.ORDESTADO.REANUDADA);

                        }
                        isOrdenSolicitud = true;

                    }
                    if (isOrdenSolicitud) {
                        solSolicitudEstadosBean.updateEstadoSolicitud(solicitud, et.com.ejb.atc.data.CommonConstant.SOLESTADO.REANUDADA_ATEC, usuarioDto);
                    }
                    cr.setResult(GlobalConstant.RESULT_SUCCESS);
                    cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.SUCCESS);

                } else {
                    cr.setResult(GlobalConstant.RESULT_WARNING);
                    cr.setResultMessage(String.format(CommonMessage.ORDORDEN.WARNING.REANUDAR_ORDEN_ESTADO_INCORRETO, orden.getIdEstado().getDescripcion()));
                }
            } else {
                cr.setResult(GlobalConstant.RESULT_ERROR);
                cr.setResultMessage(CommonMessage.GLOBAL.ERROR.EMPTY_INPUT);
            }

        } catch (Exception e) {
            cr.setResult(GlobalConstant.RESULT_ERROR);
            cr.setResultMessage(CommonMessage.GLOBAL.ERROR.ERROR);
            e.printStackTrace();
        }
        return cr;
    }

    public CommonResponse retenerCorteSuepension(CommonInput input) {
        cr = new CommonResponse();
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        UsuarioDto usuarioDto = input.getUsuarioDto();
        OrdOrden ordOrden = input.getOrdOrden();
        OrdEstado ordEstadoReanudar = ordEstadoDao.findByCodigoEstado(CommonConstant.ORDESTADO.REANUDADA);
        try {
            if (ordOrden != null) {
                OrdOrden orden = ordOrdenDao.findById(ordOrden.getId());
                if (orden.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.SUSPENDIDA) {

                    orden.setFechaActualizacion(calendar.getTime());
                    orden.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                    ordOrdenDao.update(orden);
                    ordOrdenEstadosBean.updateEstadoOrden(orden, CommonConstant.ORDESTADO.REANUDADA);

                    //ACTUALIZA LAS ORDENES ASOCIADAS
                    Boolean isOrdenSolicitud = false;
                    SolSolicitud solicitud = new SolSolicitud();
                    List<SolSolicitudOrden> solSolicitudOrdenList = solSolicitudOrdenDao.findByIdOrdenList(orden.getId());
                    for (SolSolicitudOrden solicitudOrden : solSolicitudOrdenList) {
                        OrdOrden ordenAsociada = ordOrdenDao.findById(solicitudOrden.getOrdId().getId());
                        if (orden.getId() != ordenAsociada.getId()) {
                            ordenAsociada.setFechaActualizacion(calendar.getTime());
                            ordenAsociada.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                            ordOrdenDao.update(ordenAsociada);
                            ordOrdenEstadosBean.updateEstadoOrden(ordenAsociada, CommonConstant.ORDESTADO.REANUDADA);

                        }
                        isOrdenSolicitud = true;

                    }
                    if (isOrdenSolicitud) {
                        solSolicitudEstadosBean.updateEstadoSolicitud(solicitud, et.com.ejb.atc.data.CommonConstant.SOLESTADO.REANUDADA_ATEC, usuarioDto);
                    }
                    cr.setResult(GlobalConstant.RESULT_SUCCESS);
                    cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.SUCCESS);

                } else {
                    cr.setResult(GlobalConstant.RESULT_WARNING);
                    cr.setResultMessage(String.format(CommonMessage.ORDORDEN.WARNING.REANUDAR_ORDEN_ESTADO_INCORRETO, orden.getIdEstado().getDescripcion()));
                }
            } else {
                cr.setResult(GlobalConstant.RESULT_ERROR);
                cr.setResultMessage(CommonMessage.GLOBAL.ERROR.EMPTY_INPUT);
            }

        } catch (Exception e) {
            cr.setResult(GlobalConstant.RESULT_ERROR);
            cr.setResultMessage(CommonMessage.GLOBAL.ERROR.ERROR);
            e.printStackTrace();
        }
        return cr;
    }

    public Boolean applyCambioSuspendidoBaja(NucConsumidor consumidor, List<OrdDetalleDto> ordenDetalleDtoList, UsuarioDto usuarioDto) {
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        Boolean isCambioEstado = false;
        try {

            for (OrdDetalleDto ordDetalleDto : ordenDetalleDtoList) {
                if (ordDetalleDto.getNombre().equals("codigo_estado")) {
                    NucServicio servicio = nucServicioDao.findByIdConsumidor(consumidor.getId(), CommonConstant.NUCTIPOSERVICIO.ENERGIA);
                    NucServicio servicioTap = nucServicioDao.findByIdConsumidor(consumidor.getId(), CommonConstant.NUCTIPOSERVICIO.TAP);
                    NucServicio servicioTas = nucServicioDao.findByIdConsumidor(consumidor.getId(), CommonConstant.NUCTIPOSERVICIO.TAS);
                    NucEstado nucEstadoConcetado = nucEstadoDao.findByCodigo(CommonConstant.NUCESTADOS.CONECTADO);
                    NucEstado nucEstado = nucEstadoDao.findByCodigo(new Integer(ordDetalleDto.getValorActual()));

                    if (nucEstado != null) {
                        if (nucEstado.getCodigo() == CommonConstant.NUCESTADOS.SUSPENDIDO) {
                            OrdTipoOrden tipoOrdenSusp = ordTipoOrdenDao.findByCodigo(CommonConstant.ORDTIPOORDEN.SUSPENSION_FALTA_PAGO);
                            OrdOrden ultimaOrdenSusp = ordOrdenDao.findByConsumidorTipoOrden(consumidor.getId(), tipoOrdenSusp.getId());
                            if (ultimaOrdenSusp != null) {
                                NucSubestado nucSubestado = nucSubEstadoDao.findByCodigo(CommonConstant.NUC_SUBESTADO.SUSPENSION_FALTAPAGO);
                                servicio.setIdSubestado(nucSubestado);
                            } else {
                                NucSubestado nucSubestado = nucSubEstadoDao.findByCodigo(CommonConstant.NUC_SUBESTADO.SUSPENSION_TEMPORAL);
                                servicio.setIdSubestado(nucSubestado);
                            }
                            //ACTUALIZA EL ESTADO DEL TAP Y TAS
                            if (servicioTap != null) {
                                servicioTap.setIdEstado(nucEstadoConcetado);
                                servicioTap.setFechaActualizacion(calendar.getTime());
                                servicioTap.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                                nucServicioDao.update(servicioTap);
                            }
                            if (servicioTas != null) {
                                servicioTas.setIdEstado(nucEstadoConcetado);
                                servicioTas.setFechaActualizacion(calendar.getTime());
                                servicioTas.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                                nucServicioDao.update(servicioTas);
                            }
                        }
                        servicio.setIdEstado(nucEstado);
                        servicio.setFechaActualizacion(calendar.getTime());
                        servicio.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                        nucServicioDao.update(servicio);
                    }

                }
                isCambioEstado = true;

            }

        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return isCambioEstado;
    }

    /**
     * Actualiza el estado del consumidor
     *
     * @param consumidor
     * @param ordenDetalleDtoList
     * @param usuarioDto
     * @return
     */
    private Boolean applyCambioEstadoConsumidor(NucConsumidor consumidor, List<OrdDetalleDto> ordenDetalleDtoList, UsuarioDto usuarioDto) {
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        Boolean isCambioEstado = false;
        try {

            for (OrdDetalleDto ordDetalleDto : ordenDetalleDtoList) {
                if (ordDetalleDto.getNombre().equals("estadoAsignado")) {
                    NucServicio servicio = nucServicioDao.findByIdConsumidor(consumidor.getId(), CommonConstant.NUCTIPOSERVICIO.ENERGIA);
                    NucEstado nucEstado = nucEstadoDao.findByCodigo(new Integer(ordDetalleDto.getValorActual()));
                    if (nucEstado != null && nucEstado != servicio.getIdEstado()) {
                        servicio.setIdEstado(nucEstado);
                        servicio.setFechaActualizacion(calendar.getTime());
                        servicio.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                        if (nucEstado.getCodigo() == CommonConstant.NUCESTADOS.SUSPENDIDO) {
                            NucSubestado subestado = nucSubEstadoDao.findByCodigo(CommonConstant.NUC_SUBESTADO.SUSPENSION_FALTAPAGO);
                            servicio.setIdSubestado(subestado);
                        } else {
                            servicio.setIdSubestado(null);
                        }
                        nucServicioDao.update(servicio);
                        isCambioEstado = true;
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return isCambioEstado;
    }

    public CommonResponse validaEstadoConsumidorBajaSuspendido(CommonInput input) {
        cr = new CommonResponse();
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        try {
            NucConsumidor nucConsumidor = input.getNucConsumidor();
            if (nucConsumidor == null || nucConsumidor.getId() == null) {
                cr.setResult(CommonConstant.RESULT_WARNING);
                cr.setResultMessage(CommonMessage.GLOBAL.ERROR.EMPTY_INPUT);
                return cr;
            }
            NucConsumidor consumidor = nucConsumidorDao.findById(nucConsumidor.getId());
            NucServicio servicio = nucServicioDao.findByIdConsumidor(nucConsumidor.getId(), CommonConstant.NUCTIPOSERVICIO.ENERGIA);
            NucEstado codigoEstadoServicio = servicio.getIdEstado();
            NucSubestado codigoSubEstadoServicio = servicio.getIdSubestado();
            if (codigoEstadoServicio != null
                    && (codigoEstadoServicio.getCodigo() == CommonConstant.NUCESTADOS.BAJA || (codigoEstadoServicio.getCodigo() == CommonConstant.NUCESTADOS.SUSPENDIDO
                    && codigoSubEstadoServicio.getCodigo() == CommonConstant.NUC_SUBESTADO.SUSPENSION_FALTAPAGO) || (codigoEstadoServicio.getCodigo() == CommonConstant.NUCESTADOS.SUSPENDIDO
                    && codigoSubEstadoServicio.getCodigo() == CommonConstant.NUC_SUBESTADO.SUSPENSION_TEMPORAL))) {
                cr.setResult(GlobalConstant.RESULT_SUCCESS);
                cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.SUCCESS);
            } else {
                cr.setResult(GlobalConstant.RESULT_WARNING);
                cr.setResultMessage(String.format(CommonMessage.ORDORDEN.WARNING.ESTADO_INCORRECTO_SUSPENDIDO_BAJA, servicio.getIdEstado().getDescripcion()));
            }

        } catch (Exception e) {
            cr.setResult(GlobalConstant.RESULT_ERROR);
            cr.setResultMessage(e.getMessage());
            e.printStackTrace();
        }
        return cr;
    }

    public Boolean updateCT(OrdOrden orden, OrdTipoOrden tipoOrden, OrdAsignaEquipo ordAsignaEquipo, int ordEstado, Character estadoAsigRetira, UsuarioDto usuarioDto) {
        cr = new CommonResponse();
        cr.setResult(GlobalConstant.RESULT_ERROR);
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        Boolean isUpdateCT = false;
        Boolean isUpdateServicioCT = false;
        Boolean isUpdateServicioCTDesc = false;

        Boolean isUpdateMedidorTot = false;
        try {
            if (orden != null && tipoOrden != null) {

                NucServicio nucServicio = nucServicioDao.findByIdConsumidor(orden.getIdConsumidor().getId(), CommonConstant.NUCTIPOSERVICIO.ENERGIA);
                NucServicioCt servicioCt = nucServicioCtDao.findConectadoByIdServicio(nucServicio.getId());
                NucServicioPt servicioPt = nucServicioPtDao.findConectadoByIdServicio(nucServicio.getId());

                NucServicioMedidor servicioMedidor = nucServicioMedidorDao.findByMedidorConectado(nucServicio.getId());

                if (tipoOrden.getAsignaMedidor() && estadoAsigRetira.equals('C')) { // tipoOrden.getCodigo() == CommonConstant.ORDTIPOORDEN.CONTRATO_NUEVO
                    isUpdateCT = medCtDao.updateConectado(ordAsignaEquipo.getIdMedCt().getId());
                    if (ordEstado == CommonConstant.ORDESTADO.CUMPLIDA) {
                        NucServicioCt nucServicioCt = new NucServicioCt();
                        nucServicioCt.setIdServicio(nucServicio);
                        nucServicioCt.setIdCt(ordAsignaEquipo.getIdMedCt());
                        nucServicioCt.setConectado(true);
                        nucServicioCt.setFechaRegistro(orden.getFechaCumplimiento());
                        nucServicioCt.setFechaActualizacion(orden.getFechaCumplimiento());
                        nucServicioCt.setUsuarioRegistro(usuarioDto.getId_usuario_security());
                        nucServicioCt.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                        isUpdateServicioCT = nucServicioCtDao.create(nucServicioCt);

                        if (isUpdateCT && isUpdateServicioCT) {
                            isUpdateMedidorTot = true;
                            cr.setResult(CommonConstant.RESULT_SUCCESS);
                            cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.OBJECT);
                        }
                    } else if (isUpdateCT) {
                        isUpdateMedidorTot = true;
                        cr.setResult(CommonConstant.RESULT_SUCCESS);
                        cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.OBJECT);
                    }
                }
                if (tipoOrden.getRetiraMedidor() && estadoAsigRetira.equals('D')) {
                    isUpdateCT = medCtDao.updateDesconectado(ordAsignaEquipo.getIdMedCt().getId());
                    if (ordEstado == CommonConstant.ORDESTADO.CUMPLIDA) {
                        servicioCt.setConectado(false);
                        servicioCt.setFechaActualizacion(orden.getFechaCumplimiento());
                        servicioCt.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                        isUpdateServicioCTDesc = nucServicioCtDao.update(servicioCt);

                        if (isUpdateServicioCTDesc) {
                            isUpdateMedidorTot = true;
                            cr.setResult(CommonConstant.RESULT_SUCCESS);
                            cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.OBJECT);
                        }
                    } else if (isUpdateCT) {
                        isUpdateMedidorTot = true;
                        cr.setResult(CommonConstant.RESULT_SUCCESS);
                        cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.OBJECT);
                    }
                }
                if (tipoOrden.getRetiraMedidor() && estadoAsigRetira.equals('C')) {
                    isUpdateCT = medCtDao.updateConectado(ordAsignaEquipo.getIdMedCt().getId());
                    if (ordEstado == CommonConstant.ORDESTADO.CUMPLIDA) {
                        servicioCt = nucServicioCtDao.findByIdCt(ordAsignaEquipo.getIdMedCt().getId());
                        if (servicioCt != null) {
                            servicioCt.setConectado(true);
                            isUpdateServicioCTDesc = nucServicioCtDao.update(servicioCt);

                        }

                        if (isUpdateServicioCTDesc) {
                            isUpdateMedidorTot = true;
                            cr.setResult(CommonConstant.RESULT_SUCCESS);
                            cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.OBJECT);
                        }
                    } else if (isUpdateCT) {
                        isUpdateMedidorTot = true;
                        cr.setResult(CommonConstant.RESULT_SUCCESS);
                        cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.OBJECT);
                    }
                }
            }
        } catch (Exception e) {
            cr.setResultMessage(CommonMessage.GLOBAL.ERROR.ERROR);
            e.printStackTrace();
        }
        return isUpdateMedidorTot;
    }

    public Boolean updatePT(OrdOrden orden, OrdTipoOrden tipoOrden, OrdAsignaEquipo ordAsignaEquipo, int ordEstado, Character estadoAsigRetira, UsuarioDto usuarioDto) {
        cr = new CommonResponse();
        cr.setResult(GlobalConstant.RESULT_ERROR);
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        Boolean isUpdatePT = false;
        Boolean isUpdateServicioPT = false;
        Boolean isUpdateServicioPTDesc = false;

        Boolean isUpdateMedidorTot = false;
        try {
            if (orden != null && tipoOrden != null) {

                NucServicio nucServicio = nucServicioDao.findByIdConsumidor(orden.getIdConsumidor().getId(), CommonConstant.NUCTIPOSERVICIO.ENERGIA);

                NucServicioPt servicioPt = nucServicioPtDao.findConectadoByIdServicio(nucServicio.getId());

                if (tipoOrden.getAsignaMedidor() && estadoAsigRetira.equals('C')) { // tipoOrden.getCodigo() == CommonConstant.ORDTIPOORDEN.CONTRATO_NUEVO
                    isUpdatePT = medPtDao.updateConectado(ordAsignaEquipo.getIdMedPt().getId());
                    if (ordEstado == CommonConstant.ORDESTADO.CUMPLIDA) {
                        NucServicioPt nucServicioPt = new NucServicioPt();
                        nucServicioPt.setIdServicio(nucServicio);
                        nucServicioPt.setIdPt(ordAsignaEquipo.getIdMedPt());
                        nucServicioPt.setConectado(true);
                        nucServicioPt.setFechaRegistro(orden.getFechaCumplimiento());
                        nucServicioPt.setFechaActualizacion(orden.getFechaCumplimiento());
                        nucServicioPt.setUsuarioRegistro(usuarioDto.getId_usuario_security());
                        nucServicioPt.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                        isUpdateServicioPT = nucServicioPtDao.create(nucServicioPt);

                        if (isUpdatePT && isUpdateServicioPT) {
                            isUpdateMedidorTot = true;
                            cr.setResult(CommonConstant.RESULT_SUCCESS);
                            cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.OBJECT);
                        }
                    } else if (isUpdatePT) {
                        isUpdateMedidorTot = true;
                        cr.setResult(CommonConstant.RESULT_SUCCESS);
                        cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.OBJECT);
                    }
                }
                if (tipoOrden.getRetiraMedidor() && estadoAsigRetira.equals('D')) {
                    isUpdatePT = medPtDao.updateDesconectado(ordAsignaEquipo.getIdMedPt().getId());
                    if (ordEstado == CommonConstant.ORDESTADO.CUMPLIDA) {
                        servicioPt.setConectado(false);
                        servicioPt.setFechaActualizacion(orden.getFechaCumplimiento());
                        servicioPt.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                        isUpdateServicioPTDesc = nucServicioPtDao.update(servicioPt);

                        if (isUpdateServicioPTDesc) {
                            isUpdateMedidorTot = true;
                            cr.setResult(CommonConstant.RESULT_SUCCESS);
                            cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.OBJECT);
                        }
                    } else if (isUpdatePT) {
                        isUpdateMedidorTot = true;
                        cr.setResult(CommonConstant.RESULT_SUCCESS);
                        cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.OBJECT);
                    }
                }
                if (tipoOrden.getRetiraMedidor() && estadoAsigRetira.equals('C')) {
                    isUpdatePT = medPtDao.updateConectado(ordAsignaEquipo.getIdMedPt().getId());
                    if (ordEstado == CommonConstant.ORDESTADO.CUMPLIDA) {
                        servicioPt = nucServicioPtDao.findByIdPt(ordAsignaEquipo.getIdMedPt().getId());
                        if (servicioPt != null) {
                            servicioPt.setConectado(true);
                            isUpdateServicioPTDesc = nucServicioPtDao.update(servicioPt);

                        }

                        if (isUpdateServicioPTDesc) {
                            isUpdateMedidorTot = true;
                            cr.setResult(CommonConstant.RESULT_SUCCESS);
                            cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.OBJECT);
                        }
                    } else if (isUpdatePT) {
                        isUpdateMedidorTot = true;
                        cr.setResult(CommonConstant.RESULT_SUCCESS);
                        cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.OBJECT);
                    }
                }
            }
        } catch (Exception e) {
            cr.setResultMessage(CommonMessage.GLOBAL.ERROR.ERROR);
            e.printStackTrace();
        }
        return isUpdateMedidorTot;
    }

    public boolean printOrdenCumplida(OrdTipoOrden tipoOrden, String ordenes, String pathExportPdf) {
        HashMap hm = null;
        Connection conn = null;
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        try {
            conn = Utils.getConnection();

            String nombrejrxml = "";
            String nombrejasper = "";
            hm = new HashMap();
            switch (tipoOrden.getCodigo()) {

                case CommonConstant.ORDTIPOORDEN.CONTRATO_NUEVO: {
//                    nombrejrxml = "OrdenContratoNuevoCumplido-v0.1_1.jrxml";
//                    nombrejasper = "OrdenContratoNuevoCumplido-v0.1_1.jasper";
                    nombrejrxml = "OrdenContratoNuevoCumplido-v0.1_2.jrxml";
                    nombrejasper = "OrdenContratoNuevoCumplido-v0.1_2.jasper";
                    hm.put("ordenes", ordenes);

                    break;
                }
                case CommonConstant.ORDTIPOORDEN.CAMBIO_MEDIDOR: {
//                    nombrejrxml = "OrdenCambioMedidorCumplido-v0.1_1.jrxml";
//                    nombrejasper = "OrdenCambioMedidorCumplido-v0.1_1.jasper";
                    nombrejrxml = "OrdenCambioMedidorCumplido-v0.1_2.jrxml";
                    nombrejasper = "OrdenCambioMedidorCumplido-v0.1_2.jasper";
                    hm.put("ordenes", ordenes);
                    break;
                }

                case CommonConstant.ORDTIPOORDEN.REHABILITACION: {
//                    nombrejrxml = "OrdenRehabilitacionServicioCumplido-v0.1_1.jrxml";
//                    nombrejasper = "OrdenRehabilitacionServicioCumplido-v0.1_1.jasper";
                    nombrejrxml = "OrdenRehabilitacionServicioCumplido-v0.1_2.jrxml";
                    nombrejasper = "OrdenRehabilitacionServicioCumplido-v0.1_2.jasper";
                    hm.put("ordenes", ordenes);

                    break;
                }
                case CommonConstant.ORDTIPOORDEN.SUSPENSION_TEMPORAL: {
//                    nombrejrxml = "OrdenSuspencionServicioCumplido-v0.1_1.jrxml";
//                    nombrejasper = "OrdenSuspencionServicioCumplido-v0.1_1.jasper";
                    nombrejrxml = "OrdenSuspencionServicioCumplido-v0.1_2.jrxml";
                    nombrejasper = "OrdenSuspencionServicioCumplido-v0.1_2.jasper";
                    hm.put("ordenes", ordenes);

                    break;
                }
                case CommonConstant.ORDTIPOORDEN.SUSPENSION_DEFINITIVA: {
//                    nombrejrxml = "OrdenSuspencionServicioCumplido-v0.1_1.jrxml";
//                    nombrejasper = "OrdenSuspencionServicioCumplido-v0.1_1.jasper";
                    nombrejrxml = "OrdenSuspencionServicioCumplido-v0.1_2.jrxml";
                    nombrejasper = "OrdenSuspencionServicioCumplido-v0.1_2.jasper";
                    hm.put("ordenes", ordenes);

                    break;
                }
                default: {
//PARA OTROS TIPOS DE ORDENES
                    nombrejrxml = "OrdenCambioMedidorCumplido-v0.1_2.jrxml";
                    nombrejasper = "OrdenCambioMedidorCumplido-v0.1_2.jasper";
                    hm.put("ordenes", ordenes);

                }
            }

            JasperCompileManager.compileReportToFile(CommonConstant.basePathJrxml + nombrejrxml, CommonConstant.basePathJrxml + nombrejasper);

            JasperPrint jprint = (JasperPrint) JasperFillManager.fillReport(CommonConstant.basePathJrxml + nombrejasper, hm, conn);
            JasperExportManager.exportReportToPdfFile(jprint, pathExportPdf);
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        } finally {
            Utils.closeConnection(conn);
        }
    }

    public Boolean applyCambioPoblacion(NucConsumidor consumidor, NucArea nucArea, List<OrdDetalleDto> ordenDetalleDtoList, UsuarioDto usuarioDto) {
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        Boolean isPoblacion = false;
        try {
            NucArea area = nucAreaDao.findById(nucArea.getId());
            if (area != null) {
                for (OrdDetalleDto ordDetalleDto : ordenDetalleDtoList) {
                    if (ordDetalleDto.getNombre().equals("codigo_poblacion")) {
                        if (ordDetalleDto.getValorActual() == null) {
                            consumidor.setIdPoblacion(null);
                            consumidor.setFechaActualizacion(calendar.getTime());
                            consumidor.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                            nucConsumidorDao.update(consumidor);

                        } else {
                            NucPoblacion nucPoblacion = nucPoblacionDao.findByCodigoArea(new Integer(ordDetalleDto.getValorActual()), area.getId());

                            if (nucPoblacion != null) {
                                consumidor.setIdPoblacion(nucPoblacion);
                                consumidor.setFechaActualizacion(calendar.getTime());
                                consumidor.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                                nucConsumidorDao.update(consumidor);
                            }
                        }

                    }
                    if (ordDetalleDto.getNombre().equals("codigo_barrio")) {
                        if (ordDetalleDto.getValorActual() == null) {
                            consumidor.setIdBarrio(null);
                            consumidor.setFechaActualizacion(calendar.getTime());
                            consumidor.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                            nucConsumidorDao.update(consumidor);

                        } else {
                            NucBarrio nucBarrio = nucBarrioDao.findByCodigoArea(ordDetalleDto.getValorActual(), area.getId());

                            if (nucBarrio != null) {
                                consumidor.setIdBarrio(nucBarrio);
                                consumidor.setFechaActualizacion(calendar.getTime());
                                consumidor.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                                nucConsumidorDao.update(consumidor);
                            }
                        }

                    }

                    isPoblacion = true;

                }
            } else {
                cr.setResultMessage(CommonMessage.ORDORDEN.WARNING.CONSUMIDOR_NO_AREA);
                cr.setResult(CommonConstant.RESULT_WARNING);
            }

        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return isPoblacion;
    }

    public boolean printOrdenCorreccion(int idOrden, String direccionAnterior, String numeroCasaAnterior, String pisoDepartamenteAnt, String numeroDepartamenteAnt, String direccionActual, String numeroCasaActual, String pisoDepartamenteActual, String numeroDepartamenteActual, String pathExportPdf) {
        HashMap hm = null;
        //Connection conn = null;
        List<String> lines;
        try {
            //conn = Utils.getConnection();
            //JasperCompileManager.compileReportToFile(CommonConstant.basePathJrxml + "correccionDireccion.jrxml", CommonConstant.basePathJrxml + "correccionDireccion.jasper");
            hm = new HashMap();
            hm.put("idOrden", idOrden);
            hm.put("direccionAnterior", direccionAnterior);
            hm.put("numeroCasaAnterior", numeroCasaAnterior);
            hm.put("pisoDepartamenteAnt", pisoDepartamenteAnt);
            hm.put("numeroDepartamenteAnt", numeroDepartamenteAnt);
            hm.put("direccionActual", direccionActual);
            hm.put("numeroCasaActual", numeroCasaActual);
            hm.put("pisoDepartamenteActual", pisoDepartamenteActual);
            hm.put("numeroDepartamenteActual", numeroDepartamenteActual);
            lines = this.ordenCambioDirecionReporte(idOrden, hm);
            Path file = Paths.get(pathExportPdf);
            Files.write(file, lines, StandardCharsets.UTF_8);
            //JasperPrint jprint = (JasperPrint) JasperFillManager.fillReport(CommonConstant.basePathJrxml + "correccionDireccion.jasper", hm, conn);
            //JasperExportManager.exportReportToPdfFile(jprint, pathExportPdf);
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        } finally {
            // Utils.closeConnection(conn);
        }
    }

    public boolean printOrdenCorreccionNroDocumentoNit(
            int idOrden,
            String anteriorTipoDocumento,
            String anteriorNroDocumento,
            String anteriorComplemento,
            String anteriorExpedido,
            String anteriorTipoDocumentoFactura,
            String anteriorNit,
            String actualTipoDocumento,
            String actualNroDocumento,
            String actualComplemento,
            String actualExpedido,
            String actualTipoDocumentoFactura,
            String actualNit,
            String pathTmpFile
    ) {
        HashMap hm;
        List<String> lines;
        try {
            List<NucTipoDocumento> nucTipoDocumentoList = nucTipoDocumentoDao.finByActivo(true);
            List<NucCiExpedido> nucCiExpedidoList = nucCiExpedidoDao.findAll();
            List<NucDocumentosSivel> nucDocumentosSivelList = nucDocumentosSivelDao.findAll();

            if (anteriorTipoDocumento != null) {
                for (NucTipoDocumento nucTipoDocumento : nucTipoDocumentoList) {
                    if (nucTipoDocumento.getId() == Integer.parseInt(anteriorTipoDocumento)) {
                        anteriorTipoDocumento = nucTipoDocumento.getDescripcion();
                        break;
                    }
                }
            }
            if (anteriorExpedido != null) {
                for (NucCiExpedido nucCiExpedido : nucCiExpedidoList) {
                    if (nucCiExpedido.getId() == Integer.parseInt(anteriorExpedido)) {
                        anteriorExpedido = nucCiExpedido.getDescripcion();
                        break;
                    }
                }
            }
            if (anteriorTipoDocumentoFactura != null) {
                for (NucDocumentosSivel nucDocumentosSivel : nucDocumentosSivelList) {
                    if (nucDocumentosSivel.getId() == Integer.parseInt(anteriorTipoDocumentoFactura)) {
                        anteriorTipoDocumentoFactura = nucDocumentosSivel.getDescripcion();
                        break;
                    }
                }
            }
            if (actualTipoDocumento != null) {
                for (NucTipoDocumento nucTipoDocumento : nucTipoDocumentoList) {
                    if (nucTipoDocumento.getId() == Integer.parseInt(actualTipoDocumento)) {
                        actualTipoDocumento = nucTipoDocumento.getDescripcion();
                        break;
                    }
                }
            }
            if (actualExpedido != null) {
                for (NucCiExpedido nucCiExpedido : nucCiExpedidoList) {
                    if (nucCiExpedido.getId() == Integer.parseInt(actualExpedido)) {
                        actualExpedido = nucCiExpedido.getDescripcion();
                        break;
                    }
                }
            }
            if (actualTipoDocumentoFactura != null) {
                for (NucDocumentosSivel nucDocumentosSivel : nucDocumentosSivelList) {
                    if (nucDocumentosSivel.getId() == Integer.parseInt(actualTipoDocumentoFactura)) {
                        actualTipoDocumentoFactura = nucDocumentosSivel.getDescripcion();
                        break;
                    }
                }
            }

            hm = new HashMap();
            hm.put("idOrden", idOrden);
            hm.put("anteriorTipoDocumento", anteriorTipoDocumento);
            hm.put("anteriorNroDocumento", anteriorNroDocumento);
            hm.put("anteriorComplemento", anteriorComplemento);
            hm.put("anteriorExpedido", anteriorExpedido);
            hm.put("anteriorTipoDocumentoFactura", anteriorTipoDocumentoFactura);
            hm.put("anteriorNit", anteriorNit);
            hm.put("actualTipoDocumento", actualTipoDocumento);
            hm.put("actualNroDocumento", actualNroDocumento);
            hm.put("actualComplemento", actualComplemento);
            hm.put("actualExpedido", actualExpedido);
            hm.put("actualTipoDocumentoFactura", actualTipoDocumentoFactura);
            hm.put("actualNit", actualNit);

            lines = this.ordenCorreccionNroDocumentoNitReporte(idOrden, hm);
            Path file = Paths.get(pathTmpFile);
            Files.write(file, lines, StandardCharsets.UTF_8);
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }

    public boolean printOrdenCorreccionCorreoElectronico(int idOrden, String anteriorEmail, String actualEmail, String pathTmpFile) {
        HashMap hm;
        List<String> lines;
        try {
            hm = new HashMap();
            hm.put("idOrden", idOrden);
            hm.put("anteriorEmail", anteriorEmail);
            hm.put("actualEmail", actualEmail);
            lines = this.ordenCorreccionCorreoElectronicoReporte(idOrden, hm);
            Path file = Paths.get(pathTmpFile);
            Files.write(file, lines, StandardCharsets.UTF_8);
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }

    public boolean printOrdenCorreccionNroTelefono(int idOrden, String celularAnterior, String telefonoAnterior, String celularActual, String telefonoActual, String pathTmpFile) {
        HashMap hm;
        List<String> lines;
        try {
            hm = new HashMap();
            hm.put("idOrden", idOrden);
            hm.put("celularAnterior", celularAnterior);
            hm.put("celularActual", celularActual);
            hm.put("telefonoAnterior", telefonoAnterior);
            hm.put("telefonoActual", telefonoActual);
            lines = this.ordenCorreccionNroTelefonoReporte(idOrden, hm);
            Path file = Paths.get(pathTmpFile);
            Files.write(file, lines, StandardCharsets.UTF_8);
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }

    public CommonResponse printDetalleCorteReconXls(CommonInput input) {
        cr = new CommonResponse();
        cr.setResult(GlobalConstant.RESULT_ERROR);
        calendar = Calendar.getInstance();
        Boolean alreadyExistsXls = false;
        Boolean alreadyExistsZip = false;
        try {
            OrdCorteReconexionDto ordCorteReconexionDto = input.getOrdCorteReconexionDto();
            if (ordCorteReconexionDto.getIdSectorDestino() == null) {
                cr.setResult(GlobalConstant.RESULT_WARNING);
                cr.setResultMessage(CommonMessage.ORDORDEN.WARNING.ORDEN_SIN_SECTOR_DESTINO);
                return cr;
            }
            if (ordCorteReconexionDto.getIdTipoOrden() == null) {
                cr.setResult(GlobalConstant.RESULT_WARNING);
                cr.setResultMessage(CommonMessage.ORDORDEN.WARNING.ORDEN_SIN_TIPO);
                return cr;
            }
            if (ordCorteReconexionDto.getFechaEstimadaCorte() == null && ordCorteReconexionDto.getFechaAlta() == null) {
                cr.setResult(GlobalConstant.RESULT_WARNING);
                cr.setResultMessage(CommonMessage.ORDORDEN.WARNING.ORDEN_CYR_SIN_FECHA);
                return cr;
            }
            if (ordCorteReconexionDto != null) {

                List<Object[]> lista = ordOrdenDao.getImpresionDetalleCorteRecon(
                        ordCorteReconexionDto.getIdSectorDestino(),
                        ordCorteReconexionDto.getIdTipoOrden(),
                        ordCorteReconexionDto.getFechaAlta(),
                        ordCorteReconexionDto.getFechaAltaFin(),
                        ordCorteReconexionDto.getFechaEstimadaCorte(),
                        ordCorteReconexionDto.getFechaEstimadaCorteFin(),
                        ordCorteReconexionDto.getIdRutaDesde(),
                        ordCorteReconexionDto.getIdRutaHasta(),
                        CommonConstant.ORDESTADO.PENDIENTE,
                        CommonConstant.ORDESTADO.REVISADA,
                        CommonConstant.ORDESTADO.CAMPO);
                if (lista.size() > 0) {
                    String[] cabecera = new String[41];
                    cabecera[0] = "NRO. ORDEN";
                    cabecera[1] = "NRO. CONSUMIDOR";
                    cabecera[2] = "CODIGO ANTERIOR";
                    cabecera[3] = "REMESA";
                    cabecera[4] = "RUTA";
                    cabecera[5] = "RAZON SOCIAL";
                    cabecera[6] = "DIRECCION";
                    cabecera[7] = "NRO. CASA";
                    cabecera[8] = "CATEGORIA";
                    cabecera[9] = "MEDIDOR";
                    cabecera[10] = "SERIE";
                    cabecera[11] = "CANTIDAD DE DEUDAS";
                    cabecera[12] = "TOTAL IMPORTE";
                    cabecera[13] = "LUGAR DE LA SUSPENSION";
                    cabecera[14] = "INDICE";
                    cabecera[15] = "FECHA";
                    cabecera[16] = "HORA";
                    cabecera[17] = "OPERADOR";
                    cabecera[18] = "OBSERVACIONES";
                    String nombreArchivoXls = "";
                    String nombreArchivoZip = "";
                    if (ordCorteReconexionDto.getIdTipoOrden() == CommonConstant.ORDTIPOORDEN.CORTE || ordCorteReconexionDto.getIdTipoOrden() == CommonConstant.ORDTIPOORDEN.SUSPENSION_FALTA_PAGO) {
                        nombreArchivoXls = "OrdenCorteSusp_" + formatDate.format(ordCorteReconexionDto.getFechaEstimadaCorte()) + ".xls";
                        nombreArchivoZip = "OrdencorteSusp_" + formatDate.format(ordCorteReconexionDto.getFechaEstimadaCorte()) + ".zip";
                    } else {
                        nombreArchivoXls = "OrdenReconReh_" + formatDate.format(ordCorteReconexionDto.getFechaAlta()) + ".xls";
                        nombreArchivoZip = "OrdenReconReh_" + formatDate.format(ordCorteReconexionDto.getFechaAlta()) + ".zip";
                    }

                    String pathXls = et.com.ejb.fac.data.CommonConstant.BASE_PATH_TMP + nombreArchivoXls;
                    String pathZip = et.com.ejb.fac.data.CommonConstant.BASE_PATH_TMP + nombreArchivoZip;
                    String path = et.com.ejb.fac.data.CommonConstant.BASE_PATH_TMP;
                    GlobalUtils.generarListaExcel(lista, pathXls, cabecera);
                    final String[] files = {nombreArchivoXls};
                    GlobalUtils.zippearFiles(path, files, pathZip);
                    cr.setNombreArchivo(nombreArchivoZip);
                    cr.setBase64(GlobalUtils.getFileBase64(pathZip));
                    cr.setResult(GlobalConstant.RESULT_SUCCESS);
                    cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.SUCCESS);
                    //limpiando el archivo temporal
                    alreadyExistsXls = new File(pathXls).exists();
                    if (alreadyExistsXls) {
                        File temporal = new File(pathXls);
                        temporal.delete();
                    }
                    //limpiando el archivo temporal
                    alreadyExistsZip = new File(pathZip).exists();
                    if (alreadyExistsZip) {
                        File temporal = new File(pathZip);
                        temporal.delete();
                    }
                } else {
                    cr.setResult(2);
                    cr.setResultMessage("NO EXISTEN DATOS");
                }

            }
        } catch (Exception e) {
            cr.setResultMessage(e.getMessage());
            e.printStackTrace();
        }
        return cr;
    }

    public CommonResponse findDepositoGarantia(CommonInput input) {
        cr = new CommonResponse();
        try {
            NucConsumidor nucConsumidor = input.getNucConsumidor();
            BigDecimal importeSugerido = new BigDecimal(0);
            if (nucConsumidor == null || nucConsumidor.getId() == null) {
                cr.setResult(CommonConstant.RESULT_WARNING);
                cr.setResultMessage(CommonMessage.GLOBAL.ERROR.EMPTY_INPUT);
                return cr;
            }

            NucServicio nucServicio = nucServicioDao.findByIdConsumidor(nucConsumidor.getId(), CommonConstant.NUCTIPOSERVICIO.ENERGIA);
            List<Object[]> nucDepositoGarantiaList = null;
            if (nucServicio.getIdEstado().getCodigo() == CommonConstant.NUCESTADOS.BAJA || (nucServicio.getIdEstado().getCodigo() == CommonConstant.NUCESTADOS.SUSPENDIDO && nucServicio.getIdSubestado().getCodigo() == CommonConstant.NUCSUBESTADOS.SUSPDEFINITIVA)) {
                nucDepositoGarantiaList = nucDepositoGarantiaDao.findByIdConsumidorNoDevuelto(nucConsumidor.getId());
            } else {

                nucDepositoGarantiaList = nucDepositoGarantiaDao.findByIdConsumidorNoDevueltoCambioNombre(nucConsumidor.getId());
            }
            for (Object[] nucDepositoGarantia : nucDepositoGarantiaList) {

                importeSugerido = (BigDecimal) nucDepositoGarantia[3];
            }

            if (nucDepositoGarantiaList != null || nucDepositoGarantiaList.size() > 0) {
                Iterator it = nucDepositoGarantiaList.iterator();
                Date fechahoraspagada = null;

                while (it.hasNext()) {
                    Object[] result = (Object[]) it.next();
                    BigDecimal importe = new BigDecimal(result[3].toString());
                    BigDecimal saldo = new BigDecimal(result[6].toString());
                    BigDecimal depositoGarantia = new BigDecimal(0);
                    String fecharegistro = result[5].toString();
                    SimpleDateFormat in = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.S");
                    // String fec = "2018-08-19";
                    Date datelimite = in.parse(fecharegistro);
//                        fechahoraspagada = fechaHora1.parse(fecharegistro);
                    if (importe.compareTo(saldo) == 0) {
                        depositoGarantia = this.calcularDepositoGarantias(importeSugerido, datelimite);
                    } else {
                        result[4] = saldo;
                    }
                    if (depositoGarantia.compareTo(new BigDecimal(0)) == 0) {
                        result[4] = saldo;
                    } else {
                        result[4] = depositoGarantia;
                    }
                }

            } else {
                cr.setResult(CommonConstant.RESULT_INFO);
                cr.setResultMessage(CommonMessage.GLOBAL.INFO.EMPTY_LIST);
                return cr;
            }
            cr.setResult(CommonConstant.RESULT_SUCCESS);
            cr.setObject(nucDepositoGarantiaList);
        } catch (Exception ex) {
            System.out.println("error=" + ex.getMessage());
            cr.setResult(CommonConstant.RESULT_ERROR);
            cr.setResultMessage(ex.getMessage());
        }
        return cr;
    }

    public BigDecimal calcularDepositoGarantias(BigDecimal importeGarantiaSugerido, Date fecha) {

        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        BigDecimal importeGarantia = new java.math.BigDecimal(0);
        BigDecimal aCotImporte = new java.math.BigDecimal(0);
        BigDecimal CotImporte = new java.math.BigDecimal(0);
        BigDecimal depositoanteriorDolares = new java.math.BigDecimal(0);
        BigDecimal depositoactualDolores = new java.math.BigDecimal(0);
        BigDecimal montorecalculado = new java.math.BigDecimal(0);

        try {
            Date fechaActual = calendar.getTime();
            //  SimpleDateFormat newDateFormat = new SimpleDateFormat("YYYY-MM-DD");
            //Date fecact = newDateFormat.parse(newDateFormat.format(fechaActual));
            aCotImporte = nucDepositoGarantiaDao.Retormontofec(fechaActual);

            CotImporte = nucDepositoGarantiaDao.Retormontofec(fecha);
            SimpleDateFormat in = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.S");
            String fec = "1987-06-01 00:00:00.0";
            Date datelimite = in.parse(fec);
            if (fecha.compareTo(datelimite) <= 0) {
                aCotImporte = new java.math.BigDecimal(1);
                CotImporte = new java.math.BigDecimal(1);
            }
            if ((importeGarantiaSugerido.compareTo(new BigDecimal(BigInteger.ZERO)) == 0) || CotImporte.compareTo(new BigDecimal(BigInteger.ONE)) == 0) {
                aCotImporte = new java.math.BigDecimal(1);
            }
            depositoanteriorDolares = importeGarantiaSugerido.divide(CotImporte, 3, RoundingMode.HALF_UP); //.setScale(2, RoundingMode.HALF_UP);
            depositoactualDolores = (importeGarantiaSugerido.divide(CotImporte, 3, RoundingMode.HALF_UP).multiply(aCotImporte)).setScale(2, RoundingMode.HALF_UP);
            montorecalculado = depositoactualDolores.subtract(importeGarantiaSugerido).setScale(2, RoundingMode.HALF_UP);
        } catch (Exception ex) {
            System.out.println("error=" + ex.getMessage());
            cr.setResult(CommonConstant.RESULT_ERROR);
            cr.setResultMessage(CommonMessage.GLOBAL.ERROR.ERROR);
        }
        return depositoactualDolores.setScale(2, RoundingMode.HALF_UP);
    }

    public BigDecimal calcularDepositoGarantia(NucConsumidor nucConsumidor, BigDecimal importeGarantiaSugerido) {

        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        BigDecimal importeGarantia = new java.math.BigDecimal(0);

        try {
            int energia = CommonConstant.NUCTIPOSERVICIO.ENERGIA;
            int pequenaDemanda = CommonConstant.NIVEL_DEMANDA.PEQUENA;
//            int medianaDemanda = et.com.ejb.atc.data.CommonConstant.NUCNIVELDEMANDA.MD;
//            int granDemanda = et.com.ejb.atc.data.CommonConstant.NUCNIVELDEMANDA.GD;

            NucServicio nucServicio = nucServicioDao.findByIdConsumidor(nucConsumidor.getId(), energia);
            NucDepositoGarantia nucDepositoGarantia = nucDepositoGarantiaDao.findByIdConsumidor(nucConsumidor.getId());
            importeGarantia = facDepositoGarantiaDao.findByIdCategoria(nucDepositoGarantia.getIdCategoria());

            if (importeGarantia.compareTo(new BigDecimal(0)) == 0) {
                importeGarantia = importeGarantiaSugerido;
            }

//            if (nucServicio.getIdCategoria().getIdNivelDemanda().getCodigo() == pequenaDemanda) {
//////                FacDepositoGarantia facDepositoGarantia = facDepositoGarantiaDao.findByIdCategoria(nucServicio.getIdCategoria().getId());
//////                if (facDepositoGarantia != null) {
//                importeGarantia = facDepositoGarantiaDao.findByIdCategoria(nucServicio.getIdCategoria().getId());
//////                }
//            } else {
////                NucDepositoGarantia nucDepositoGarantia = nucDepositoGarantiaDao.findByIdConsumidor(nucConsumidor.getId());
////
////                if (nucDepositoGarantia != null) {
////                    importeGarantia = nucDepositoGarantia.getImporte();
////                }
//                importeGarantia = importeGarantiaSugerido;
//            }
        } catch (Exception ex) {

            cr.setResult(CommonConstant.RESULT_ERROR);
            cr.setResultMessage(CommonMessage.GLOBAL.ERROR.ERROR);
        }
        return importeGarantia;
    }

    public Boolean applyDevolucionDepositoGarantia(NucDepositoGarantia nucDepositoGarantia, BigDecimal importeDevuelto, UsuarioDto usuarioDto) {
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        Boolean isDevolucion = false;
        try {
            NucDepositoGarantia nucDepositoGarantiaOld = nucDepositoGarantiaDao.findById(nucDepositoGarantia.getId());

            if (nucDepositoGarantiaOld != null) {
                nucDepositoGarantiaOld.setImporteDevuelto(importeDevuelto);
                nucDepositoGarantiaOld.setDevuelto(true);
                nucDepositoGarantiaOld.setFechaActualizacion(calendar.getTime());
                nucDepositoGarantiaOld.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                nucDepositoGarantiaDao.update(nucDepositoGarantiaOld);

                isDevolucion = true;

            }

        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return isDevolucion;
    }

    public CommonResponse validateOrdenesTrabajoNoEjecutado(CommonInput input, int ordEstado, boolean motivoDemora, NucDatosTecnicos nucDatosTecnicos, Boolean recojoMedidor) {
        cr = new CommonResponse();
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        Boolean isValida = true;
        try {
            OrdOrden ordOrden = input.getOrdOrden();

            if (ordOrden != null && (ordEstado == CommonConstant.ORDESTADO.NO_REALIZADA || ordEstado == CommonConstant.ORDESTADO.SUSPENDIDA)) {
                OrdOrden orden = new OrdOrden();
                if (ordOrden.getId() != null) {
                    orden = ordOrdenDao.findById(ordOrden.getId());
                } else {
                    orden = ordOrdenDao.findByCodigoOrden(ordOrden.getCodigo());
                }
                //OrdOrden orden = ordOrdenDao.findById(ordOrden.getId());

                Calendar fechacumplimiento = Calendar.getInstance();
                fechacumplimiento.setTime(ordOrden.getFechaCumplimiento());

                Calendar fechaGeneracion = Calendar.getInstance();
                fechaGeneracion.setTime(orden.getFechaRegistro());

                if (fechacumplimiento.getTime().compareTo(calendar.getTime()) > 0) {
                    cr.setResultMessage(CommonMessage.ORDORDEN.ERROR.FECHA_HOY);
                    cr.setResult(CommonConstant.RESULT_WARNING);
                    isValida = false;
                }
                if (fechacumplimiento.getTime().compareTo(fechaGeneracion.getTime()) < 0) {

                    cr.setResultMessage(CommonMessage.ORDORDEN.ERROR.FECHA_CUMPLIMIENTO);
                    isValida = false;
                    cr.setResult(CommonConstant.RESULT_WARNING);
                }
                // if (orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.CORTE || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.SUSPENSION_FALTA_PAGO || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.RECONEXION || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.REHABILITACION_FALTA_PAGO) {
                Calendar fechaImpresion = Calendar.getInstance();
                fechaImpresion.setTime(orden.getFechaImpresion());
                if (fechacumplimiento.getTime().compareTo(fechaImpresion.getTime()) < 0) {

                    cr.setResultMessage(CommonMessage.ORDORDEN.ERROR.FECHA_IMPRESION);
                    isValida = false;
                    cr.setResult(CommonConstant.RESULT_WARNING);
                }
                //VALIDA LA FECHA DE ASIGANACION DE MEDIDOR
                if (orden.getFechaAsignacionMedidor() != null) {
                    Calendar fechaAsignacionMedidor = Calendar.getInstance();
                    fechaAsignacionMedidor.setTime(orden.getFechaAsignacionMedidor());
                    if (fechacumplimiento.getTime().compareTo(fechaAsignacionMedidor.getTime()) < 0) {

                        cr.setResultMessage(CommonMessage.ORDORDEN.ERROR.FECHA_ASIGNACION_MEDIDOR);
                        isValida = false;
                        cr.setResult(CommonConstant.RESULT_WARNING);
                    }
                }
                // }

            }
        } catch (Exception e) {
            cr.setResult(CommonConstant.RESULT_ERROR);
            cr.setResultMessage(e.getMessage());
            e.printStackTrace();
        }
        return cr;

    }

    public CommonResponse sugerirCambioCategoria(CommonInput input) {
        cr = new CommonResponse();
        cr.setResult(GlobalConstant.RESULT_ERROR);
        NucConsumidor consumidor = input.getNucConsumidor();
        NucActividadEconomica actividadEconomica = input.getNucActividadEconomica();
        NucNivelTension nucNivelTension = input.getNucNivelTension();
        NucNivelDemanda nucNivelDemanda = input.getNucNivelDemanda();
        NucCategoria nucCategoria = null;
        NucAreaCategoria nucAreaCategoria = null;
        List<NucCategoria> nucCategoriaList = new ArrayList<NucCategoria>();
        try {
            if (consumidor != null && actividadEconomica != null
                    && nucNivelTension.getId() != null && nucNivelDemanda.getId() != null) {
                Integer idSistema = 0;

                NucConsumidor nucConsumidor = nucConsumidorDao.findById(consumidor.getId());
                idSistema = nucConsumidor.getIdRuta().getIdRemesa().getIdArea().getIdSistema().getId();
                NucServicio nucServicio = nucServicioDao.findByIdConsumidor(consumidor.getId(), 1);
                NucDatosTecnicos nucDatosTecnicos = nucDatosTecnicosDao.findByIdServicio(nucServicio.getId());
                NucActividadEconomica nucActividadEconomica = nucActividadEconomicaDao.findById(actividadEconomica.getId());
                NucCategoria categoria = nucCategoriaDao.findById(nucServicio.getIdCategoria().getId());
                Integer idTipoCategoria = nucActividadEconomica.getIdTipoCategoria().getId();
                Integer idNivelTension = nucNivelTension.getId();
                Integer idVoltaje = nucDatosTecnicos.getIdVoltajeAsignado().getId();
                Integer idNivelDemanda = nucNivelDemanda.getId(); //categoria.getIdNivelDemanda().getId();

                if (idTipoCategoria == et.com.ejb.atc.data.CommonConstant.NUCTIPOCATEGORIA.DOMICILIARIO) {
                    List<NucAreaCategoria> nucAreaCategoriaList = nucAreaCategoriaDao.categoriaPDList(idSistema, idTipoCategoria, idNivelTension, idNivelDemanda);
                    for (NucAreaCategoria nucAreaCategorias : nucAreaCategoriaList) {
                        NucVoltajeCategoria nucVoltajeCategoria = nucVoltajeCategoriaDao.findByVoltajeCategoria(nucAreaCategorias.getIdCategoria().getId(), idVoltaje);
                        if (nucVoltajeCategoria != null) {
                            nucCategoria = nucVoltajeCategoria.getIdCategoria();
                        }
                        nucCategoriaList.add(nucAreaCategorias.getIdCategoria());
                    }
                } else {

                    List<NucAreaCategoria> nucAreaCategoriaList = nucAreaCategoriaDao.getCategoria(idSistema, idTipoCategoria, idNivelTension, idNivelDemanda);
                    if (nucAreaCategoriaList != null) {
                        for (NucAreaCategoria nucAreaCategorias : nucAreaCategoriaList) {
                            nucCategoria = nucAreaCategorias.getIdCategoria();
                            nucCategoriaList.add(nucAreaCategorias.getIdCategoria());
                        }
                    }
                }

                if (nucCategoria != null) {
                    cr.setNucCategoria(nucCategoria);
                    cr.setNucCategoriaList(nucCategoriaList);
                    cr.setResult(GlobalConstant.RESULT_SUCCESS);
                    cr.setResultMessage(et.com.ejb.atc.data.CommonMessage.GLOBAL.SUCCESS.SUCCESS);
                } else {
                    cr.setNucCategoriaList(nucCategoriaList);
                    cr.setResult(GlobalConstant.RESULT_INFO);
                    cr.setResultMessage(et.com.ejb.atc.data.CommonMessage.INSINSPECCION.INFO.NO_ENCUENTRA_CATEGORIA_A_SUGERIR);
                }
            } else {
                cr.setResult(et.com.ejb.atc.data.CommonConstant.RESULT_ERROR);
                cr.setResultMessage(et.com.ejb.atc.data.CommonMessage.GLOBAL.ERROR.EMPTY_INPUT);
            }

        } catch (Exception e) {
            cr.setResult(GlobalConstant.RESULT_ERROR);
            cr.setResultMessage(et.com.ejb.atc.data.CommonMessage.GLOBAL.ERROR.ERROR);
            e.printStackTrace();
        }
        return cr;
    }

    public CommonResponse retenerOrden(CommonInput input) {
        cr = new CommonResponse();
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        try {
            List<OrdOrden> ordenList = input.getOrdOrdenList();
            UsuarioDto usuarioDto = input.getUsuarioDto();
            Date fechaImpresion = calendar.getTime();
            if (ordenList != null) {
                Boolean updateEstadoOrden = false;
                String ordenes = "{";
                OrdOrden orden = new OrdOrden();
                for (OrdOrden ordOrden : ordenList) {
                    fechaImpresion = calendar.getTime();
                    orden = ordOrdenDao.findById(ordOrden.getId());
                    if (orden.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.PENDIENTE) {

                        //updateEstadoOrden = ordOrdenEstadosBean.updateEstadoOrdenCortesReconex(orden.getId(), CommonConstant.ORDESTADO.RETENIDA, orden.getIdSectorDestino().getId(), usuarioDto.getId_usuario_security(), fechaImpresion);
                        orden.setFechaActualizacion(input.getOrdOrdenEstado().getFechaActualizacion());
                        updateEstadoOrden = ordOrdenEstadosBean.updateEstadoOrden(orden, CommonConstant.ORDESTADO.RETENIDA, input.getOrdOrdenEstado().getObservacion());
                    } else {
                        cr.setResult(GlobalConstant.RESULT_WARNING);
                        cr.setResultMessage(String.format(CommonMessage.ORDORDEN.ERROR.RETENER_ORDEN));

                    }
                }

                if (updateEstadoOrden) {

                    cr.setResult(GlobalConstant.RESULT_SUCCESS);
                    cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.SUCCESS);

                } else {
                    cr.setResult(CommonConstant.RESULT_ERROR);
                    cr.setResultMessage(CommonMessage.GLOBAL.ERROR.ERROR);
                }

            } else {
                cr.setResult(CommonConstant.RESULT_WARNING);
                cr.setResultMessage(String.format(CommonMessage.ORDORDEN.WARNING.ORDEN_IMPRESION));
            }

        } catch (Exception e) {
            cr.setResult(CommonConstant.RESULT_ERROR);
            cr.setResultMessage(e.getMessage());
            e.printStackTrace();
        }
        return cr;
    }

    public CommonResponse infructuosaOrden(CommonInput input) {
        cr = new CommonResponse();
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        try {
            List<OrdOrden> ordenList = input.getOrdOrdenList();
            UsuarioDto usuarioDto = input.getUsuarioDto();
            Date fechaImpresion = calendar.getTime();
            if (ordenList != null) {
                Boolean updateEstadoOrden = false;
                String ordenes = "{";
                OrdOrden orden = new OrdOrden();
                for (OrdOrden ordOrden : ordenList) {
                    fechaImpresion = calendar.getTime();
                    orden = ordOrdenDao.findById(ordOrden.getId());
                    if (orden.getIdEstado().getCodigo() == CommonConstant.ORDESTADO.PENDIENTE) {

                        //updateEstadoOrden = ordOrdenEstadosBean.updateEstadoOrdenCortesReconex(orden.getId(), CommonConstant.ORDESTADO.RETENIDA, orden.getIdSectorDestino().getId(), usuarioDto.getId_usuario_security(), fechaImpresion);
                        orden.setFechaActualizacion(input.getOrdOrdenEstado().getFechaActualizacion());
                        updateEstadoOrden = ordOrdenEstadosBean.updateEstadoOrden(orden, CommonConstant.ORDESTADO.RETENIDA, input.getOrdOrdenEstado().getObservacion());
                    } else {
                        cr.setResult(GlobalConstant.RESULT_WARNING);
                        cr.setResultMessage(String.format(CommonMessage.ORDORDEN.ERROR.RETENER_ORDEN));

                    }
                }

                if (updateEstadoOrden) {

                    cr.setResult(GlobalConstant.RESULT_SUCCESS);
                    cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.SUCCESS);

                } else {
                    cr.setResult(CommonConstant.RESULT_ERROR);
                    cr.setResultMessage(CommonMessage.GLOBAL.ERROR.ERROR);
                }

            } else {
                cr.setResult(CommonConstant.RESULT_WARNING);
                cr.setResultMessage(String.format(CommonMessage.ORDORDEN.WARNING.ORDEN_IMPRESION));
            }

        } catch (Exception e) {
            cr.setResult(CommonConstant.RESULT_ERROR);
            cr.setResultMessage(e.getMessage());
            e.printStackTrace();
        }
        return cr;
    }

    public boolean printOrdenDevolucionGarantia(int idOrden, String razonSocial, String nit, BigDecimal importeDevolver, String pathExportPdf) {
        HashMap hm = null;
        Connection conn = null;
        try {
            conn = Utils.getConnection();
            JasperCompileManager.compileReportToFile(CommonConstant.basePathJrxml + "devolucionGarantia.jrxml", CommonConstant.basePathJrxml + "devolucionGarantia.jasper");
            hm = new HashMap();
            hm.put("idOrden", idOrden);
            hm.put("razonSocial", razonSocial);
            hm.put("nit", nit);
            hm.put("importeDevolver", importeDevolver);

            JasperPrint jprint = (JasperPrint) JasperFillManager.fillReport(CommonConstant.basePathJrxml + "devolucionGarantia.jasper", hm, conn);
            JasperExportManager.exportReportToPdfFile(jprint, pathExportPdf);
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        } finally {
            Utils.closeConnection(conn);
        }
    }

    /**
     * Genera reporte de ordenes de corte en una lista de cadenas
     *
     * @param ordenes String en formato {int, int, int,....} que contiene las
     * ordenes a mostrar en el reporte
     * @return lines List<String> lista de lineas del reporte
     * @see OrdOrdenDao
     */
    private List<String> ordenCorteReporte(String ordenes) {
        List<Object[]> query = ordOrdenDao.getOrdenCorteReporteByIds(ordenes);
        List<String> lines = new ArrayList<>();
        int dav = 0;
        for (int i = 1; i <= query.size(); i++) {
//            if(i%3==1) {
//                lines.add("");
//            }
            int index = i - 1;
//            lines.add("");
            dav = CodigoVerificador.generarDAV(new BigInteger(query.get(index)[4].toString()));
            lines.add(
                    (i % 3 == 1 ? "\r\n" : "")
                    + "\r\n"
                    + String.format(LS3, "N°O.S. " + query.get(index)[1])
                    + String.format(L3, "ORDEN DE CORTE")
                    + String.format(L3, "SECTOR " + query.get(index)[25])
                    + String.format(L2, query.get(index)[32])
                    + String.format("%7s", query.get(index)[31]) + "\r"
            );
//            lines.add("");
            lines.add(
                    "\r\n"
                    + String.format(LS4, "N° Consumidor: " + query.get(index)[4] + "-" + dav)
                    + String.format(L8, "Nombre: " + query.get(index)[5]) + "\r"
            );
            lines.add(
                    String.format(LS4, "Medidor: " + query.get(index)[17])
                    + String.format(L8, "Barrio/Población: " + (query.get(index)[26] == "" ? query.get(index)[30] : query.get(index)[26])) + "\r"
            );
            lines.add(
                    String.format(LS12, "Dirección: " + query.get(index)[10]) + "\r"
            );
            lines.add(
                    String.format(LS3, "Tarifa: " + query.get(index)[16])
                    + String.format(L6, "")
                    + String.format(LS3, "Ruta: " + query.get(index)[8]) + "\r"
            );
            lines.add(
                    String.format(LS3, "Nro Docum: " + query.get(index)[28])
                    + String.format(L3, "Nro Casa: " + query.get(index)[11])
                    + String.format(L3, "Piso: " + query.get(index)[12] + " Dpto: " + query.get(index)[13])
                    + String.format(LS3, "Remesa: " + query.get(index)[7]) + "\r"
            );
//            lines.add("");
            lines.add(
                    //"\r\n"
                    String.format(LS4, "Índice: " + TOFILL)
                    + String.format(L4, "Fecha: " + TOFILL)
                    + String.format(LS4, "Orden lectura: " + query.get(index)[29]) + "\r"
            );
            lines.add(
                    String.format(LS4, "N°Sticker: " + TOFILL)
                    + String.format(L4, "Hora: " + TOFILL)
                    + String.format(LS4, "Resultado: ") + "\r"
            );
            lines.add(
                    String.format(LS8, "Precintos: " + query.get(index)[33])
                    + String.format(LS4, TOFILL) + "\r"
            );
            lines.add(
                    String.format("%94s", "Código Operario: " + TOFILL) + "\r"
            );
            lines.add(
                    String.format(L12, "Obs: " + query.get(index)[34] + TOFILL) + "\r"
            );
            lines.add(
                    String.format(L8, "1. Persona Presente")
                    + String.format(LS4, TOCHECK + "Block") + "\r"
            );
            lines.add(
                    String.format(L8, "2. Características del Inmueble")
                    + String.format(LS4, TOCHECK + "Térmico") + "\r"
            );
            lines.add(
                    String.format(L8, "3. Características de la Instalación Interna")
                    + String.format(LS4, TOCHECK + "Palanca") + "\r"
            );
            lines.add(
                    String.format(L8, "")
                    + String.format(LS4, TOCHECK + "Elemento de corte")
                    + "\r\n"
                    + "\r\n"
                    + (i % 3 == 0 ? "\r\n" : "") + "\r"
            );
//            lines.add("");
//            lines.add("");
//            if(i%3==0) lines.add("");
        }
        return lines;
    }

    private List<String> ordenCorteReporteCumplida(String ordenes) {
        List<Object[]> query = ordOrdenDao.getOrdenCorteReporteCumplidaByIds(ordenes);
        List<String> lines = new ArrayList<>();
        String fecha_hora;
        int dav = 0;
        for (int i = 1; i <= query.size(); i++) {
//            if(i%3==1) {
//                lines.add("");
//            }
            int index = i - 1;
            fecha_hora = query.get(index)[35].toString();
//            lines.add("");
            dav = CodigoVerificador.generarDAV(new BigInteger(query.get(index)[4].toString()));
            lines.add(
                    (i % 3 == 1 ? "\r\n" : "")
                    + "\r\n"
                    + String.format(LS3, "N°O.S. " + query.get(index)[1])
                    + String.format(L3, "ORDEN DE CORTE")
                    + String.format(L3, "SECTOR " + query.get(index)[25])
                    + String.format(L2, query.get(index)[32])
                    + String.format("%7s", query.get(index)[31]) + "\r"
            );
//            lines.add("");
            lines.add(
                    "\r\n"
                    + String.format(LS4, "N° Consumidor: " + query.get(index)[4] + "-" + dav)
                    + String.format(L8, "Nombre: " + query.get(index)[5])
            );
            lines.add(
                    String.format(LS4, "Medidor: " + query.get(index)[17])
                    + String.format(L8, "Barrio/Población: " + (query.get(index)[26] == "" ? query.get(index)[30] : query.get(index)[26]))
            );
            lines.add(
                    String.format(LS12, "Dirección: " + query.get(index)[10])
            );
            lines.add(
                    String.format(LS3, "Tarifa: " + query.get(index)[16])
                    + String.format(L6, "")
                    + String.format(LS3, "Ruta: " + query.get(index)[8])
            );
            lines.add(
                    String.format(LS3, "Nro Docum: " + query.get(index)[28])
                    + String.format(L3, "Nro Casa: " + query.get(index)[11])
                    + String.format(L3, "Piso: " + query.get(index)[12] + " Dpto: " + query.get(index)[13])
                    + String.format(LS3, "Remesa: " + query.get(index)[7])
            );
//            lines.add("");
            lines.add(
                    //"\r\n"
                    //                    String.format(LS4, "Índice: " + TOFILL)
                    String.format(LS4, "Índice: " + query.get(index)[36])
                    + String.format(L4, "Fecha cumplimiento: " + fecha_hora.substring(0, 8))
                    + String.format(LS4, "Orden lectura: " + query.get(index)[29])
            );
            lines.add(
                    String.format(LS4, "N°Sticker: " + query.get(index)[37])
                    //                    + String.format(L4, "Hora: " + TOFILL)
                    + String.format(L4, "Hora cumplimiento: " + fecha_hora.substring(10))
                    + String.format(LS8, "Resultado: " + query.get(index)[39])
            );
            lines.add(
                    String.format(LS8, "Precintos: " + query.get(index)[33])
            //                    + String.format(LS4, TOFILL) + "\r"
            );
            lines.add(
                    //                    String.format(LS4, "" + query.get(index)[34])
                    String.format(LS4, "")
                    + String.format(L4, "")
                    + String.format(LS8, "Operario: " + query.get(index)[38])
            );
            lines.add(
                    String.format(LS4, "Obs: " + query.get(index)[34])
                    + String.format(L4, "")
                    + String.format(LS8, "Tipo trabajo: " + query.get(index)[40])
            //                    String.format(L12, "Obs: " + query.get(index)[34] + TOFILL) + "\r"
            );
//            lines.add(
            //                    String.format(L8, "1. Persona Presente")
            //                    + String.format(LS4, query.get(index)[40]) + "\r"
//                    St1ring.format("%94s", "Tipo trabajo:" + query.get(index)[40]) + "\r"
            //                    + String.format(LS4, TOCHECK + "Block") + "\r"
//            );
//            lines.add(
//                    String.format(L8, "2. Características del Inmueble") + "\r"
//            //                    + String.format(LS4, TOCHECK + "Térmico") + "\r"
//            );
//            lines.add(
//                    String.format(L8, "3. Características de la Instalación Interna") + "\r"
//            //                    + String.format(LS4, TOCHECK + "Palanca") + "\r"
//            );
//            lines.add(
//                    String.format(L8, "")
//                    + String.format(LS4, TOCHECK + "Elemento de corte")
//                    + "\r\n"
//                    + "\r\n"
//                    + (i % 3 == 0 ? "\r\n" : "") + "\r"
//            );

//            lines.add("");
//            lines.add("");
//            if(i%3==0) lines.add("");
        }
        return lines;
    }

    /**
     * Genera reporte de ordenes de reconexión en una lista de cadenas
     *
     * @param ordenes String en formato {int, int, int,....} que contiene las
     * ordenes a mostrar en el reporte
     * @return lines List<String> lista de lineas del reporte
     * @see OrdOrdenDao
     */
    private List<String> ordenReconexionReporte(String ordenes) {
        List<Object[]> query = ordOrdenDao.getOrdenReconexionReporteByIds(ordenes);
        List<String> lines = new ArrayList<>();
        int dav;
        for (int i = 1; i <= query.size(); i++) {
//            if(i%3==1) {
//                lines.add("");
//            }
            int index = i - 1;
//            lines.add("");
            dav = CodigoVerificador.generarDAV(new BigInteger(query.get(index)[4].toString()));
            lines.add(
                    (i % 3 == 1 ? "\r\n" : "")
                    + "\r\n"
                    + String.format(LS3, "SECTOR " + query.get(index)[25])
                    + String.format(L3, "ORDEN DE RECONEXIÓN")
                    + String.format(L3, "N°O.S. " + query.get(index)[1])
                    + String.format(L2, query.get(index)[32])
                    + String.format("%7s", i) + "\r"
            );
//            lines.add("");
            lines.add(
                    "\r\n"
                    + String.format(LS4, "N° Consumidor: " + query.get(index)[4] + "-" + dav)
                    + String.format(LS8, "Nombre: " + query.get(index)[5]) + "\r"
            );
            lines.add(
                    String.format(LS4, "Medidor: " + query.get(index)[17])
                    + String.format(LS8, "Barrio/Población: " + (query.get(index)[26] == "" ? query.get(index)[30] : query.get(index)[26])) + "\r"
            );
            lines.add(
                    String.format(LS12, "Dirección: " + query.get(index)[10]) + "\r"
            );
            lines.add(
                    String.format(LS3, "Tarifa: " + query.get(index)[16])
                    + String.format(L6, "")
                    + String.format(LS3, " Ruta: " + query.get(index)[8]) + "\r"
            );
            lines.add(
                    String.format(LS3, "Nro Docum: " + query.get(index)[28])
                    + String.format(L3, "Nro Casa: " + query.get(index)[11])
                    + String.format(L3, "Piso: " + query.get(index)[12] + " Dpto: " + query.get(index)[13])
                    + String.format(LS3, "Remesa: " + query.get(index)[7]) + "\r"
            );
//            lines.add("");
            lines.add(
                    //"\r\n"
                    String.format(LS4, "Nro.corte: " + query.get(index)[34])
                    + String.format(LS4, "Operario: " + query.get(index)[35])
                    + String.format(LS4, "Ord.lectura: " + query.get(index)[29]) + "\r"
            );
            lines.add(
                    String.format(LS4, "Índice: " + TOFILL)
                    + String.format(L4, "Fecha: " + TOFILL)
                    + String.format(LS4, "            " + LINE) + "\r"
            );
            lines.add(
                    String.format(LS4, "")
                    + String.format(L4, "")
                    + String.format(LS4, "Resultado: |                |") + "\r"
            );
            lines.add(
                    String.format(LS4, "N°Sticker: " + TOFILL)
                    + String.format(L4, "Hora: " + TOFILL)
                    + String.format(LS4, "           |" + LINE + "|") + "\r"
            );
            lines.add(
                    String.format(L6, "Precintos: " + query.get(index)[33])
                    + String.format(L6, "Deuda Pagada el: " + query.get(index)[3]) + "\r"
            );
            lines.add(
                    String.format(L12, "Obs: ") + "\r"
            );
            lines.add(
                    String.format(LS8, "1. Persona Presente")
                    + String.format(LS4, "Código Operario: " + TOFILL) + "\r"
            );
            lines.add(
                    String.format(LS8, "2. Características del Inmueble")
                    + String.format(LS4, "Cortado:" + query.get(index)[31].toString()) + "\r"
            );
            lines.add(
                    String.format(L12, "3. Características de la Instalación Interna")
                    + "\r\n"
                    + "\r\n"
                    + (i % 3 == 0 ? "\r\n" : "")
            );
//            lines.add("");
//            lines.add("");
//            if(i%3==0) lines.add("");
        }
        return lines;
    }

    private List<String> ordenReconexionReporteCumplida(String ordenes) {
        List<Object[]> query = ordOrdenDao.getOrdenReconexionReporteCumplidaByIds(ordenes);
        List<String> lines = new ArrayList<>();
        String fecha_hora;
        int dav;
        for (int i = 1; i <= query.size(); i++) {
//            if(i%3==1) {
//                lines.add("");
//            }
            int index = i - 1;
//            lines.add("");
            dav = CodigoVerificador.generarDAV(new BigInteger(query.get(index)[4].toString()));
            fecha_hora = query.get(index)[36].toString();

            lines.add(
                    (i % 3 == 1 ? "\r\n" : "")
                    + "\r\n"
                    + String.format(LS3, "SECTOR " + query.get(index)[25])
                    + String.format(L3, "ORDEN DE RECONEXIÓN")
                    + String.format(L3, "N°O.S. " + query.get(index)[1])
                    + String.format(L2, query.get(index)[32])
                    + String.format("%7s", i) + "\r"
            );
//            lines.add("");
            lines.add(
                    "\r\n"
                    + String.format(LS4, "N° Consumidor: " + query.get(index)[4] + "-" + dav)
                    + String.format(LS8, "Nombre: " + query.get(index)[5])
            );
            lines.add(
                    String.format(LS4, "Medidor: " + query.get(index)[17])
                    + String.format(LS8, "Barrio/Población: " + (query.get(index)[26] == "" ? query.get(index)[30] : query.get(index)[26]))
            );
            lines.add(
                    String.format(LS12, "Dirección: " + query.get(index)[10])
            );
            lines.add(
                    String.format(LS3, "Tarifa: " + query.get(index)[16])
                    + String.format(L6, "")
                    + String.format(LS3, " Ruta: " + query.get(index)[8])
            );
            lines.add(
                    String.format(LS3, "Nro Docum: " + query.get(index)[28])
                    + String.format(L3, "Nro Casa: " + query.get(index)[11])
                    + String.format(L3, "Piso: " + query.get(index)[12] + " Dpto: " + query.get(index)[13])
                    + String.format(LS3, "Remesa: " + query.get(index)[7])
            );
//            lines.add("");
            lines.add(
                    //"\r\n"
                    String.format(LS4, "Nro.corte: " + query.get(index)[34])
                    + String.format(LS4, "Operario: " + query.get(index)[35])
                    + String.format(LS4, "Ord.lectura: " + query.get(index)[29])
            );
            lines.add(
                    //                    String.format(LS4, "Índice: " + TOFILL)
                    String.format(LS4, "Índice: " + query.get(index)[37])
                    //                    + String.format(L4, "Fecha: " + TOFILL)
                    + String.format(L8, "Fecha cumplimiento: " + fecha_hora)
            //                    + String.format(LS4, "            " + LINE) + "\r"
            );
            lines.add(
                    String.format(LS4, "")
                    + String.format(L4, "")
                    + String.format(LS4, "Resultado: " + query.get(index)[40])
            //                    + String.format(LS4, "Resultado: |                |") + "\r"
            );
            lines.add(
                    String.format(LS4, "N°Sticker: " + query.get(index)[38])
            //                    + String.format(L4, "Hora: " + TOFILL)
            //                    + String.format(LS4, "           |" + LINE + "|") + "\r"
            );
            lines.add(
                    String.format(L6, "Precintos: " + query.get(index)[33])
                    + String.format(L6, "Deuda Pagada el: " + query.get(index)[3])
            );
            lines.add(
                    String.format(L4, "Obs: " + query.get(index)[42])
                    + String.format(LS4, "")
                    + String.format(L4, "Tipo trabajo: " + query.get(index)[41])
            );
            lines.add(
                    String.format(L4, "Cortado: " + query.get(index)[31])
                    + String.format(LS4, "")
                    + String.format(L4, "Operario: " + query.get(index)[39])
            //                    String.format(LS8, "1. Persona Presente")
            //                    + String.format(LS4, "Código Operario: " + TOFILL) + "\r"
            );
//            lines.add(
            //                    String.format(LS8, "2. Características del Inmueble")
//                    String.format(LS4, "Cortado:" + query.get(index)[31].toString()) + "\r"
//            );
//            lines.add(
//                    String.format(L12, "3. Características de la Instalación Interna")
//                    + "\r\n"
//                    + "\r\n"
//                    + (i % 3 == 0 ? "\r\n" : "")
//            );
//            lines.add("");
//            lines.add("");
//            if(i%3==0) lines.add("");
        }
        return lines;
    }

    /**
     * Genera reporte de ordenes de suspención por falta de pago en una lista de
     * cadenas
     *
     * @param ordenes String en formato {int, int, int,....} que contiene las
     * ordenes a mostrar en el reporte
     * @return lines List<String> lista de lineas del reporte
     * @see OrdOrdenDao
     */
    private List<String> ordenSuspencionReporte(String orden_ids, int type) {
        List<Object[]> ordenes = ordOrdenDao.getOrdenSuspencionReporteByIds(orden_ids);
        List<String> lines = new ArrayList<>();
        int dav;
        for (int i = 1; i <= ordenes.size(); i++) {
//            lines.add("");
            int index = i - 1;
//            lines.add("");
            dav = CodigoVerificador.generarDAV(new BigInteger(ordenes.get(index)[4].toString()));
            lines.add(
                    "\r\n"
                    + "\r\n"
                    + String.format(LS4, "N°O.S. " + ordenes.get(index)[1])
                    + String.format(L4, "    ORDEN DE SERVICIO")
                    + String.format(L1, "")
                    + String.format(LS3, ordenes.get(index)[32]) + "\r"
            );
            lines.add(
                    String.format(LS4, "Fec. Gener. " + ordenes.get(index)[3])
                    + (type == 1
                            ? String.format(L4, "SUSPENSIÓN POR FALTA DE PAGO")
                            : String.format(L4, "SUSPENSIÓN DE SERVICIO"))
                    + String.format(L1, "")
                    + (type == 1 ? String.format(LS3, "Nro." + ordenes.get(index)[31]) + "\r" : String.format(LS3, "S/S Nro." + ordenes.get(index)[37]) + "\r")
            //String.format(LS3,"S/S Nro." + ordenes.get(index)[31])
            );
//            lines.add("");
            lines.add(
                    "\r\n"
                    + String.format(LS4, "N° Consumidor: " + ordenes.get(index)[4] + "-" + dav)
                    + String.format(LS8, "Nombre: " + ordenes.get(index)[5]) + "\r"
            );
            lines.add(
                    String.format(LS8, "Población: " + Optional.ofNullable(ordenes.get(index)[30]).orElse(""))
                    + String.format(LS4, "Teléfono: " + String.join(" - ", ordenes.get(index)[14].toString(), ordenes.get(index)[15].toString())) + "\r"
            );
            lines.add(
                    String.format(LS8, "Barrio: " + ordenes.get(index)[26])
                    + String.format(LS4, "RUTA: " + ordenes.get(index)[8]) + "\r"
            );
            lines.add(
                    String.format(LS8, "Dirección: " + ordenes.get(index)[10])
                    + String.format(LS4, "Remesa: " + ordenes.get(index)[7]) + "\r"
            );
            lines.add(
                    String.format(LS3, "Nro Casa: " + ordenes.get(index)[11])
                    + String.format(L2, "Piso: " + ordenes.get(index)[12])
                    + String.format(L3, "Dpto: " + ordenes.get(index)[12])
                    + String.format(LS4, "Orden lectura: " + ordenes.get(index)[29]) + "\r"
            );
            lines.add(
                    String.format(LS12, "Categoría: " + ordenes.get(index)[16]) + "\r"
            );
            lines.add(
                    String.format(LS6, "")
                    + String.format(LS6, "Sector destino: " + ordenes.get(index)[25]) + "\r"
            );
//            lines.add("");
            lines.add(
                    "\r\n"
                    + String.format(L2, "Medidor:" + ordenes.get(index)[17])
                    + String.format(LS4, "Voltaje: " + (type == 1 ? ordenes.get(index)[21] : ordenes.get(index)[35]))
                    + String.format(L3, "Nro. Hilos: " + ordenes.get(index)[22])
                    + String.format(LS3, (type == 1 ? "Fases Desconectadas " : "Conexión Fases")) + "\r"
            );
            lines.add(
                    String.format(LS3, "Constante: " + ordenes.get(index)[20])
                    + (type == 1
                            ? String.format(L6, "Precintos Desc.: " + ordenes.get(index)[33])
                            : String.format(L6, "Precintos A Desconect.: " + (type == 1 ? ordenes.get(index)[34] : "")))
                    + String.format(LS3, " 1 2 3 N") + "\r"
            );
            lines.add(
                    String.format(LS3, "Índice: " + TOFILL)
                    + String.format(L6, (type == 1 ? "Precintos Conex.: " + TOFILL : ordenes.get(index)[34]))
                    + String.format(LS3, "|_|_|_|_|") + "\r"
            );
            lines.add(
                    String.format(LS12, "Tipo de Conex.: " + ordenes.get(index)[23]) + "\r"
            );
            lines.add(
                    String.format(LS2, "Código: " + ordenes.get(index)[18])
                    + (type == 1
                            ? String.format(L6, "T.S.: " + ordenes.get(index)[27])
                            : String.format(L6, "Pto. Medición: " + ordenes.get(index)[36]))
                    + String.format(LS4, TOCHECK + " Medidor Recogido") + "\r"
            );
            lines.add(
                    String.format(LS8, "Resultado del Trabajo de Campo: " + TOFILL)
                    + String.format(LS4, TOCHECK + " Medidor Perdido") + "\r"
            );
            lines.add(
                    String.format(LS8, "Cuadrilla Asignada: " + TOFILL)
                    + String.format(LS4, TOCHECK + " Corte del Poste") + "\r"
            );
            lines.add(
                    (type == 1
                            ? String.format(LS8, "")
                            : String.format(LS4, "Cubrebornera:" + TOFILL)
                            + String.format(LS4, "Caja Medidor:" + TOFILL))
                    + String.format(LS4, TOCHECK + " Caja de Barras") + "\r"
            );
            lines.add(
                    String.format(LS8, "Observaciones: " + ordenes.get(index)[38] + TOFILL + TOFILL)
                    + String.format(LS4, TOCHECK + " Caja de Distribución") + "\r"
            );
//            lines.add("");
            lines.add(
                    "\r\n"
                    + String.format(LS8, "")
                    + String.format(L1, "")
                    + String.format(LS3, "Fecha: " + TOFILL) + "\r"
            );
            lines.add(
                    String.format(LS8, ordenes.get(index)[2])
                    + String.format(L1, "")
                    + String.format(LS3, "Hora: " + TOFILL) + "\r"
            );
            lines.add(
                    String.format(LS4, "")
                    + String.format(L4, TOFILL + TOFILL)
                    + String.format(L1, "")
                    + String.format(LS3, "") + "\r"
            );
            lines.add(
                    String.format(LS4, "")
                    + String.format(L4, "  Conformidad del Consumidor")
                    + String.format(L1, "")
                    + String.format(LS3, "")
                    + "\r\n"
                    + "\r\n"
                    + (i % 2 == 0 ? "\r\n" : "") + "\r"
            );
//            lines.add("");
//            lines.add("");
//            if(i%2==0) lines.add("");
        }
        return lines;
    }

    private List<String> ordenSuspencionReporteCumplida(String orden_ids, int type) {
        List<Object[]> ordenes = ordOrdenDao.getOrdenSuspencionReporteCumplidaByIds(orden_ids);
        List<String> lines = new ArrayList<>();
        String fecha_hora;
        Boolean fase1, fase2, fase3, fase4;
        int dav;
        for (int i = 1; i <= ordenes.size(); i++) {
//            lines.add("");
            int index = i - 1;
//            lines.add("");
            dav = CodigoVerificador.generarDAV(new BigInteger(ordenes.get(index)[4].toString()));
            fecha_hora = ordenes.get(index)[39].toString();
            fase1 = (Boolean) ordenes.get(index)[44];
            fase2 = (Boolean) ordenes.get(index)[45];
            fase3 = (Boolean) ordenes.get(index)[46];
            fase4 = (Boolean) ordenes.get(index)[47];
            lines.add(
                    "\r\n"
                    + "\r\n"
                    + String.format(LS4, "N°O.S. " + ordenes.get(index)[1])
                    + String.format(L4, "    ORDEN DE SERVICIO")
                    + String.format(L1, "")
                    + String.format(LS3, ordenes.get(index)[32]) + "\r"
            );
            lines.add(
                    String.format(LS4, "Fec. Gener. " + ordenes.get(index)[3])
                    + (type == 1
                            ? String.format(L4, "SUSPENSIÓN POR FALTA DE PAGO")
                            : String.format(L4, "SUSPENSIÓN DE SERVICIO"))
                    + String.format(L1, "")
                    + (type == 1 ? String.format(LS3, "Nro." + ordenes.get(index)[31]) + "\r" : String.format(LS3, "S/S Nro." + ordenes.get(index)[37]) + "\r")
            //String.format(LS3,"S/S Nro." + ordenes.get(index)[31])
            );
//            lines.add("");
            lines.add(
                    "\r"
                    + String.format(LS4, "N° Consumidor: " + ordenes.get(index)[4] + "-" + dav)
                    + String.format(LS8, "Nombre: " + ordenes.get(index)[5])
            );
            lines.add(
                    String.format(LS8, "Población: " + Optional.ofNullable(ordenes.get(index)[30]).orElse(""))
                    + String.format(LS4, "Teléfono: " + String.join(" - ", ordenes.get(index)[14].toString(), ordenes.get(index)[15].toString()))
            );
            lines.add(
                    String.format(LS8, "Barrio: " + ordenes.get(index)[26])
                    + String.format(LS4, "RUTA: " + ordenes.get(index)[8])
            );
            lines.add(
                    String.format(LS8, "Dirección: " + ordenes.get(index)[10])
                    + String.format(LS4, "Remesa: " + ordenes.get(index)[7])
            );
            lines.add(
                    String.format(LS3, "Nro Casa: " + ordenes.get(index)[11])
                    + String.format(L2, "Piso: " + ordenes.get(index)[12])
                    + String.format(L3, "Dpto: " + ordenes.get(index)[12])
                    + String.format(LS4, "Orden lectura: " + ordenes.get(index)[29])
            );
            lines.add(
                    String.format(LS6, "Categoría: " + ordenes.get(index)[16])
                    + String.format(LS6, "Sector destino: " + ordenes.get(index)[25])
            );
//            lines.add(
//                    String.format(LS6, "")
//                    + String.format(LS6, "Sector destino: " + ordenes.get(index)[25]) 
//            );
//            lines.add("");
            lines.add(
                    "\r"
                    + String.format(L2, "Medidor:" + ordenes.get(index)[17])
                    + String.format(LS4, "Voltaje: " + (type == 1 ? ordenes.get(index)[21] : ordenes.get(index)[35]))
                    + String.format(L3, "Nro. Hilos: " + ordenes.get(index)[22])
            );
            lines.add(
                    String.format(LS3, "Constante: " + ordenes.get(index)[20])
                    + (type == 1
                            ? String.format(L6, "Precintos Desc.: " + ordenes.get(index)[33])
                            : String.format(L6, "Precintos A Desconect.: " + (type == 1 ? ordenes.get(index)[34] : "")))
            );
            lines.add(
                    //String.format(LS3, "Índice: " + TOFILL)
                    String.format(LS3, "Índice: " + ordenes.get(index)[42])
                    //                    + String.format(L6, (type == 1 ? "Precintos Conex.: " + TOFILL : ordenes.get(index)[34]))
                    + String.format(L6, ("Precintos Conex.: " + ordenes.get(index)[34]))
                    + String.format(LS3, (type == 1 ? "Fases Desconectadas " : "Conexión Fases"))
            );
            lines.add(
                    String.format(LS3, "Tipo de Conex.: " + ordenes.get(index)[23])
                    + String.format(L6, "")
                    + String.format(LS3, " 1 2 3 N")
            );
            lines.add(
                    String.format(LS3, "Código: " + ordenes.get(index)[18])
                    + (type == 1
                            ? String.format(L6, "T.S.: " + ordenes.get(index)[27])
                            : String.format(L6, "Pto. Medición: " + ordenes.get(index)[36]))
                    + (fase1 ? "X" : " ") + (fase2 ? "X" : " ") + (fase3 ? "X" : " ") + (fase4 ? "X" : " ")
            //                    + String.format(LS4, TOCHECK + " Medidor Recogido") + "\r"
            );
            lines.add(
                    String.format(LS8, "Resultado del Trabajo de Campo: " + ordenes.get(index)[40])
                    + String.format(LS8, " Tipo trabajo: " + ordenes.get(index)[41])
            );
            lines.add(
                    String.format(LS8, "Operario: " + ordenes.get(index)[43])
                    + String.format(LS8, "Fecha cumplimiento: " + fecha_hora)
                    + "\r"
            //                    String.format(LS8, "Cuadrilla Asignada: " + TOFILL) 
            //                                + String.format(LS4, ordenes.get(index)[41]) + "\r"
            //                    + String.format(LS4, TOCHECK + " Corte del Poste") + "\r"
            );
            lines.add(
                    (type == 1
                            ? String.format(LS8, "")
                            : String.format(LS4, "Cubrebornera:" + TOFILL)
                            + String.format(LS4, "Caja Medidor:" + TOFILL))
            //                    + String.format(LS4, TOCHECK + " Caja de Barras") + "\r"
            );
            lines.add(
                    String.format(LS4, "Observaciones: " + ordenes.get(index)[38])
            //                    String.format(LS8, "Observaciones: " + ordenes.get(index)[38] + TOFILL + TOFILL)
            //                    + String.format(LS4, TOCHECK + " Caja de Distribución") + "\r"
            );
//            lines.add("");
//            lines.add(
            //                    "\r\n"
            //                    + String.format(LS8, "")
            //                    + String.format(L1, "")
            //                    + String.format(LS3, "Fecha: " + TOFILL) + "\r"                    
//                    String.format(LS4, "Fecha cumplimiento: " + fecha_hora) + "\r"
            //                    + String.format(L1, "Fecha cumplimiento: " + fecha_hora.substring(0, 8)) + "\r"
//            );
            lines.add(
                    String.format(LS8, ordenes.get(index)[2]) + "\r"
            //                    + String.format(L1, "")
            //                    //                    + String.format(LS3, "Hora: " + TOFILL) + "\r"
            //                    + String.format(LS3, "Hora cumplimiento: " + fecha_hora.substring(10)) + "\r"
            );
//            lines.add(
//                    String.format(LS4, "")
//                    + String.format(L4, TOFILL + TOFILL)
//                    + String.format(L1, "")
//                    + String.format(LS3, "") + "\r"
//            );
//            lines.add(
//                    String.format(LS4, "")
//                    + String.format(L4, "  Conformidad del Consumidor")
//                    + String.format(L1, "")
//                    + String.format(LS3, "")
//                    + "\r\n"
//                    + "\r\n"
//                    + (i % 2 == 0 ? "\r\n" : "") + "\r"
//            );
//            lines.add("");
//            lines.add("");
//            if(i%2==0) lines.add("");
        }
        return lines;
    }

    /**
     * Genera reporte de ordenes de rehabilitación en una lista de cadenas
     *
     * @param ordenes String en formato {int, int, int,....} que contiene las
     * ordenes a mostrar en el reporte
     * @return lines List<String> lista de lineas del reporte
     * @see OrdOrdenDao
     */
    private List<String> ordenRehabilitacionReporte(String idOrdenes, int type) {
        List< Object[]> ordenes = ordOrdenDao.getOrdenRehabilitacionReporteByIds(idOrdenes);
        TextPrinter textPrinter = new TextPrinter();
        int dav;
        for (int i = 1; i <= ordenes.size(); i++) {
            int index = i - 1;
            dav = CodigoVerificador.generarDAV(new BigInteger(ordenes.get(index)[4].toString()));
            String tipoTrabajoSuspension = "";
            OrdTipoOrden ordTipoOrdenSusp = ordTipoOrdenDao.findByCodigo(CommonConstant.ORDTIPOORDEN.SUSPENSION_FALTA_PAGO);
            OrdTipoOrden ordTipoOrdenMedRecupSusp = ordTipoOrdenDao.findByCodigo(CommonConstant.ORDTIPOORDEN.RECOJO_MEDIDOR_SERVICIO_DADO_BAJA);
            OrdOrden ultimaOrdenSusp = ordOrdenDao.findByConsumidorTipoOrden(new Integer(ordenes.get(index)[44].toString()), ordTipoOrdenSusp.getId());
            OrdOrden ultimaOrdenMedRecupSusp = ordOrdenDao.findByConsumidorTipoOrdenEfectivo(new Integer(ordenes.get(index)[44].toString()), ordTipoOrdenMedRecupSusp.getId());
            if (ultimaOrdenSusp != null) {
                switch (ultimaOrdenSusp.getIdEstado().getCodigo()) {

                    case CommonConstant.ORDESTADO.PENDIENTE: {
                        tipoTrabajoSuspension = "EN CAMPO";
                        break;
                    }
                    case CommonConstant.ORDESTADO.RETENIDA: {
                        tipoTrabajoSuspension = "EN CAMPO";
                        break;
                    }
                    case CommonConstant.ORDESTADO.CAMPO: {
                        tipoTrabajoSuspension = "EN CAMPO";
                        break;
                    }
                    case CommonConstant.ORDESTADO.NO_REALIZADA: {
                        tipoTrabajoSuspension = "EN CAMPO";
                        break;
                    }
                    case CommonConstant.ORDESTADO.PENDIENTE_APLICACION_SISTEMA: {
                        OrdOrdenInforme ordOrdenInforme = ordOrdenInformeDao.findByIdOrdenInformeTipoTrabajo(ultimaOrdenSusp.getId());
                        if (ordOrdenInforme != null) {
                            tipoTrabajoSuspension = ordOrdenInforme.getIdInforme().getDescripcion();

                            //VALIDA SI TIENE UNA ORDEN DE MEDIDOR DE CUENTA SUSPENDIDA
                            if (ordOrdenInforme.getIdInforme().getCodigo() != CommonConstant.TIPOTRABAJO.RECOJO_MEDIDOR && ordOrdenInforme.getIdInforme().getCodigo() != CommonConstant.TIPOTRABAJO.MEDIDOR_PERDIDO) {

                                if (ultimaOrdenMedRecupSusp != null && ultimaOrdenSusp != null) {
                                    if (ultimaOrdenMedRecupSusp.getCodigo().compareTo(ultimaOrdenSusp.getCodigo()) > 0) {
                                        tipoTrabajoSuspension = "MEDIDOR RECOGIDO";
                                    }
                                }
                            }
                        }
                        break;
                    }
                    case CommonConstant.ORDESTADO.CUMPLIDA: {
                        OrdOrdenInforme ordOrdenInforme = ordOrdenInformeDao.findByIdOrdenInformeTipoTrabajo(ultimaOrdenSusp.getId());
                        if (ordOrdenInforme != null) {
                            tipoTrabajoSuspension = ordOrdenInforme.getIdInforme().getDescripcion();
                            //VALIDA SI TIENE UNA ORDEN DE MEDIDOR DE CUENTA SUSPENDIDA
                            if (ordOrdenInforme.getIdInforme().getCodigo() != CommonConstant.TIPOTRABAJO.RECOJO_MEDIDOR && ordOrdenInforme.getIdInforme().getCodigo() != CommonConstant.TIPOTRABAJO.MEDIDOR_PERDIDO) {

                                if (ultimaOrdenMedRecupSusp != null && ultimaOrdenSusp != null) {
                                    if (ultimaOrdenMedRecupSusp.getCodigo().compareTo(ultimaOrdenSusp.getCodigo()) > 0) {
                                        tipoTrabajoSuspension = "MEDIDOR RECOGIDO";
                                    }
                                }
                            }
                        }

                        break;
                    }
                }

            }

            String[] orders = ordenes.get(index)[40].toString().split("\\{}");
            int reserved_orders = orders[0].equals("") ? 0 : orders.length;//-1 for ignoring self order
            reserved_orders = reserved_orders > 1 ? reserved_orders + 1 : 0;
            textPrinter.addEmpty(reserved_orders < 3);
            textPrinter.addEmpty(reserved_orders < 4);
            textPrinter.add(
                    textPrinter.format("N°O.S. " + ordenes.get(index)[1], 4, true),
                    textPrinter.format("    ORDEN DE SERVICIO", 4),
                    textPrinter.format(1),
                    textPrinter.format(ordenes.get(index)[30].toString(), 3, true)
            );
            textPrinter.add(
                    textPrinter.format("Fec. Gener. " + ordenes.get(index)[3], 4, true),
                    textPrinter.format("REHABILITACIÓN DE SERVICIO", 4),
                    textPrinter.format(1),
                    (type == 1
                            ? textPrinter.format("Nro." + i, 3, true)
                            : textPrinter.format("S/S N°.: " + ordenes.get(index)[38], 3, true))
            );
            textPrinter.addEmpty(reserved_orders < 5);
            if (reserved_orders > 1) {
                textPrinter.add(
                        textPrinter.format("Orden", 6, true),
                        textPrinter.format("Número", 6, true));
                for (int it = 0; it < reserved_orders - 1 && it < 5; it++) { //-1 header reserved space
                    String[] order = orders[it].split("\\|-\\|");
                    textPrinter.add(
                            textPrinter.format(order[0], 6, true),
                            textPrinter.format(order[1], 6, true));

                }
            }

            textPrinter.add(
                    textPrinter.format("N° Consumidor: " + ordenes.get(index)[4] + "-" + dav, 4, true),
                    textPrinter.format("Nombre: " + ordenes.get(index)[5], 8, true)
            );
            textPrinter.add(
                    textPrinter.format("Población: " + Optional.ofNullable(ordenes.get(index)[28]).orElse(""), 8, true)
                    + textPrinter.format("Teléfono: " + String.join(" - ", ordenes.get(index)[14].toString(), ordenes.get(index)[15].toString()), 4, true)
            );
            textPrinter.add(
                    textPrinter.format("Barrio: " + ordenes.get(index)[26], 8, true),
                    textPrinter.format("RUTA: " + ordenes.get(index)[8], 4, true)
            );
            textPrinter.add(
                    textPrinter.format("Dirección: " + ordenes.get(index)[10], 8, true),
                    textPrinter.format("Remesa: " + ordenes.get(index)[7], 4, true)
            );
            textPrinter.add(
                    textPrinter.format("Nro Casa: " + ordenes.get(index)[11], 3, true),
                    textPrinter.format("Piso: " + ordenes.get(index)[12], 2),
                    textPrinter.format("Dpto: " + ordenes.get(index)[12], 3),
                    textPrinter.format("Casa Antigua: " + ordenes.get(index)[24], 4, true)
            );
            textPrinter.add(
                    textPrinter.format("Categoría: " + ordenes.get(index)[16], 3, true),
                    textPrinter.format("Área: " + ordenes.get(index)[6], 4),
                    textPrinter.format("Sector Destino: " + ordenes.get(index)[25], 4, true)
            );
            textPrinter.add(
                    //"\r\n"
                    textPrinter.format("Nro.Suspensión: " + ordenes.get(index)[41], 6, true),
                    textPrinter.format("Operador: " + ordenes.get(index)[42], 6, true)
            //+ String.format(L4, "")
            //+ String.format(LS4, "Orden lectura: " + query.get(index)[29]) + "\r"
            );
            //textPrinter.addEmpty(reserved_orders < 4);
            textPrinter.add(
                    textPrinter.format("Medidor Recogido: " + ordenes.get(index)[32], 4, true),
                    (type == 1
                            ? textPrinter.format("Voltaje: " + ordenes.get(index)[21], 4)
                            : textPrinter.format("Voltaje: " + ordenes.get(index)[36], 4))
                    + textPrinter.format("Nro. Hilos: " + ordenes.get(index)[22], 4, true)
            );
            textPrinter.add(
                    textPrinter.format("Medidor Asignado: " + ordenes.get(index)[17], 4, true),
                    (type == 1
                            ? textPrinter.format("Precintos Desc.: " + ordenes.get(index)[31], 8, true)
                            : textPrinter.format("Pre. Conect.: " + ordenes.get(index)[35], 8, true))
            );
            textPrinter.add(
                    (type == 1
                            ? textPrinter.format("Constante: " + ordenes.get(index)[20], 4, true)
                            + textPrinter.format("Precintos Conex.: " + TOFILL, 8, true)
                            : textPrinter.format("Constante: " + ordenes.get(index)[39], 4, true)
                            + textPrinter.format("Precintos a Conectar", 8, true))
            );
            textPrinter.add(
                    textPrinter.format("Índice: " + ordenes.get(index)[19], 4, true)
                    + textPrinter.format("Índice Rehab.: " + TOFILL, 8, true)
            //                    (type == 1
            //                            ? textPrinter.format("", 8, true)
            //                            : textPrinter.format("Cobrebornera:" + TOFILL + TOFILL, 4, true)
            //                            + textPrinter.format("Caja de Medidor::" + TOFILL + TOFILL, 4, true))
            );
            textPrinter.add(
                    textPrinter.format("Código: " + ordenes.get(index)[18], 3, true)
                    + (type == 1
                            ? textPrinter.format("T.S.: " + ordenes.get(index)[27], 3)
                            + textPrinter.format("Resultado del Trabajo" + TOFILL, 6, true)
                            : textPrinter.format("Pto. Medición: " + ordenes.get(index)[37], 3)
                            + textPrinter.format("Resultado del Trabajo de Campo" + TOFILL, 6, true))
            );
            textPrinter.add(
                    (type == 1
                            ? textPrinter.format("Tipo de Conex.: " + ordenes.get(index)[23], 4, true)
                            + textPrinter.format(2)
                            //  + textPrinter.format(3)
                            : textPrinter.format("Tipo de Conex.: " + ordenes.get(index)[23], 3, true)
                            + textPrinter.format("Multiplicador: " + ordenes.get(index)[20], 3))
                    + textPrinter.format(TOCHECK + "Rehab. del Poste", 3)
                    + textPrinter.format("Fases Desconectadas", 3, true)
            );
            textPrinter.add(
                    textPrinter.format("Fecha de Pago: " + ordenes.get(index)[33], 6, true),
                    textPrinter.format(TOCHECK + "Rehab. con Medidor", 3),
                    textPrinter.format(" 1 2 3 N ", 3, true)
            );
            textPrinter.add(
                    textPrinter.format("Hora de Pago: " + ordenes.get(index)[34], 6, true),
                    textPrinter.format(TOCHECK + "Rehab. del Block", 3),
                    //textPrinter.format("|_|_|_|_|", 3, true)
                    textPrinter.format(ordenes.get(index)[43], 3, true)
            );
            textPrinter.add(
                    textPrinter.format("Operador Asignado: " + TOFILL, 6, true),
                    textPrinter.format(TOCHECK + "Rehab. C.Distrib.", 3),
                    textPrinter.format("Fases Conectadas", 3, true)
            );
            textPrinter.add(
                    textPrinter.format("Observaciones: " + TOFILL, 6, true),
                    //textPrinter.format(TOCHECK + "Rehab. C.Distrib.", 3),
                    textPrinter.format(3),
                    textPrinter.format(" 1 2 3 N ", 3, true)
            );
            textPrinter.add(
                    textPrinter.format("", 6, true),
                    textPrinter.format(3),
                    textPrinter.format("|_|_|_|_|", 3, true)
            );
            textPrinter.add(
                    textPrinter.format("Fecha: " + TOFILL, 8, true),
                    //                    textPrinter.format("Suspendido:" + ordenes.get(index)[29].toString(), 4, true)
                    textPrinter.format("Suspendido:" + tipoTrabajoSuspension, 4, true)
            );
            textPrinter.add(
                    textPrinter.format("Hora: " + TOFILL, 8, true)
            //textPrinter.format((ordenes.get(index)[17].equals(ordenes.get(index)[32])) ? "SUSPENSION CON MEDIDOR RECOGIDO" : "", 4, true)
            );
            textPrinter.add(
                    textPrinter.format("", 4, true),
                    textPrinter.format(TOFILL + TOFILL, 4),
                    textPrinter.format(1),
                    textPrinter.format("", 3, true)
            );
            textPrinter.add(
                    textPrinter.format("", 4, true),
                    textPrinter.format("  Conformidad del Consumidor", 4),
                    textPrinter.format(1),
                    textPrinter.format("", 3, true)
            );
            textPrinter.addEmpty(reserved_orders < 2);
            textPrinter.addEmpty(reserved_orders < 1);
            if (i % 2 == 0) {
                textPrinter.addEmpty();
            }
        }
        return textPrinter.getText();
    }

    private List<String> ordenRehabilitacionReporteCumplida(String idOrdenes, int type) {
        List<Object[]> ordenes = ordOrdenDao.getOrdenRehabilitacionReporteCumplidaByIds(idOrdenes);
        TextPrinter textPrinter = new TextPrinter();
        int dav;
        String fecha_hora;
        Boolean fase1, fase2, fase3, fase4;
        for (int i = 1; i <= ordenes.size(); i++) {
            int index = i - 1;
            dav = CodigoVerificador.generarDAV(new BigInteger(ordenes.get(index)[4].toString()));
            fecha_hora = ordenes.get(index)[46].toString();
            fase1 = (Boolean) ordenes.get(index)[52];
            fase2 = (Boolean) ordenes.get(index)[53];
            fase3 = (Boolean) ordenes.get(index)[54];
            fase4 = (Boolean) ordenes.get(index)[55];
            String tipoTrabajoSuspension = "";
            OrdTipoOrden ordTipoOrdenSusp = ordTipoOrdenDao.findByCodigo(CommonConstant.ORDTIPOORDEN.SUSPENSION_FALTA_PAGO);
            OrdTipoOrden ordTipoOrdenMedRecupSusp = ordTipoOrdenDao.findByCodigo(CommonConstant.ORDTIPOORDEN.RECOJO_MEDIDOR_SERVICIO_DADO_BAJA);
            OrdOrden ultimaOrdenSusp = ordOrdenDao.findByConsumidorTipoOrden(new Integer(ordenes.get(index)[44].toString()), ordTipoOrdenSusp.getId());
            OrdOrden ultimaOrdenMedRecupSusp = ordOrdenDao.findByConsumidorTipoOrdenEfectivo(new Integer(ordenes.get(index)[44].toString()), ordTipoOrdenMedRecupSusp.getId());
            if (ultimaOrdenSusp != null) {
                switch (ultimaOrdenSusp.getIdEstado().getCodigo()) {
                    case CommonConstant.ORDESTADO.PENDIENTE: {
                        tipoTrabajoSuspension = "EN CAMPO";
                        break;
                    }
                    case CommonConstant.ORDESTADO.RETENIDA: {
                        tipoTrabajoSuspension = "EN CAMPO";
                        break;
                    }
                    case CommonConstant.ORDESTADO.CAMPO: {
                        tipoTrabajoSuspension = "EN CAMPO";
                        break;
                    }
                    case CommonConstant.ORDESTADO.NO_REALIZADA: {
                        tipoTrabajoSuspension = "EN CAMPO";
                        break;
                    }
                    case CommonConstant.ORDESTADO.PENDIENTE_APLICACION_SISTEMA: {
                        OrdOrdenInforme ordOrdenInforme = ordOrdenInformeDao.findByIdOrdenInformeTipoTrabajo(ultimaOrdenSusp.getId());
                        if (ordOrdenInforme != null) {
                            tipoTrabajoSuspension = ordOrdenInforme.getIdInforme().getDescripcion();
                            //VALIDA SI TIENE UNA ORDEN DE MEDIDOR DE CUENTA SUSPENDIDA
                            if (ordOrdenInforme.getIdInforme().getCodigo() != CommonConstant.TIPOTRABAJO.RECOJO_MEDIDOR && ordOrdenInforme.getIdInforme().getCodigo() != CommonConstant.TIPOTRABAJO.MEDIDOR_PERDIDO) {
                                if (ultimaOrdenMedRecupSusp != null && ultimaOrdenSusp != null) {
                                    if (ultimaOrdenMedRecupSusp.getCodigo().compareTo(ultimaOrdenSusp.getCodigo()) > 0) {
                                        tipoTrabajoSuspension = "MEDIDOR RECOGIDO";
                                    }
                                }
                            }
                        }
                        break;
                    }
                    case CommonConstant.ORDESTADO.CUMPLIDA: {
                        OrdOrdenInforme ordOrdenInforme = ordOrdenInformeDao.findByIdOrdenInformeTipoTrabajo(ultimaOrdenSusp.getId());
                        if (ordOrdenInforme != null) {
                            tipoTrabajoSuspension = ordOrdenInforme.getIdInforme().getDescripcion();
                            //VALIDA SI TIENE UNA ORDEN DE MEDIDOR DE CUENTA SUSPENDIDA
                            if (ordOrdenInforme.getIdInforme().getCodigo() != CommonConstant.TIPOTRABAJO.RECOJO_MEDIDOR && ordOrdenInforme.getIdInforme().getCodigo() != CommonConstant.TIPOTRABAJO.MEDIDOR_PERDIDO) {
                                if (ultimaOrdenMedRecupSusp != null && ultimaOrdenSusp != null) {
                                    if (ultimaOrdenMedRecupSusp.getCodigo().compareTo(ultimaOrdenSusp.getCodigo()) > 0) {
                                        tipoTrabajoSuspension = "MEDIDOR RECOGIDO";
                                    }
                                }
                            }
                        }
                        break;
                    }
                }
            }
            String[] orders = ordenes.get(index)[40].toString().split("\\{}");
            int reserved_orders = orders[0].equals("") ? 0 : orders.length;//-1 for ignoring self order
            reserved_orders = reserved_orders > 1 ? reserved_orders + 1 : 0;
            textPrinter.addEmpty(reserved_orders < 3);
            textPrinter.addEmpty(reserved_orders < 4);
            textPrinter.add(
                    textPrinter.format("N°O.S. " + ordenes.get(index)[1], 4, true),
                    textPrinter.format("    ORDEN DE SERVICIO", 4),
                    textPrinter.format(1),
                    textPrinter.format(ordenes.get(index)[30].toString(), 3, true)
            );
            textPrinter.add(
                    textPrinter.format("Fec. Gener. " + ordenes.get(index)[3], 4, true),
                    textPrinter.format("REHABILITACIÓN DE SERVICIO", 4),
                    textPrinter.format(1),
                    (type == 1
                            ? textPrinter.format("Nro." + i, 3, true)
                            : textPrinter.format("S/S N°.: " + ordenes.get(index)[38], 3, true))
            );
            textPrinter.addEmpty(reserved_orders < 5);
            if (reserved_orders > 1) {
                textPrinter.add(
                        textPrinter.format("Orden", 6, true),
                        textPrinter.format("Número", 6, true));
                for (int it = 0; it < reserved_orders - 1 && it < 5; it++) { //-1 header reserved space
                    String[] order = orders[it].split("\\|-\\|");
                    textPrinter.add(
                            textPrinter.format(order[0], 6, true),
                            textPrinter.format(order[1], 6, true));
                }
            }
            textPrinter.add(
                    textPrinter.format("N° Consumidor: " + ordenes.get(index)[4] + "-" + dav, 4, true),
                    textPrinter.format("Nombre: " + ordenes.get(index)[5], 8, true)
            );
            textPrinter.add(
                    textPrinter.format("Población: " + Optional.ofNullable(ordenes.get(index)[28]).orElse(""), 8, true)
                    + textPrinter.format("Teléfono: " + String.join(" - ", ordenes.get(index)[14].toString(), ordenes.get(index)[15].toString()), 4, true)
            );
            textPrinter.add(
                    textPrinter.format("Barrio: " + ordenes.get(index)[26], 8, true),
                    textPrinter.format("RUTA: " + ordenes.get(index)[8], 4, true)
            );
            textPrinter.add(
                    textPrinter.format("Dirección: " + ordenes.get(index)[10], 8, true),
                    textPrinter.format("Remesa: " + ordenes.get(index)[7], 4, true)
            );
            textPrinter.add(
                    textPrinter.format("Nro Casa: " + ordenes.get(index)[11], 3, true),
                    textPrinter.format("Piso: " + ordenes.get(index)[12], 2),
                    textPrinter.format("Dpto: " + ordenes.get(index)[12], 3),
                    textPrinter.format("Casa Antigua: " + ordenes.get(index)[24], 4, true)
            );
            textPrinter.add(
                    textPrinter.format("Categoría: " + ordenes.get(index)[16], 3, true),
                    textPrinter.format("Área: " + ordenes.get(index)[6], 4),
                    textPrinter.format("Sector Destino: " + ordenes.get(index)[25], 4, true)
            );
            textPrinter.add(
                    //"\r\n"
                    textPrinter.format("Nro.Suspensión: " + ordenes.get(index)[41], 6, true),
                    textPrinter.format("Operador: " + ordenes.get(index)[42], 6, true)
            //+ String.format(L4, "")
            //+ String.format(LS4, "Orden lectura: " + query.get(index)[29]) + "\r"
            );
            //textPrinter.addEmpty(reserved_orders < 4);
            textPrinter.add(
                    textPrinter.format("Medidor Recogido: " + ordenes.get(index)[32], 4, true),
                    (type == 1
                            ? textPrinter.format("Voltaje: " + ordenes.get(index)[21], 4)
                            : textPrinter.format("Voltaje: " + ordenes.get(index)[36], 4))
                    + textPrinter.format("Nro. Hilos: " + ordenes.get(index)[22], 4, true)
            );
            textPrinter.add(
                    textPrinter.format("Medidor Asignado: " + ordenes.get(index)[17], 4, true),
                    (type == 1
                            ? textPrinter.format("Precintos Desc.: " + ordenes.get(index)[31], 8, true)
                            : textPrinter.format("Pre. Conect.: " + ordenes.get(index)[35], 8, true))
            );
            textPrinter.add(
                    (type == 1
                            ? textPrinter.format("Constante: " + ordenes.get(index)[20], 4, true)
                            //                            + textPrinter.format("Precintos Conex.: " + TOFILL, 8, true)
                            + textPrinter.format("Precintos Conex.: " + ordenes.get(index)[31], 8, true)
                            : textPrinter.format("Constante: " + ordenes.get(index)[39], 4, true)
                            + textPrinter.format("Precintos a Conectar", 8, true))
            );
            textPrinter.add(
                    textPrinter.format("Índice: " + ordenes.get(index)[19], 4, true),
                    (type == 1
                            ? textPrinter.format("", 8, true)
                            : textPrinter.format("Cobrebornera:" + TOFILL + TOFILL, 4, true)
                            + textPrinter.format("Caja de Medidor::" + TOFILL + TOFILL, 4, true))
            );
            textPrinter.add(
                    textPrinter.format("Código: " + ordenes.get(index)[18], 3, true)
                    + (type == 1
                            ? textPrinter.format("T.S.: " + ordenes.get(index)[27], 3)
                            + textPrinter.format("Resultado del Trabajo: " + ordenes.get(index)[47], 6, true)
                            : textPrinter.format("Pto. Medición: " + ordenes.get(index)[37], 3)
                            + textPrinter.format("Resultado del Trabajo de Campo" + ordenes.get(index)[47], 6, true))
            //                            + textPrinter.format("Resultado del Trabajo de Campo" + TOFILL, 6, true))
            );
            textPrinter.add(
                    (type == 1
                            ? textPrinter.format("Tipo de Conex.: " + ordenes.get(index)[23], 4, true)
                            + textPrinter.format(2)
                            + textPrinter.format(3)
                            : textPrinter.format("Tipo de Conex.: " + ordenes.get(index)[23], 3, true)
                            + textPrinter.format("Multiplicador: " + ordenes.get(index)[20], 3))
            //                    + textPrinter.format("Fases Desconectadas", 3, true)
            );
            textPrinter.add(
                    textPrinter.format("Fecha de Pago: " + ordenes.get(index)[33], 6, true),
                    //                    textPrinter.format(TOCHECK + "Rehab. del Poste", 3)
                    textPrinter.format(ordenes.get(index)[48], 3)
            //                    textPrinter.format(" 1 2 3 N ", 3, true)
            );
            textPrinter.add(
                    textPrinter.format("Hora de Pago: " + ordenes.get(index)[34], 6, true),
                    //                    textPrinter.format(TOCHECK + "Rehab. con Medidor", 3),
                    //textPrinter.format("|_|_|_|_|", 3, true)
                    textPrinter.format("Tipo trabajo: " + ordenes.get(index)[48], 3, true)
            );
            textPrinter.add(
                    //                    textPrinter.format("Operador Asignado: " + TOFILL, 6, true),
                    textPrinter.format("Operador Asignado: " + ordenes.get(index)[50], 6, true),
                    textPrinter.format(3),
                    //                    textPrinter.format(TOCHECK + "Rehab. del Block", 3),
                    textPrinter.format("Fases Conectadas", 3, true)
            );
            textPrinter.add(
                    //                    textPrinter.format("Observaciones: " + TOFILL, 6, true),
                    textPrinter.format("Observaciones: " + ordenes.get(index)[51], 6, true),
                    textPrinter.format(3),
                    textPrinter.format(" 1 2 3 N ", 3, true)
            );
            textPrinter.add(
                    textPrinter.format("", 6, true),
                    textPrinter.format(3),
                    //                    textPrinter.format("|_|_|_|_|", 3, true)
                    (fase1 ? "X" : " ") + (fase2 ? "X" : " ") + (fase3 ? "X" : " ") + (fase4 ? "X" : " ")
            );
            textPrinter.add(
                    //                    textPrinter.format("Fecha: " + TOFILL, 8, true),
                    textPrinter.format("Fecha Cumplimiento: " + fecha_hora, 6, true),
                    //                    textPrinter.format("Suspendido:" + ordenes.get(index)[29].toString(), 4, true)
                    textPrinter.format("Suspendido:" + tipoTrabajoSuspension, 6, true)
            );
//            textPrinter.add(
//                    textPrinter.format("Hora: " + fecha_hora.substring(10))
//                    textPrinter.format("Hora: " + TOFILL, 8, true)
            //textPrinter.format((ordenes.get(index)[17].equals(ordenes.get(index)[32])) ? "SUSPENSION CON MEDIDOR RECOGIDO" : "", 4, true)
//            );
//            textPrinter.add(
//                    textPrinter.format("", 4, true),
//                    textPrinter.format(TOFILL + TOFILL, 4),
//                    textPrinter.format(1),
//                    textPrinter.format("", 3, true)
//            );
//            textPrinter.add(
//                    textPrinter.format("", 4, true),
//                    textPrinter.format("  Conformidad del Consumidor", 4),
//                    textPrinter.format(1),
//                    textPrinter.format("", 3, true)
//            );
            textPrinter.addEmpty(reserved_orders < 2);
            textPrinter.addEmpty(reserved_orders < 1);
            if (i % 2 == 0) {
                textPrinter.addEmpty();
            }
        }
        return textPrinter.getText();
    }

    /**
     * Genera reporte de ordenes de rehabilitación en una lista de cadenas
     *
     * @param ordenes String en formato {int, int, int,....} que contiene las
     * ordenes a mostrar en el reporte
     * @return lines List<String> lista de lineas del reporte
     * @see OrdOrdenDao
     */
    private List<String> ordenRehabilitacionReporteV1(String idOrdenes, int type) {
        List<Object[]> ordenes = ordOrdenDao.getOrdenRehabilitacionReporteByIds(idOrdenes);
        List<String> lines = new ArrayList<>();
        for (int i = 1; i <= ordenes.size(); i++) {
            //lines.add("\r\n");
            int index = i - 1;
            //lines.add("\r\n");
            lines.add(
                    "\r\n"
                    + "\r\n"
                    + String.format(LS4, "N°O.S. " + ordenes.get(index)[1])
                    + String.format(L4, "    ORDEN DE SERVICIO")
                    + String.format(L1, "")
                    + String.format(LS3, ordenes.get(index)[30])
            );
            lines.add(
                    String.format(LS4, "Fec. Gener. " + ordenes.get(index)[3])
                    + String.format(L4, "REHABILITACIÓN DE SERVICIO")
                    + String.format(L1, "")
                    + (type == 1
                            ? String.format(LS3, "Nro." + i)
                            : String.format(LS3, "S/S N°.: " + ordenes.get(index)[38]))
            );
            //lines.add("\r\n");
            lines.add(
                    "\r\n"
                    + String.format(LS4, "N° Consumidor: " + ordenes.get(index)[4])
                    + String.format(LS8, "Nombre: " + ordenes.get(index)[5])
            );
            lines.add(
                    String.format(LS8, "Población: " + Optional.ofNullable(ordenes.get(index)[28]).orElse(""))
                    + String.format(LS4, "Teléfono: " + String.join(" - ", ordenes.get(index)[14].toString(), ordenes.get(index)[15].toString()))
            );
            lines.add(
                    String.format(LS8, "Barrio: " + ordenes.get(index)[26])
                    + String.format(LS4, "RUTA: " + ordenes.get(index)[8])
            );
            lines.add(
                    String.format(LS8, "Dirección: " + ordenes.get(index)[10])
                    + String.format(LS4, "Remesa: " + ordenes.get(index)[7])
            );
            lines.add(
                    String.format(LS3, "Nro Casa: " + ordenes.get(index)[11])
                    + String.format(L2, "Piso: " + ordenes.get(index)[12])
                    + String.format(L3, "Dpto: " + ordenes.get(index)[12])
                    + String.format(LS4, "Casa Antigua: " + ordenes.get(index)[24])
            );
            lines.add(
                    String.format(LS3, "Categoría: " + ordenes.get(index)[16])
                    + String.format(L4, "Área: " + ordenes.get(index)[6])
                    + String.format(LS4, "Sector Destino: " + ordenes.get(index)[25])
            );
            //lines.add("\r\n");
            lines.add(
                    "\r\n"
                    + String.format(LS4, "Medidor Recogido: " + ordenes.get(index)[32])
                    + (type == 1
                            ? String.format(L4, "Voltaje: " + ordenes.get(index)[21])
                            : String.format(L4, "Voltaje: " + ordenes.get(index)[36]))
                    + String.format(LS4, "Nro. Hilos: " + ordenes.get(index)[22])
            );
            lines.add(
                    String.format(LS4, "Medidor Asignado: " + ordenes.get(index)[17])
                    + (type == 1
                            ? String.format(LS8, "Precintos Desc.: " + ordenes.get(index)[31])
                            : String.format(LS8, "Pre. Conect.: " + ordenes.get(index)[35]))
            );
            lines.add(
                    (type == 1
                            ? String.format(LS4, "Constante: " + ordenes.get(index)[20])
                            + String.format(LS8, "Precintos Conex.: " + TOFILL)
                            : String.format(LS4, "Constante: " + ordenes.get(index)[39])
                            + String.format(LS8, "Precintos a Conectar"))
            );
            lines.add(
                    String.format(LS4, "Índice: " + ordenes.get(index)[19])
                    + (type == 1
                            ? String.format(LS8, "")
                            : String.format(LS4, "Cobrebornera:" + TOFILL + TOFILL)
                            + String.format(LS4, "Caja de Medidor::" + TOFILL + TOFILL))
            );
            lines.add(
                    String.format(LS3, "Código: " + ordenes.get(index)[18])
                    + (type == 1
                            ? String.format(L3, "T.S.: " + ordenes.get(index)[27])
                            + String.format(LS6, "Resultado del Trabajo" + TOFILL)
                            : String.format(L3, "Pto. Medición: " + ordenes.get(index)[37])
                            + String.format(LS6, "Resultado del Trabajo de Campo" + TOFILL))
            );
            lines.add(
                    (type == 1
                            ? String.format(LS4, "Tipo de Conex.: " + ordenes.get(index)[23])
                            + String.format(L2, "")
                            + String.format(L3, "")
                            : String.format(LS3, "Tipo de Conex.: " + ordenes.get(index)[23])
                            + String.format(L3, "Multiplicador: " + ordenes.get(index)[20]))
                    + String.format(LS3, "Fases Desconectadas")
            );
            lines.add(
                    String.format(LS6, "Fecha de Pago: " + ordenes.get(index)[33])
                    + String.format(L3, TOCHECK + "Rehab. del Poste")
                    + String.format(LS3, " 1 2 3 N ")
            );
            lines.add(
                    String.format(LS6, "Hora de Pago: " + ordenes.get(index)[34])
                    + String.format(L3, TOCHECK + "Rehab. con Medidor")
                    + String.format(LS3, "|_|_|_|_|")
            );
            lines.add(
                    String.format(LS6, "Operador Asignado: " + TOFILL)
                    + String.format(L3, TOCHECK + "Rehab. del Block")
                    + String.format(LS3, "Fases Conectadas")
            );
            lines.add(
                    String.format(LS6, "Observaciones: " + TOFILL)
                    + //String.format(L3, "Fecha: "+TOFILL)+
                    String.format(L3, "")
                    + String.format(LS3, " 1 2 3 N ")
            );
            lines.add(
                    String.format(LS6, "")
                    + String.format(L3, "")
                    + String.format(LS3, "|_|_|_|_|")
            );
            lines.add(
                    String.format(LS8, "Fecha: " + TOFILL)
                    + String.format(LS4, ordenes.get(index)[29].toString().contains("-") ? "Suspendido:" + ordenes.get(index)[29].toString().split("-")[1] : "")
            );
            lines.add(
                    String.format(LS8, "Hora: " + TOFILL)
                    + String.format(LS4, (ordenes.get(index)[17].equals(ordenes.get(index)[32])) ? "SUSPENSION CON MEDIDOR RECOGIDO" : "")
            );
            lines.add(
                    String.format(LS4, "")
                    + String.format(L4, TOFILL + TOFILL)
                    + String.format(L1, "")
                    + String.format(LS3, "")
            );
            lines.add(
                    String.format(LS4, "")
                    + String.format(L4, "  Conformidad del Consumidor")
                    + String.format(L1, "")
                    + String.format(LS3, "")
                    + "\r\n"
                    + "\r\n"
                    + (i % 2 == 0 ? "\r\n" : "")
            );
            //lines.add("\r\n");
            //lines.add("\r\n");
            //if(i%2==0) lines.add("\r\n");
        }
        return lines;
    }

    /**
     * Genera reporte de ordenes de contrato nuevo en una lista de
     * idetificadores
     *
     * @param ordenes String en formato {int, int, int,....} que contiene las
     * ordenes a mostrar en el reporte
     * @return lines List<String> lista de lineas del reporte
     * @see OrdOrdenDao
     */
    private List<String> ordenContratoNuevoReporte(String idOrdenes) {
        List<Object[]> ordenes = ordOrdenDao.getOrdenContratoNuevoByIds(idOrdenes);
        List<String> lines = new ArrayList<>();
        int index;
        String law_first_line = "Señor(a) consumidor, los precintos de seguridad instalados en su medidor el día / /20  ,tienen";
        String law_second_line = "los siguientes códigos de identificación:";
        String art_first_line = "Su remoción o violación constituye infracción. Es su obligación, como Consumidor regulado,";
        String art_second_line = "verificar su existencia y cuidar supermanencia. (Art. 22 Reglamento de Suministro).";
        int number = 1;
        for (int i = 1; i <= ordenes.size(); i++) {
            index = i - 1;
            String[] observations = ordenes.get(index)[54].toString().split("\\{}");
            int reserved = observations[0].equals("") ? 0 : observations.length;
            lines.add(
                    "\r\n"
                    + String.format(LS4, "Fecha: " + ordenes.get(index)[53])
                    + String.format(L3, "ORDEN DE SERVICIO")
                    + String.format(LS4, "N° Orden: " + ordenes.get(index)[1])
                    + String.format("%7s", number)
                    + "\r"
            );
            lines.add(
                    String.format(LS4, "Fecha Asig. Med: " + ordenes.get(index)[4])
                    + String.format(L1, "")
                    + String.format(L3, " CONTRATO NUEVO")
                    + String.format(LS4, "N° Solicitud: " + ordenes.get(index)[36])
                    //+ (reserved < 9 ? "\r\n" : "") 
                    + "\r"
            );
            number++;
//            if(reserved < 9) {
//                lines.add("");
//            }
            lines.add(
                    String.format(LS3, "DATOS CONSUMIDOR")
                    + String.format(L3, "N° Consumidor: " + ordenes.get(index)[5])
                    + String.format(L1, "")
                    + String.format(LS4, "Fecha generación: " + ordenes.get(index)[3]) + "\r"
            );
            lines.add(
                    String.format(LS8, "Nombre: " + ordenes.get(index)[6])
                    + String.format(LS4, "Teléfono: " + String.join(" - ", ordenes.get(index)[15].toString(), ordenes.get(index)[16].toString())) + "\r"
            );
            lines.add(
                    String.format(LS8, "Zona: " + (ordenes.get(index)[10].toString().equals("") ? ordenes.get(index)[34] : ordenes.get(index)[10]))
                    + String.format(LS4, "Ruta: " + ordenes.get(index)[9]) + "\r"
            );
            lines.add(
                    String.format(LS8, "Barrio: " + ordenes.get(index)[28])
                    + String.format(LS4, "Remesa: " + ordenes.get(index)[8]) + "\r"
            );
            lines.add(
                    String.format(LS8, "Dirección: " + ordenes.get(index)[11])
                    + String.format(LS4, "Cuenta Antigua: " + ordenes.get(index)[26]) + "\r"
            );
            lines.add(
                    String.format(LS3, "Nro Casa: " + ordenes.get(index)[12])
                    + String.format(L2, "Piso: " + ordenes.get(index)[13])
                    + String.format(L3, "Dpto: " + ordenes.get(index)[14])
                    + String.format(LS4, "Categoría: " + ordenes.get(index)[17])
                    + (reserved < 1 ? "\r\n" : "") + "\r"
            );
//            if(reserved < 1) {
//                lines.add("");
//            }
            lines.add(
                    String.format(LS12, "Obs.Sol: " + ordenes.get(index)[38]) + "\r"
            );
            lines.add(
                    String.format(LS12, "Obs.Ins: " + ordenes.get(index)[39]) + "\r"
            );
            for (int it = 0; it < reserved; it++) {
                String[] observation = observations[it].split("\\|-\\|");
                lines.add(
                        String.format(LS2, "Mat. Adicional")
                        + String.format(L6, observation[1])
                        + String.format(L2, observation[2] + TOFILL)
                        + String.format(LS2, observation[4]) + "\r"
                );
            }
//            if(reserved < 8) {
//                lines.add("");
//            }
            lines.add(
                    (reserved < 8 ? "\r\n" : "")
                    + String.format(LS4, "DATOS CONEXIÓN")
                    + String.format(L4, "Relación CT's: " + ordenes.get(index)[48])
                    + String.format(LS4, "Relación PT's: " + ordenes.get(index)[49]) + "\r"
            );
            lines.add(
                    String.format(LS12, "Voltaje: " + ordenes.get(index)[23]) + "\r"
            );
//            if(reserved < 2) {
//                lines.add("");
//            }
            lines.add(
                    (reserved < 2 ? "\r\n" : "")
                    + String.format(LS3, "N° Hilos: " + ordenes.get(index)[24])
                    + String.format(L2, "  PRECINTOS  ")
                    + this.addDataRow("Ser.| Num.|Ser.| Num.|Ser.| Num.|Ser.| Num.".split("\\|"), 4) + "\r"
            );
            lines.add(
                    String.format(LS3, "Tipo Conex: " + ordenes.get(index)[25])
                    + String.format(L2, FILLMINUS)
                    + this.addLineRow(4) + "\r"
            );
            lines.add(
                    String.format(LS3, "Pto. Medición: " + ordenes.get(index)[29])
                    + String.format(L2, "Tapa de Medidor")
                    + this.addDataRow(ordenes.get(index)[40].toString().split(" "), 4) + "\r"
            );
            lines.add(
                    String.format(LS3, "Medidor: " + ordenes.get(index)[18])
                    + String.format(L2, FILLMINUS)
                    + this.addLineRow(4) + "\r"
            );
            lines.add(
                    String.format(LS3, "Constante: " + ordenes.get(index)[22])
                    + String.format(L2, "Cubrebornera")
                    + this.addDataRow(ordenes.get(index)[41].toString().split(" "), 4) + "\r"
            );
            lines.add(
                    String.format(LS3, "Índice: " + ordenes.get(index)[20])
                    + String.format(L2, FILLMINUS)
                    + this.addLineRow(4) + "\r"
            );
            lines.add(
                    String.format(LS3, "Código: " + ordenes.get(index)[19])
                    + String.format(L2, "Caja de Medidor")
                    + this.addDataRow(ordenes.get(index)[42].toString().split(" "), 4) + "\r"
            );
            lines.add(
                    String.format(LS3, "Serie: " + ordenes.get(index)[52])
                    + String.format(L2, FILLMINUS)
                    + this.addLineRow(4) + "\r"
            );
            lines.add(
                    String.format(LS3, "Multiplicador: " + ordenes.get(index)[21])
                    + String.format(L2, "Caja de Distrib.")
                    + this.addDataRow(ordenes.get(index)[43].toString().split(" "), 4) + "\r"
            );
            lines.add(
                    String.format(LS3, "")
                    + String.format(L2, FILLMINUS)
                    + this.addLineRow(4) + "\r"
            );
            lines.add(
                    String.format(LS3, "")
                    + String.format(L2, "Demandimetro")
                    + this.addDataRow(ordenes.get(index)[44].toString().split(" "), 4) + "\r"
            );
            lines.add(
                    String.format(LS3, "")
                    + String.format(L2, FILLMINUS)
                    + this.addLineRow(4) + "\r"
            );
            lines.add(
                    String.format(LS3, "")
                    + String.format(L2, "TEST SWTCH")
                    + this.addDataRow(ordenes.get(index)[45].toString().split(" "), 4) + "\r"
            );

            Integer sistemaMedicion = ordenes.get(index)[58] != null ? Integer.parseInt(ordenes.get(index)[58].toString()) : null;
            if (sistemaMedicion != null && (sistemaMedicion == 3 || sistemaMedicion == 4)) {
                lines.add(
                        String.format(LS3, "")
                        + String.format(L2, FILLMINUS)
                        + this.addLineRow(4) + "\r"
                );
                lines.add(
                        String.format(LS3, "")
                        + String.format(L2, "CAJA CT'S")
                        + this.addDataRow(ordenes.get(index)[56].toString().split(" "), 4) + "\r"
                );
                lines.add(
                        String.format(LS3, "")
                        + String.format(L2, FILLMINUS)
                        + this.addLineRow(4) + "\r"
                );
                lines.add(
                        String.format(LS3, "")
                        + String.format(L2, "CELDA MEDICIÓN")
                        + this.addDataRow(ordenes.get(index)[57].toString().split(" "), 4) + "\r"
                );
            }

//            if(reserved < 7) {
//                lines.add("");
//            }
            lines.add(
                    (reserved < 7 ? "\r\n" : "")
                    + String.format(LS4, "RES. TRABAJO DE CAMPO")
                    + String.format(L4, "# Inf. Ensayo" + TOFILLSHORT)
                    + String.format(LS4, "Dat. Con. Fases Inspección") + "\r"
            );
            lines.add(
                    String.format(LS4, "Trab. Ejecutado" + TOFILLSHORT)
                    + String.format(L4, "Código Operario " + TOFILLSHORT)
                    + String.format(L1, "")
                    + String.format(LS3, " 1 2 3 N") + "\r"
            );
            lines.add(
                    String.format(LS4, "Trab. No Realizado" + TOFILLSHORT)
                    + String.format(L4, "Fecha Conexión " + TOFILLSHORT)
                    + String.format(L1, "")
                    + String.format(LS3, "|"
                            + (ordenes.get(index)[30].toString().equals("true") ? "X" : "_") + "|"
                            + (ordenes.get(index)[31].toString().equals("true") ? "X" : "_") + "|"
                            + (ordenes.get(index)[32].toString().equals("true") ? "X" : "_") + "|"
                            + (ordenes.get(index)[33].toString().equals("true") ? "X" : "_") + "|") + "\r"
            );
            lines.add(
                    String.format(LS4, "Imp. de Acceso" + TOFILLSHORT)
                    + String.format(L4, "Hora de Conexión: " + TOFILLSHORT)
                    + String.format(LS4, "Dat. Con. Fases Ejecución") + "\r"
            );
            lines.add(
                    String.format(LS4, "Obs. Trab. Contratista" + TOFILLSHORT)
                    + String.format(L4, "")
                    + String.format(L1, "")
                    + String.format(LS3, " 1 2 3 N") + "\r"
            );
            String observacion = ordenes.get(index)[55].toString();
            if (observacion.equals("")) {
                observacion = TOFILL;
            }
            lines.add(
                    String.format(LS4, "Obs:" + observacion)
                    + String.format(L4, "")
                    + String.format(L1, "")
                    + String.format(LS3, "|_|_|_|_|") + "\r"
            );
//            if(reserved < 5) {
//                lines.add("");
//            }
            lines.add(
                    (reserved < 5 ? "\r\n" : "")
                    + String.format(LS4, "")
                    + String.format(L4, TOFILL + TOFILL)
                    + String.format(LS4, "") + "\r"
            );
            lines.add(
                    String.format(LS4, "")
                    + String.format(L4, "    Firma del Consumidor")
                    + String.format(LS4, "") + "\r"
            );
//            if(reserved < 4) {
//                lines.add("");
//            }
            lines.add(
                    (reserved < 4 ? "\r\n" : "")
                    + String.format(L12, law_first_line) + "\r"
            );
            lines.add(
                    String.format(L12, law_second_line) + "\r"
            );
//            if(reserved < 6) {
//                lines.add("");
//            }
            lines.add(
                    (reserved < 6 ? "\r\n" : "")
                    + String.format(LS3, "N° Consumidor")
                    + String.format(L2, "  PRECINTOS  ")
                    + this.addDataRow("Ser.| Num.|Ser.| Num.|Ser.| Num.|Ser.| Num.".split("\\|"), 4) + "\r"
            );
            lines.add(
                    String.format(LS3, ordenes.get(index)[5])
                    + String.format(L2, FILLMINUS)
                    + this.addLineRow(4) + "\r"
            );
            lines.add(
                    String.format(LS3, "N° Medidor:")
                    + String.format(L2, "Tapa de Medidor")
                    + this.addDataRow(ordenes.get(index)[40].toString().split(" "), 4) + "\r"
            );
            lines.add(
                    String.format(LS3, ordenes.get(index)[18])
                    + String.format(L2, FILLMINUS)
                    + this.addLineRow(4) + "\r"
            );
            lines.add(
                    String.format(LS3, "")
                    + String.format(L2, "Cubrebornera")
                    + this.addDataRow(ordenes.get(index)[41].toString().split(" "), 4) + "\r"
            );
            lines.add(
                    String.format(LS3, "")
                    + String.format(L2, FILLMINUS)
                    + this.addLineRow(4) + "\r"
            );
            lines.add(
                    String.format(LS3, "")
                    + String.format(L2, "Caja de Medidor")
                    + this.addDataRow(ordenes.get(index)[42].toString().split(" "), 4) + "\r"
            );
            lines.add(
                    String.format(LS3, "")
                    + String.format(L2, FILLMINUS)
                    + this.addLineRow(4) + "\r"
            );
            lines.add(
                    String.format(LS3, "")
                    + String.format(L2, "Caja de Distrib.")
                    + this.addDataRow(ordenes.get(index)[43].toString().split(" "), 4) + "\r"
            );
            lines.add(
                    String.format(LS3, "")
                    + String.format(L2, FILLMINUS)
                    + this.addLineRow(4) + "\r"
            );
            lines.add(
                    String.format(LS3, "")
                    + String.format(L2, "Demandimetro")
                    + this.addDataRow(ordenes.get(index)[44].toString().split(" "), 4) + "\r"
            );
            lines.add(
                    String.format(LS3, "")
                    + String.format(L2, FILLMINUS)
                    + this.addLineRow(4) + "\r"
            );
            lines.add(
                    String.format(LS3, "")
                    + String.format(L2, "TEST SWTCH")
                    + this.addDataRow(ordenes.get(index)[45].toString().split(" "), 4) + "\r"
            );

            if (sistemaMedicion != null && (sistemaMedicion == 3 || sistemaMedicion == 4)) {
                lines.add(
                        String.format(LS3, "")
                        + String.format(L2, FILLMINUS)
                        + this.addLineRow(4) + "\r"
                );
                lines.add(
                        String.format(LS3, "")
                        + String.format(L2, "CAJA CT'S")
                        + this.addDataRow(ordenes.get(index)[56].toString().split(" "), 4) + "\r"
                );
                lines.add(
                        String.format(LS3, "")
                        + String.format(L2, FILLMINUS)
                        + this.addLineRow(4) + "\r"
                );
                lines.add(
                        String.format(LS3, "")
                        + String.format(L2, "CELDA MEDICIÓN")
                        + this.addDataRow(ordenes.get(index)[57].toString().split(" "), 4) + "\r"
                );
            }

//            if(reserved < 3) {
//                lines.add("");
//            }
            lines.add(
                    (reserved < 3 ? "\r\n" : "")
                    + String.format(L12, art_first_line) + "\r"
            );
            lines.add(
                    String.format(L12, art_second_line) + "\r"
            );
        }
        return lines;
    }

    private String addDataRow(String data[], int size) {
        String result = "";
        size *= 2;
        String set[] = Arrays.copyOf(data, size);
        Arrays.fill(set, (data.length > size ? size : data.length), size, " ");
        for (int i = 0; i < size; i += 2) {
            result
                    += String.format(PX5, "|" + set[i])
                    + String.format(L1, "|" + set[i + 1]);
        }
        return result;
    }

    private String addDataRowExtended(String data[], int size) {
        String result = "";
        size *= 3;
        String set[] = Arrays.copyOf(data, size);
        Arrays.fill(set, (data.length > size ? size : data.length), size, " ");
        for (int i = 0; i < size; i += 3) {
            result
                    += String.format(PX5, "|" + set[i])
                    + String.format(L1, "|" + set[i + 1])
                    + String.format(PX3, "|" + (set.length >= i + 2 ? set[i + 2] : ""));
        }
        return result;
    }

    private String[] addPrecintoEstadoEnBlanco(String data[]) {
        List<String> list = new ArrayList<>(Arrays.asList());
        for (int i = 1; i <= data.length; i++) {
            list.add(data[i - 1]);
            if (i % 2 == 0) {
                list.add(" ");
            }
        }
        return list.stream().toArray(String[]::new);
    }

    private String addLineRow(int size) {
        String result = "";
        for (int i = 0; i < size; i++) {
            result
                    += String.format(PX5, "|" + FILLMINUS)
                    + String.format(L1, "|" + FILLMINUS);
        }
        return result;
    }

    private String addLineRowExtended(int size) {
        String result = "";
        for (int i = 0; i < size; i++) {
            result
                    += String.format(PX5, "|" + FILLMINUS)
                    + String.format(L1, "|" + FILLMINUS)
                    + String.format(PX3, "|" + FILLMINUS);
        }
        return result;
    }

    /**
     * Genera reporte de ordenes de cambio de medidor dado una lista de
     * idetificadores
     *
     * @param ordenes String en formato {int, int, int,....} que contiene las
     * ordenes a mostrar en el reporte
     * @return lines List<String> lista de lineas del reporte
     * @see OrdOrdenDao
     */
    private List<String> ordenCambioMedidorReporte(String idOrdenes) {
        List<Object[]> ordenes = ordOrdenDao.getOrdenCambioMedidorByIds(idOrdenes);
        List<String> lines = new ArrayList<>();
        int index;
        for (int i = 1; i <= ordenes.size(); i++) {
            //report has 11 free espaces to be filled with orders and observations, then rest would be shown as blank line to beautify report
            int free_spaces = 11;
            index = i - 1;
            String[] observations = ordenes.get(index)[59].toString().split("\\{}");
            String[] orders = ordenes.get(index)[60].toString().split("\\{}");
            int reserved_orders = orders[0].equals("") ? 0 : (orders.length - 1);
            int reserved_observations = observations[0].equals("") ? 0 : observations.length;
            if (free_spaces <= reserved_orders + reserved_observations) {
                reserved_observations = free_spaces - reserved_orders;
            }
            int reserved = reserved_orders + reserved_observations;

            String idString = String.format("" + ordenes.get(index)[0]);
            Integer id = Integer.parseInt(idString);
            OrdOrden ord = ordOrdenDao.findById(id);
            //int reserved = 0;
            lines.add(
                    String.format(LS4, "Fecha: " + ordenes.get(index)[58])
                    + String.format(L1, "")
                    + String.format(LS3, "ORDEN DE SERVICIO")
                    + String.format(LS4, "N° Orden: " + ordenes.get(index)[1]) + "\r"
            );
            lines.add(
                    String.format(LS4, "Fecha Asig. Med: " + ordenes.get(index)[4])
                    + String.format(L1, "")
                    + String.format(LS3, "")
                    + String.format(LS4, "N° Solicitud: " + ordenes.get(index)[36]) + "\r"
            );
//            if(reserved < 11) {
//                lines.add("");
//            }
            lines.add(
                    (reserved < 11 ? "\r\n" : "")
                    + String.format(LS6, "Orden")
                    + String.format(LS6, "Número") + "\r"
            );
            if (orders.length > 1) {
                for (int it = 0; it < reserved_orders + 1; it++) {
                    String[] order = orders[it].split("\\|-\\|");
                    lines.add(
                            String.format(LS6, order[0])
                            + String.format(LS6, order[1]) + "\r"
                    );
                }
            } else {
                lines.add(
                        String.format(LS6, ordenes.get(index)[1])
                        + String.format(LS6, ordenes.get(index)[2]) + "\r"
                );
            }
//            if(reserved < 5) {
//                lines.add("");
//            }
            lines.add(
                    (reserved < 5 ? "\r\n" : "")
                    + String.format(LS3, "DATOS CONSUMIDOR")
                    + String.format(L3, "N° Consumidor: " + ordenes.get(index)[5])
                    + String.format(LS2, "")
                    + String.format(L4, "Fecha generación: " + ordenes.get(index)[3]) + "\r"
            );
//            if(reserved < 7) {
//                lines.add("");
//            }
            lines.add(
                    (reserved < 7 ? "\r\n" : "")
                    + String.format(LS8, "Nombre: " + ordenes.get(index)[6])
                    + String.format(LS4, "Teléfono: " + String.join(" - ", ordenes.get(index)[15].toString(), ordenes.get(index)[16].toString())) + "\r"
            );
            lines.add(
                    String.format(LS8, "Zona: " + (ordenes.get(index)[10].toString().equals("") ? ordenes.get(index)[34] : ordenes.get(index)[10]))
                    + String.format(LS4, "Ruta: " + ordenes.get(index)[9]) + "\r"
            );
            lines.add(
                    String.format(LS8, "Barrio: " + ordenes.get(index)[28])
                    + String.format(LS4, "Remesa: " + ordenes.get(index)[8]) + "\r"
            );
            lines.add(
                    String.format(LS8, "Dirección: " + ordenes.get(index)[11])
                    + String.format(LS4, "Cuenta Antigua: " + ordenes.get(index)[26]) + "\r"
            );
            lines.add(
                    String.format(LS3, "Nro Casa: " + ordenes.get(index)[12])
                    + String.format(L2, "Piso: " + ordenes.get(index)[13])
                    + String.format(L3, "Dpto: " + ordenes.get(index)[14])
                    + String.format(LS4, "Categoría: " + ordenes.get(index)[17]) + "\r"
            );
//            if(reserved < 2) {
//                lines.add("");
//            }
            lines.add(
                    (reserved < 2 ? "\r\n" : "")
                    + String.format(LS12, "Obs.Sol: " + ordenes.get(index)[38]) + "\r"
            );
            lines.add(
                    String.format(LS12, "Obs.Ins: " + ordenes.get(index)[39])
                    + (reserved < 1 ? "\r\n" : "") + "\r"
            );
//            if(reserved < 1) {
//                lines.add("");
//            }
            for (int it = 0; it < reserved_observations; it++) {
                String[] observation = observations[it].split("\\|-\\|");
                lines.add(
                        String.format(LS2, "Mat. Adicional")
                        + String.format(L6, observation[1])
                        + String.format(L2, observation[2] + TOFILL)
                        + String.format(LS2, observation[4]) + "\r"
                );
            }
//            if(reserved < 10) {
//                lines.add("");
//            }
//            if (ordenes.get(index)[46] != null && !ordenes.get(index)[46].equals("") ) {
            if (ord.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.CAMBIO_ACOMETIDA_INTERNA) {

                lines.add(
                        (reserved < 9 ? "\r\n" : "")
                        + String.format(LS4, "DATOS MEDIDOR")
                        + String.format(L4, "Relación CT's: " + ordenes.get(index)[48])
                        + String.format(LS4, "Relación PT's: " + ordenes.get(index)[49]) + "\r"
                );

            } else {
                lines.add(
                        (reserved < 10 ? "\r\n" : "")
                        + String.format(LS4, "DATOS DESCONEXIÓN")
                        + String.format(L4, "Relación CT's: " + ordenes.get(index)[56])
                        + String.format(LS4, "Relación PT's: " + ordenes.get(index)[57]) + "\r"
                );
//            if(reserved < 4) {
//                lines.add("");
//            }
                lines.add(
                        (reserved < 4 ? "\r\n" : "")
                        + String.format(LS2, "Código:" + ordenes.get(index)[47])
                        + String.format(LS2, "  PRECINTOS  ")
                        + this.addDataRowExtended("Ser.| Num.|Es|Ser.| Num.|Es|Ser.| Num.|Es|Ser.| Num.|Es".split("\\|"), 4) + "\r"
                );
                lines.add(
                        String.format(LS2, "Medidor:" + ordenes.get(index)[46])
                        + String.format(LS2, FILLMINUS)
                        + this.addLineRowExtended(4) + "\r"
                );
                lines.add(
                        String.format(LS2, "Índice:" + TOFILLSHORT)
                        + String.format(LS2, "Tapa de Medidor")
                        + this.addDataRowExtended(this.addPrecintoEstadoEnBlanco(ordenes.get(index)[40].toString().split(" ")), 4) + "\r"
                );
                lines.add(
                        String.format(LS2, "")
                        + String.format(LS2, FILLMINUS)
                        + this.addLineRowExtended(4) + "\r"
                );
                lines.add(
                        String.format(LS2, "Est. Precinto: ")
                        + String.format(LS2, "Cubrebornera")
                        + this.addDataRowExtended(this.addPrecintoEstadoEnBlanco(ordenes.get(index)[41].toString().split(" ")), 4) + "\r"
                );
                lines.add(
                        String.format(LS2, "C Correcto")
                        + String.format(LS2, FILLMINUS)
                        + this.addLineRowExtended(4) + "\r"
                );
                lines.add(
                        String.format(LS2, "V Violado")
                        + String.format(LS2, "Caja de Medidor")
                        + this.addDataRowExtended(this.addPrecintoEstadoEnBlanco(ordenes.get(index)[42].toString().split(" ")), 4) + "\r"
                );
                lines.add(
                        String.format(LS2, "N No encontrado")
                        + String.format(LS2, FILLMINUS)
                        + this.addLineRowExtended(4) + "\r"
                );
                lines.add(
                        String.format(LS2, "")
                        + String.format(LS2, "Caja de Distrib.")
                        + this.addDataRowExtended(this.addPrecintoEstadoEnBlanco(ordenes.get(index)[43].toString().split(" ")), 4) + "\r"
                );
                lines.add(
                        String.format(LS2, "")
                        + String.format(LS2, FILLMINUS)
                        + this.addLineRowExtended(4) + "\r"
                );
                lines.add(
                        String.format(LS2, "")
                        + String.format(LS2, "Demandimetro")
                        + this.addDataRowExtended(this.addPrecintoEstadoEnBlanco(ordenes.get(index)[44].toString().split(" ")), 4) + "\r"
                );
                lines.add(
                        String.format(LS2, "")
                        + String.format(LS2, FILLMINUS)
                        + this.addLineRowExtended(4) + "\r"
                );
                lines.add(
                        String.format(LS2, "")
                        + String.format(LS2, "TEST SWTCH")
                        + this.addDataRowExtended(this.addPrecintoEstadoEnBlanco(ordenes.get(index)[45].toString().split(" ")), 4) + "\r"
                );

                Integer sistemaMedicion = ordenes.get(index)[63] != null ? Integer.parseInt(ordenes.get(index)[63].toString()) : null;
                if (sistemaMedicion != null && (sistemaMedicion == 3 || sistemaMedicion == 4)) {
                    lines.add(
                            String.format(LS2, "")
                            + String.format(LS2, FILLMINUS)
                            + this.addLineRowExtended(4) + "\r"
                    );
                    lines.add(
                            String.format(LS2, "")
                            + String.format(LS2, "CAJA CT'S")
                            + this.addDataRowExtended(this.addPrecintoEstadoEnBlanco(ordenes.get(index)[61].toString().split(" ")), 4) + "\r"
                    );
                    lines.add(
                            String.format(LS2, "")
                            + String.format(LS2, FILLMINUS)
                            + this.addLineRowExtended(4) + "\r"
                    );
                    lines.add(
                            String.format(LS2, "")
                            + String.format(LS2, "CELDA MEDICIÓN")
                            + this.addDataRowExtended(this.addPrecintoEstadoEnBlanco(ordenes.get(index)[62].toString().split(" ")), 4) + "\r"
                    );
                }
                lines.add(
                        (reserved < 9 ? "\r\n" : "")
                        + String.format(LS4, "DATOS CONEXIÓN")
                        + String.format(L4, "Relación CT's: " + ordenes.get(index)[48])
                        + String.format(LS4, "Relación PT's: " + ordenes.get(index)[49]) + "\r"
                );

//            if(reserved < 9) {
//                lines.add("");
//            }
//////            }
            }

//            if(reserved < 3) {
//                lines.add("");
//            }
            lines.add(
                    (reserved < 3 ? "\r\n" : "")
                    + String.format(LS3, "Código: " + ordenes.get(index)[19])
                    + String.format(L2, "  PRECINTOS  ")
                    + this.addDataRow("Ser.| Num.|Ser.| Num.|Ser.| Num.|Ser.| Num.".split("\\|"), 4) + "\r"
            );
            lines.add(
                    String.format(LS3, "Medidor: " + ordenes.get(index)[18])
                    + String.format(L2, FILLMINUS)
                    + this.addLineRow(4) + "\r"
            );
            lines.add(
                    String.format(LS3, "Const.:" + ordenes.get(index)[21])
                    + String.format(L2, "Tapa de Medidor")
                    + this.addDataRow(ordenes.get(index)[40].toString().split(" "), 4) + "\r"
            );
            lines.add(
                    String.format(LS3, "Multi.: " + ordenes.get(index)[22])
                    + String.format(L2, FILLMINUS)
                    + this.addLineRow(4) + "\r"
            );
            lines.add(
                    String.format(LS3, "Pto. Medición: " + ordenes.get(index)[29])
                    + String.format(L2, "Cubrebornera")
                    + this.addDataRow(ordenes.get(index)[41].toString().split(" "), 4) + "\r"
            );
            lines.add(
                    String.format(LS3, "Índice: " + ordenes.get(index)[20])
                    + String.format(L2, FILLMINUS)
                    + this.addLineRow(4) + "\r"
            );
            lines.add(
                    String.format(LS3, "")
                    + String.format(L2, "Caja de Medidor")
                    + this.addDataRow(ordenes.get(index)[42].toString().split(" "), 4) + "\r"
            );
            lines.add(
                    String.format(LS3, "")
                    + String.format(L2, FILLMINUS)
                    + this.addLineRow(4) + "\r"
            );
            lines.add(
                    String.format(LS3, "")
                    + String.format(L2, "Caja de Distrib.")
                    + this.addDataRow(ordenes.get(index)[43].toString().split(" "), 4) + "\r"
            );
            lines.add(
                    String.format(LS3, "")
                    + String.format(L2, FILLMINUS)
                    + this.addLineRow(4) + "\r"
            );
            lines.add(
                    String.format(LS3, "")
                    + String.format(L2, "Demandimetro")
                    + this.addDataRow(ordenes.get(index)[44].toString().split(" "), 4) + "\r"
            );
            lines.add(
                    String.format(LS3, "")
                    + String.format(L2, FILLMINUS)
                    + this.addLineRow(4) + "\r"
            );
            lines.add(
                    String.format(LS3, "")
                    + String.format(L2, "TEST SWTCH")
                    + this.addDataRow(ordenes.get(index)[45].toString().split(" "), 4) + "\r"
            );

            Integer sistemaMedicion = ordenes.get(index)[63] != null ? Integer.parseInt(ordenes.get(index)[63].toString()) : null;
            if (sistemaMedicion != null && (sistemaMedicion == 3 || sistemaMedicion == 4)) {
                lines.add(
                        String.format(LS3, "")
                        + String.format(L2, FILLMINUS)
                        + this.addLineRow(4) + "\r"
                );
                lines.add(
                        String.format(LS3, "")
                        + String.format(L2, "CAJA CT'S")
                        + this.addDataRow(ordenes.get(index)[61].toString().split(" "), 4) + "\r"
                );
                lines.add(
                        String.format(LS3, "")
                        + String.format(L2, FILLMINUS)
                        + this.addLineRow(4) + "\r"
                );
                lines.add(
                        String.format(LS3, "")
                        + String.format(L2, "CELDA MEDICIÓN")
                        + this.addDataRow(ordenes.get(index)[62].toString().split(" "), 4) + "\r"
                );
            }

//            if(reserved < 8) {
//                lines.add("");
//            }
            lines.add(
                    (reserved < 8 ? "\r\n" : "")
                    + String.format(LS4, "RES. TRABAJO DE CAMPO")
                    + String.format(L2, "Motivo" + TOCHECK)
                    + String.format(L2, "Conclusión" + TOCHECK)
                    + String.format(LS4, "Dat. Con. Fases Inspección") + "\r"
            );
            lines.add(
                    String.format(LS4, "Trab. Ejecutado" + TOFILLSHORT)
                    + String.format(L2, "#H.R." + TOCHECK)
                    + String.format(L2, "#Inf.Ensayo" + TOCHECK)
                    + String.format(L1, "")
                    + String.format(LS3, " 1 2 3 N") + "\r"
            );
            lines.add(
                    String.format(LS4, "Trab. No Realizado" + TOFILLSHORT)
                    + String.format(L4, "Código Operario: " + TOFILLSHORT)
                    + String.format(L1, "")
                    + String.format(LS3, "|"
                            + (ordenes.get(index)[30].toString().equals("true") ? "X" : "_") + "|"
                            + (ordenes.get(index)[31].toString().equals("true") ? "X" : "_") + "|"
                            + (ordenes.get(index)[32].toString().equals("true") ? "X" : "_") + "|"
                            + (ordenes.get(index)[33].toString().equals("true") ? "X" : "_") + "|") + "\r"
            );
            lines.add(
                    String.format(LS4, "Imp. de Acceso" + TOFILLSHORT)
                    + String.format(L4, "Fecha Conexión: " + TOFILLSHORT)
                    + String.format(LS4, "Dat. Con. Fases Ejecución") + "\r"
            );
            lines.add(
                    String.format(LS4, "Obs. Trab. Contratista" + TOFILLSHORT)
                    + String.format(L4, "Hora Conexión:" + TOFILLSHORT)
                    + String.format(L1, "")
                    + String.format(LS3, " 1 2 3 N") + "\r"
            );
            lines.add(
                    String.format(LS4, "Observación:" + TOFILL)
                    + String.format(L4, "")
                    + String.format(L1, "")
                    + String.format(LS3, "|_|_|_|_|") + "\r"
            );
//            if(reserved < 6) {
//                lines.add("");
//            }
            lines.add(
                    (reserved < 6 ? "\r\n" : "")
                    + String.format(LS4, "")
                    + String.format(L4, TOFILL + TOFILL)
                    + String.format(LS4, "") + "\r"
            );
            lines.add(
                    String.format(LS4, "")
                    + String.format(L4, "    Firma del Consumidor")
                    + String.format(LS4, "") + "\r"
            );
        }
        return lines;
    }

    /**
     * Función que arma el reporte de orden de cambio de dirección en formato de
     * texto plano
     *
     * @param idOrden el id de la orden a imprimir
     * @param cambio hasmap con datos enteriores y actuales de la dirección
     * @return List<String> Lista de cadenas de las líneas del reporte
     * @see TextPrinter
     * @see OrdOrdenDao
     */
    private List<String> ordenCambioDirecionReporte(int idOrden, HashMap cambio) {
        Object[] orden = ordOrdenDao.getOrdenCorreccion(idOrden);
        TextPrinter textPrinter = new TextPrinter();
        String[] art = {
            "- Los datos proporcionados de acuerdo al paragrafo II del Articulo 8 del D.S 26302,",
            "tienen caracter de declaracion jurada."
        };
        String[] callcenter = {
            "Para consultas, favor apersonarse a las oficinas de Atencion Consumidor o llamar a ",
            "nuestra línea única FONOLUZ al teléfono 800173333"
        };
        textPrinter.add(
                textPrinter.format("ORDEN DE SERVICIO NÚMERO " + orden[1], 3, 9, true),
                textPrinter.format("Fecha: " + orden[21], 3, true)
        );
        textPrinter.add(
                textPrinter.format(orden[17], 3, 9, true),
                textPrinter.format("Hora: " + orden[23], 3, true)
        );
        textPrinter.add(
                textPrinter.format("", 3, 9, true),
                textPrinter.format(orden[20], 3, true)
        );
        textPrinter.addAuto(
                "Razón Social: " + orden[19]
        );
        textPrinter.addAuto(
                "A. Paterno: " + orden[5],
                "A. Materno: " + orden[6]
        );
        textPrinter.addAuto(
                "Nombres: " + orden[4]
        );
        textPrinter.addAuto(
                "C.I.: " + orden[2],
                "Expedido: " + orden[3],
                "Número NIT: " + orden[7]
        );
        textPrinter.addAuto(
                "N° consumidor: " + orden[18]
        );
        textPrinter.addEmpty();
        textPrinter.addAuto(
                "Dirección Anterior: " + cambio.get("direccionAnterior")
        );
        textPrinter.addAuto(
                "N° Casa: " + cambio.get("numeroCasaAnterior"),
                "Piso/Departamento: " + cambio.get("pisoDepartamenteAnt"),
                "N° Departamento: " + cambio.get("numeroDepartamenteAnt")
        );
        textPrinter.addEmpty();
        textPrinter.addAuto(
                "Dirección Actual: " + cambio.get("direccionActual")
        );
        textPrinter.addAuto(
                "N° Casa: " + cambio.get("numeroCasaActual"),
                "Piso/Departamento: " + cambio.get("pisoDepartamenteActual"),
                "N° Departamento: " + cambio.get("numeroDepartamenteActual")
        );
        textPrinter.addEmpty();
        textPrinter.addAuto(
                "Teléfono: " + orden[12],
                "Condición"
        );
        textPrinter.addAuto(
                "Zona: " + orden[13],
                "Barrio: " + orden[14]
        );
        textPrinter.addAuto(
                "Actividad Económica: " + orden[16]
        );
        textPrinter.addEmpty();
        textPrinter.addAuto(
                "Observación: " + orden[8]
        );
        textPrinter.addEmpty();
        textPrinter.addAuto(
                art[0]
        );
        textPrinter.addAuto(
                art[1]
        );
        textPrinter.addAuto(
                callcenter[0]
        );
        textPrinter.addAuto(
                callcenter[1]
        );
        textPrinter.addEmpty();
        textPrinter.addEmpty();
        textPrinter.addAuto(
                3,
                textPrinter.addToFill(),
                textPrinter.addToFill(),
                textPrinter.addToFill()
        );
        textPrinter.addAuto(
                3,
                "Firma Titular",
                "Firma Solicitante",
                "\"Firma Gestor\": " + orden[22]
        );

        return textPrinter.getText();
    }

    /**
     * Función que arma el reporte de corrección de nro de documento y nit en
     * formato txt
     *
     * @param idOrden el id de la orden a imprimir
     * @param hm hasmap con datos enteriores y actuales de la dirección
     * @return List<String> Lista de cadenas de las líneas del reporte
     * @see TextPrinter
     * @see OrdOrdenDao
     */
    private List<String> ordenCorreccionNroDocumentoNitReporte(int idOrden, HashMap hm) {
        Object[] orden = ordOrdenDao.getOrdenCorreccion(idOrden);
        TextPrinter textPrinter = new TextPrinter();
        String[] art = {
            "- Los datos proporcionados de acuerdo al paragrafo II del Articulo 8 del D.S 26302,",
            "tienen caracter de declaracion jurada."
        };
        String[] callcenter = {
            "Para consultas, favor apersonarse a las oficinas de Atencion Consumidor o llamar a ",
            "nuestra línea única FONOLUZ al teléfono 800173333"
        };

        /* INICIO REPORTE */
        textPrinter.add(
                textPrinter.format("ORDEN DE SERVICIO NÚMERO " + orden[1], 3, 9, true),
                textPrinter.format("Fecha: " + orden[21], 3, true)
        );
        textPrinter.add(
                textPrinter.format(orden[17], 3, 9, true),
                textPrinter.format("Hora: " + orden[23], 3, true)
        );
        textPrinter.add(
                textPrinter.format("", 3, 9, true),
                textPrinter.format(orden[20], 3, true)
        );
        textPrinter.addAuto(
                "N° consumidor: " + orden[18]
        );
        textPrinter.addAuto(
                "Razón Social: " + orden[19]
        );
        textPrinter.addAuto(
                "A. Paterno: " + orden[5],
                "A. Materno: " + orden[6]
        );
        textPrinter.addAuto(
                "Nombres: " + orden[4]
        );
        textPrinter.addAuto(
                "Correo electrónico: " + orden[24]
        );
        textPrinter.addAuto(
                "Dirección: " + orden[9]
        );
        textPrinter.addAuto(
                "N° Casa: " + orden[10],
                "Piso/Departamento: " + orden[11],
                "N° Departamento: " + orden[12]
        );
        textPrinter.addEmpty();

        textPrinter.addAuto(
                "DATOS ANTERIORES",
                "DATOS ACTUALES"
        );
        String anteriorTipoDocumento = (String) hm.get("anteriorTipoDocumento");
        anteriorTipoDocumento = ((anteriorTipoDocumento == null) ? "" : anteriorTipoDocumento);
        String actualTipoDocumento = (String) hm.get("actualTipoDocumento");
        actualTipoDocumento = ((actualTipoDocumento == null) ? "" : actualTipoDocumento);
        textPrinter.addAuto(
                "Tipo Doc.: " + anteriorTipoDocumento,
                "Tipo Doc.: " + actualTipoDocumento
        );
        String anteriorNroDocumento = (String) hm.get("anteriorNroDocumento");
        anteriorNroDocumento = ((anteriorNroDocumento == null) ? "" : anteriorNroDocumento);
        String actualNroDocumento = (String) hm.get("actualNroDocumento");
        actualNroDocumento = ((actualNroDocumento == null) ? "" : actualNroDocumento);
        textPrinter.addAuto(
                "Num. Doc.: " + anteriorNroDocumento,
                "Num. Doc.: " + actualNroDocumento
        );
        String anteriorComplemento = (String) hm.get("anteriorComplemento");
        anteriorComplemento = ((anteriorComplemento == null) ? "" : anteriorComplemento);
        String actualComplemento = (String) hm.get("actualComplemento");
        actualComplemento = ((actualComplemento == null) ? "" : actualComplemento);
        textPrinter.addAuto(
                "Complemento Doc.: " + anteriorComplemento,
                "Complemento Doc.: " + actualComplemento
        );
        String anteriorExpedido = (String) hm.get("anteriorExpedido");
        anteriorExpedido = ((anteriorExpedido == null) ? "" : anteriorExpedido);
        String actualExpedido = (String) hm.get("actualExpedido");
        actualExpedido = ((actualExpedido == null) ? "" : actualExpedido);
        textPrinter.addAuto(
                "Expedido: " + anteriorExpedido,
                "Expedido: " + actualExpedido
        );
        String anteriorTipoDocumentoFactura = (String) hm.get("anteriorTipoDocumentoFactura");
        anteriorTipoDocumentoFactura = ((anteriorTipoDocumentoFactura == null) ? "" : anteriorTipoDocumentoFactura);
        String actualTipoDocumentoFactura = (String) hm.get("actualTipoDocumentoFactura");
        actualTipoDocumentoFactura = ((actualTipoDocumentoFactura == null) ? "" : actualTipoDocumentoFactura);
        textPrinter.addAuto(
                "Tipo Doc. Fac.: " + anteriorTipoDocumentoFactura,
                "Tipo Doc. Fac.: " + actualTipoDocumentoFactura
        );
        String anteriorNit = (String) hm.get("anteriorNit");
        anteriorNit = ((anteriorNit == null) ? "" : anteriorNit);
        String actualNit = (String) hm.get("actualNit");
        actualNit = ((actualNit == null) ? "" : actualNit);
        textPrinter.addAuto(
                "Nit: " + anteriorNit,
                "Nit: " + actualNit
        );

        textPrinter.addEmpty();

        textPrinter.addAuto(
                "Teléfono: " + orden[12],
                "Condición"
        );
        textPrinter.addAuto(
                "Zona: " + orden[13],
                "Barrio: " + orden[14]
        );
        textPrinter.addAuto(
                "Actividad Económica: " + orden[16]
        );
        textPrinter.addEmpty();
        textPrinter.addAuto(
                "Observación: " + orden[8]
        );
        textPrinter.addEmpty();
        textPrinter.addAuto(
                art[0]
        );
        textPrinter.addAuto(
                art[1]
        );
        textPrinter.addAuto(
                callcenter[0]
        );
        textPrinter.addAuto(
                callcenter[1]
        );
        textPrinter.addEmpty();
        textPrinter.addEmpty();
        textPrinter.addAuto(
                3,
                textPrinter.addToFill(),
                textPrinter.addToFill(),
                textPrinter.addToFill()
        );
        textPrinter.addAuto(
                3,
                "Firma Titular",
                "Firma Solicitante",
                "\"Firma Gestor\": " + orden[22]
        );
        return textPrinter.getText();
    }

    /**
     * Función que arma el reporte de corrección de correo electronico en
     * formato txt
     *
     * @param idOrden el id de la orden a imprimir
     * @param hm hasmap con datos enteriores y actuales de la dirección
     * @return List<String> Lista de cadenas de las líneas del reporte
     * @see TextPrinter
     * @see OrdOrdenDao
     */
    private List<String> ordenCorreccionCorreoElectronicoReporte(int idOrden, HashMap hm) {
        Object[] orden = ordOrdenDao.getOrdenCorreccion(idOrden);
        TextPrinter textPrinter = new TextPrinter();
        String[] art = {
            "* Los datos proporcionados son considerados como declaración jurada, en el marco del",
            "  artículo 8 del párrafo II del D.S. 26302.",
            "* Acepto que mi factura electrónica sea enviada al correo electrónico registrado.",
            "  En caso de modificación debe comunicar a la Distribuidora con una anticipación de 20 días",
            "  hábiles administrativos."
        };
        String[] callcenter = {
            "* Para consultas, favor apersonarse a las oficinas de Atencion Consumidor o llamar a ",
            "  nuestra línea única FONOLUZ al teléfono 800173333."
        };

        // Separamos los datos de "observación" y "solicitado por"
        String arr[] = orden[8].toString().split(" SOLICITADO POR:: ");
        String observacion = arr[0];
        String solicitadoPor = arr[1];

        /* INICIO REPORTE */
        textPrinter.add(
                textPrinter.format("ORDEN DE SERVICIO NÚMERO " + orden[1], 3, 9, true),
                textPrinter.format("Fecha: " + orden[21], 3, true)
        );
        textPrinter.add(
                textPrinter.format("MODIFICACIÓN DEL CORREO ELECTRÓNICO", 3, 9, true),
                textPrinter.format("Hora: " + orden[23], 3, true)
        );
        textPrinter.add(
                textPrinter.format("", 3, 9, true),
                textPrinter.format(orden[20], 3, true)
        );
        textPrinter.addAuto(
                "______________________________________________________________________________________"
        );
        textPrinter.addAuto(
                "Razón Social: " + orden[19]
        );
        textPrinter.addAuto(
                "Paterno: " + orden[5],
                "Materno: " + orden[6]
        );
        textPrinter.addAuto(
                "Nombres: " + orden[4]
        );
        textPrinter.addAuto(
                "C.I.: " + orden[2],
                "Expedido en: " + orden[3],
                "Número de NIT: " + orden[7]
        );

        textPrinter.addAuto(
                "Solicitado por: " + solicitadoPor + "   Teléfono: " + orden[12] + "   Celular: " + orden[25]
        );
        String condicionConsumidor = "";
        if (orden[26] == null) {
            condicionConsumidor = "NO TIENE";
        } else {
            condicionConsumidor = String.valueOf(orden[26]);
        }
        textPrinter.addAuto(
                "N° consumidor: " + orden[18] + "   Condición Consumidor: " + condicionConsumidor
        );
        textPrinter.addAuto(
                "Categoría tarifaria: " + orden[27]
        );

        textPrinter.addAuto(
                "______________________________________________________________________________________"
        );

        textPrinter.addAuto(
                "Dirección: " + orden[9]
        );
        textPrinter.addAuto(
                "Nro. :" + orden[10],
                "Piso/Departamento: " + orden[11],
                "Condición : " + orden[15]
        );
        textPrinter.addAuto(
                "Zona: " + orden[13],
                "Barrio: " + orden[14]
        );

        textPrinter.addEmpty();
        String anteriorEmail = (String) hm.get("anteriorEmail");
        anteriorEmail = ((anteriorEmail == null) ? "" : anteriorEmail);
        textPrinter.addAuto(
                "E-mail Anterior : " + anteriorEmail
        );
        textPrinter.addAuto(
                "E-mail Actual : " + hm.get("actualEmail")
        );
        textPrinter.addEmpty();
        textPrinter.addAuto(
                "Observación: " + observacion
        );
        textPrinter.addAuto(
                "______________________________________________________________________________________"
        );
        textPrinter.addEmpty();

        textPrinter.addAuto(
                art[0]
        );
        textPrinter.addAuto(
                art[1]
        );
        textPrinter.addAuto(
                art[2]
        );
        textPrinter.addAuto(
                art[3]
        );
        textPrinter.addAuto(
                art[4]
        );
        textPrinter.addAuto(
                callcenter[0]
        );
        textPrinter.addAuto(
                callcenter[1]
        );
        textPrinter.addEmpty();
        textPrinter.addEmpty();
        textPrinter.addAuto(
                3,
                textPrinter.addToFill(),
                textPrinter.addToFill(),
                textPrinter.addToFill()
        );
        textPrinter.addAuto(
                3,
                "Firma Titular",
                "Firma Solicitante",
                "Firma Adm. Com."
        );
        return textPrinter.getText();
    }

    /**
     * Función que arma el reporte de corrección de correo electronico en
     * formato txt
     *
     * @param idOrden el id de la orden a imprimir
     * @param hm hasmap con datos enteriores y actuales de la dirección
     * @return List<String> Lista de cadenas de las líneas del reporte
     * @see TextPrinter
     * @see OrdOrdenDao
     */
    private List<String> ordenCorreccionNroTelefonoReporte(int idOrden, HashMap hm) {
        Object[] orden = ordOrdenDao.getOrdenCorreccion(idOrden);
        TextPrinter textPrinter = new TextPrinter();
        String[] art = {
            "* Los datos proporcionados son considerados como declaración jurada, en el marco del",
            "  artículo 8 del párrafo II del D.S. 26302."
//            "* Acepto que mi factura electrónica sea enviada al número de celular registrado.",
//            "  En caso de modificación debe comunicar a la Distribuidora con una anticipación de 20 días",
//            "  hábiles administrativos."
        };
        String[] callcenter = {
            "* Para consultas, favor apersonarse a las oficinas de Atencion Consumidor o llamar a ",
            "  nuestra línea única FONOLUZ al teléfono 800173333."
        };

        // Separamos los datos de "observación" y "solicitado por"
        String arr[] = orden[8].toString().split(" SOLICITADO POR:: ");
        String observacion = arr[0];
        String solicitadoPor = arr[1];

        /* INICIO REPORTE */
        textPrinter.add(
                textPrinter.format("ORDEN DE SERVICIO NÚMERO " + orden[1], 3, 9, true),
                textPrinter.format("Fecha: " + orden[21], 3, true)
        );
        textPrinter.add(
                textPrinter.format("MODIFICACIÓN DEL NÚMERO TELEFÓNICO", 3, 9, true),
                textPrinter.format("Hora: " + orden[23], 3, true)
        );
        textPrinter.add(
                textPrinter.format("", 3, 9, true),
                textPrinter.format(orden[20], 3, true)
        );
        textPrinter.addAuto(
                "______________________________________________________________________________________"
        );
        textPrinter.addAuto(
                "Razón Social: " + orden[19]
        );
        textPrinter.addAuto(
                "Paterno: " + orden[5],
                "Materno: " + orden[6]
        );
        textPrinter.addAuto(
                "Nombres: " + orden[4]
        );
        textPrinter.addAuto(
                "C.I.: " + orden[2],
                "Expedido en: " + orden[3],
                "Número de NIT: " + orden[7]
        );
        textPrinter.addAuto(
                "Solicitado por: " + solicitadoPor + "   Correo electrónico: " + orden[24]
        );
        String condicionConsumidor = "";
        if (orden[26] == null) {
            condicionConsumidor = "NO TIENE";
        } else {
            condicionConsumidor = String.valueOf(orden[26]);
        }
        textPrinter.addAuto(
                "N° consumidor: " + orden[18] + "   Condición Consumidor: " + condicionConsumidor
        );
        textPrinter.addAuto(
                "Categoría tarifaria: " + orden[27]
        );
        textPrinter.addAuto(
                "______________________________________________________________________________________"
        );

        textPrinter.addAuto(
                "Dirección: " + orden[9]
        );
        textPrinter.addAuto(
                "Nro. :" + orden[10],
                "Piso/Departamento: " + orden[11],
                "Condición : " + orden[15]
        );
        textPrinter.addAuto(
                "Zona: " + orden[13],
                "Barrio: " + orden[14]
        );

        textPrinter.addEmpty();
        String celularAnterior = (String) hm.get("celularAnterior");
        celularAnterior = ((celularAnterior == null) ? "" : celularAnterior);
        textPrinter.addAuto(
                "Celular Anterior: " + celularAnterior
        );
        textPrinter.addAuto(
                "Celular Actual: " + hm.get("celularActual")
        );
        textPrinter.addEmpty();
        String telefonoAnterior = (String) hm.get("telefonoAnterior");
        telefonoAnterior = ((telefonoAnterior == null) ? "" : telefonoAnterior);
        textPrinter.addAuto(
                "Teléfono Anterior: " + telefonoAnterior
        );
        textPrinter.addAuto(
                "Teléfono Actual: " + hm.get("telefonoActual")
        );

        textPrinter.addEmpty();
        textPrinter.addAuto(
                "Observación: " + observacion
        );
        textPrinter.addAuto(
                "______________________________________________________________________________________"
        );
        textPrinter.addEmpty();

        textPrinter.addAuto(
                art[0]
        );
        textPrinter.addAuto(
                art[1]
        );
        textPrinter.addAuto(
                callcenter[0]
        );
        textPrinter.addAuto(
                callcenter[1]
        );
        textPrinter.addEmpty();
        textPrinter.addEmpty();
        textPrinter.addAuto(
                3,
                textPrinter.addToFill(),
                textPrinter.addToFill(),
                textPrinter.addToFill()
        );
        textPrinter.addAuto(
                3,
                "Firma Titular",
                "Firma Solicitante",
                "Firma Adm. Com."
        );
        return textPrinter.getText();
    }

    public Boolean createOrdenCampoUpdate(SolSolicitud solicitud, UsuarioDto _usuarioDto, int codigoOrden) {
        cr = new CommonResponse();
        Boolean isSaveOrden = false;
        cr.setResult(GlobalConstant.RESULT_ERROR);
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        UsuarioDto usuarioDto = _usuarioDto;
        try {
            SolServicio solServicio = solServicioDao.findByIdSolicitud(solicitud.getId());

            SolDatosTecnicos solDatosTecnicos = solDatosTecnicosDao.findByIdServicio(solServicio.getId());
            //NucServicio nucServicio = nucServicioDao.findByIdConsumidor(solServicio.getIdConsumidor().getId(), CommonConstant.NUCTIPOSERVICIO.ENERGIA);
            NucConsumidor nucConsumidor = nucConsumidorDao.findById(solServicio.getIdConsumidor().getId());

            NucArea nucArea = nucConsumidor.getIdRuta().getIdRemesa().getIdArea();
            NucServicio nucServicio = new NucServicio();
            NucServicioMedidor nucServicioMedidor = new NucServicioMedidor();
            NucLecturaMedidor nucLecturaMedidor = new NucLecturaMedidor();
            NucDatosTecnicos nucDatosTecnicos = new NucDatosTecnicos();
            Boolean asignaCTPT = false;
            if (solServicio.getIdConsumidor() != null) {
                nucServicio = nucServicioDao.findByIdConsumidor(solServicio.getIdConsumidor().getId(), CommonConstant.NUCTIPOSERVICIO.ENERGIA);
                nucDatosTecnicos = nucDatosTecnicosDao.findByIdServicio(nucServicio.getId());

                if (nucDatosTecnicos.getIdSistemaMedicion().getCodigo() == CommonConstant.NUCSISTEMAMEDICION.INDIRECTA_CON_MEDIDOR_CT_PT || nucDatosTecnicos.getIdSistemaMedicion().getCodigo() == CommonConstant.NUCSISTEMAMEDICION.SEMIDIRECTA_CON_MEDIDOR_CT) {
                    asignaCTPT = true;
                }
                nucServicioMedidor = nucServicioMedidorDao.findByMedidorConectado(nucServicio.getId());

                if (nucServicioMedidor != null) {
                    nucLecturaMedidor = nucLecturaMedidorDao.findByServicioMedidor(nucServicioMedidor.getId());
                }
            }
            if (solicitud != null && solServicio != null) {
                List<SolSolicitudOrden> solSolicitudOrdenList = solSolicitudOrdenDao.findByIdSolicitud(solicitud.getId());
                for (SolSolicitudOrden solicitudOrden : solSolicitudOrdenList) {
                    OrdTipoOrden ordTipoOrden = ordTipoOrdenDao.findById(solicitudOrden.getIdTipoOrden().getId());
                    OrdOrden orden = new OrdOrden();
                    isSaveOrden = false;
                    if (solDatosTecnicos != null && solDatosTecnicos.getPropiedaMedidorEmpresa() != null) {

                        if (!solDatosTecnicos.getPropiedaMedidorEmpresa()) {
                            MedAsignaSolicitud medAsignaSolicitud = medAsignaSolicitudDao.findByIdSolicitud(solicitud.getId());
                            if (medAsignaSolicitud != null) {
                                MedMedidor medMedidor = medMedidorDao.findById(medAsignaSolicitud.getIdMedidor().getId());

                                orden.setIdMedidorConexion(medAsignaSolicitud.getIdMedidor());
                                orden.setIndConexion(medMedidor.getIndiceEnergia());
                                orden.setMultiplicadorCalculado(medMedidor.getMultiplicadorCalculado());
                            }
                        }
                        orden.setFase1(solDatosTecnicos.getFase1());
                        orden.setFase2(solDatosTecnicos.getFase2());
                        orden.setFase3(solDatosTecnicos.getFase3());
                        orden.setFase4(solDatosTecnicos.getFase4());
                    }
                    //orden.setCodigo(Utils.getNextNumber(em, OrdOrden.class, "codigo"));
                    orden.setCodigo(codigoOrden);
                    orden.setIdTipoOrden(solicitudOrden.getIdTipoOrden());
                    orden.setIdConsumidor(solServicio.getIdConsumidor());
                    orden.setIdEstado(ordEstadoDao.findByCodigoEstado(CommonConstant.ORDESTADO.PENDIENTE));
                    orden.setIdSectorOrigen(solicitud.getIdSector());

                    int ordEstado = 0;
                    if (solicitud.getIdTipoSolicitud().getCodigo() == et.com.ejb.atc.data.CommonConstant.SOLTIPOSOLICITUD.NUEVO_SUMINISTRO || new BigDecimal(new BigDecimal(ordTipoOrden.getCodigo()).intValue()).intValue() == CommonConstant.ORDTIPOORDEN.CAMBIO_MEDIDOR || (nucDatosTecnicos.getIdSistemaMedicion().getCodigo() != CommonConstant.NUCSISTEMAMEDICION.DIRECTA_SIN_MEDIDOR && nucServicioMedidor == null)) {
                        ordEstado = CommonConstant.ORDESTADO.ASIGNADA_MEDIDORES;
                    } else {
                        ordEstado = CommonConstant.ORDESTADO.PENDIENTE;
                    }
                    OrdEstado ordEstados = ordEstadoDao.findByCodigoEstado(ordEstado);
                    SolEstado solEstado = solEstadoDao.findByCodigo(et.com.ejb.atc.data.CommonConstant.SOLESTADO.ORDEN_GENERADA);

                    AtcEstadosSector atcEstadosSector = atcEstadosSectorDao.getSectorDestinoAtec(nucArea.getId(), null, solEstado.getId(), ordEstado, null, ordTipoOrden.getAsignaMedidor(), asignaCTPT);
                    if (atcEstadosSector != null) {
                        orden.setIdSectorDestino(atcEstadosSector.getIdSector());
                    }

                    orden.setIdPuesto(solDatosTecnicos.getIdPuesto());
                    orden.setIdPoste(solDatosTecnicos.getIdPoste());
                    orden.setIdRuta(solServicio.getIdRuta());
                    orden.setIdVoltaje(solDatosTecnicos.getIdVoltajeAsignado());
                    orden.setIdNivelCalidad(solServicio.getIdNivelCalidad());
                    orden.setRazonSocial(nucConsumidor.getRazonSocial());
                    orden.setIdCategoria(solServicio.getIdCategoria());
                    orden.setFechaRegistro(solicitud.getFechaRegistro());
                    orden.setFechaActualizacion(solicitud.getFechaActualizacion());
                    orden.setUsuarioRegistro(_usuarioDto.getId_usuario_security());
                    orden.setUsuarioActualizacion(_usuarioDto.getId_usuario_security());
                    NucAgencia nucAgencia = nucAgenciaDao.findById(usuarioDto.getId_agencia());
                    orden.setIdAgencia(nucAgencia);
                    //if (ordTipoOrden.getAsignaMedidor() && ordTipoOrden.getCodigo() != CommonConstant.ORDTIPOORDEN.CONTRATO_NUEVO) {
                    if (ordTipoOrden.getCodigo() != CommonConstant.ORDTIPOORDEN.CONTRATO_NUEVO) {
                        //Recupera medidor anterior para la orden que asignan medidor
                        if (nucServicioMedidor != null) {
                            if (ordTipoOrden.getCodigo() != CommonConstant.ORDTIPOORDEN.CAMBIO_MEDIDOR) {
                                orden.setIdMedidorConexion(nucServicioMedidor.getIdMedidor());
                            }

                            orden.setMultiplicadorCalculado(nucServicioMedidor.getIdMedidor().getMultiplicadorCalculado());
                            if (nucLecturaMedidor != null) {
                                if (ordTipoOrden.getCodigo() != CommonConstant.ORDTIPOORDEN.CAMBIO_MEDIDOR) {
                                    orden.setIndConexion(nucLecturaMedidor.getIndiceUltimo());
                                }
                            }
                        }
                    }

                    if (new BigDecimal(ordTipoOrden.getCodigo()).intValue() == CommonConstant.ORDTIPOORDEN.CAMBIO_MEDIDOR || ordTipoOrden.getRetiraMedidor()) {
                        //Recupera medidor anterior para la orden de cambio de medidor
                        if (nucServicioMedidor != null) {
                            orden.setMultiplicadorCalculado(nucServicioMedidor.getIdMedidor().getMultiplicadorCalculado());
                            orden.setIdMedidorDesconexion(nucServicioMedidor.getIdMedidor());
                            if (nucLecturaMedidor != null) {
                                orden.setIndDesconexion(nucLecturaMedidor.getIndiceUltimo());
                            }
                        }
                    }
                    isSaveOrden = ordOrdenDao.create(orden);
                    solicitudOrden.setOrdId(orden);
                    Boolean isSaveSolicitudOrden = solSolicitudOrdenDao.update(solicitudOrden);
                    if (isSaveOrden == true && isSaveSolicitudOrden == true) {
                        if (solicitud.getIdTipoSolicitud().getCodigo() == et.com.ejb.atc.data.CommonConstant.SOLTIPOSOLICITUD.NUEVO_SUMINISTRO || new BigDecimal(new BigDecimal(ordTipoOrden.getCodigo()).intValue()).intValue() == CommonConstant.ORDTIPOORDEN.CAMBIO_MEDIDOR || (nucDatosTecnicos.getIdSistemaMedicion().getCodigo() != CommonConstant.NUCSISTEMAMEDICION.DIRECTA_SIN_MEDIDOR && nucServicioMedidor == null)) {
                            ordOrdenEstadosBean.updateEstadoOrden(orden, CommonConstant.ORDESTADO.ASIGNADA_MEDIDORES);
                        } else {
                            ordOrdenEstadosBean.updateEstadoOrden(orden, CommonConstant.ORDESTADO.PENDIENTE);
                        }

                        //Verifica si el cliente tiene CT / PT
                        if (new BigDecimal(ordTipoOrden.getCodigo()).intValue() == CommonConstant.ORDTIPOORDEN.CAMBIO_MEDIDOR || ordTipoOrden.getRetiraMedidor()) {
                            //Recupera medidor anterior para la orden de cambio de medidor o retiro de medidor
                            if (nucServicioMedidor != null) {
                                NucServicioCt nucServicioCt = nucServicioCtDao.findConectadoByIdServicio(nucServicio.getId());
                                NucServicioPt nucServicioPt = nucServicioPtDao.findConectadoByIdServicio(nucServicio.getId());
                                //Actualiza la tabla ordasignaequipo
                                OrdAsignaEquipo ordAsignaEquipo = new OrdAsignaEquipo();
                                ordAsignaEquipo.setIdOrden(orden);
                                if (nucServicioCt != null && nucServicioCt.getIdCt().getId() != null) {
                                    MedCt ct = medCtDao.findById(nucServicioCt.getIdCt().getId());
                                    ordAsignaEquipo.setIdMedCt(ct);
                                }
                                if (nucServicioPt != null && nucServicioPt.getIdPt().getId() != null) {
                                    MedPt pt = medPtDao.findById(nucServicioPt.getIdPt().getId());
                                    ordAsignaEquipo.setIdMedPt(pt);
                                }
                                ordAsignaEquipo.setIdMedidor(nucServicioMedidor.getIdMedidor());
                                ordAsignaEquipoDao.create(ordAsignaEquipo);
                            }
                        }
                        cr.setResult(GlobalConstant.RESULT_SUCCESS);
                        cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.SUCCESS);
                    }
                }
                //solicitud.setFechaActualizacion(calendar.getTime());
                solicitud.setUsuarioActualizacion(_usuarioDto.getId_usuario_security());
                solSolicitudEstadosBean.updateEstadoSolicitud(solicitud, et.com.ejb.atc.data.CommonConstant.SOLESTADO.ORDEN_GENERADA, usuarioDto);
            } else {
                cr.setResult(GlobalConstant.RESULT_ERROR);
                cr.setResultMessage(CommonMessage.GLOBAL.ERROR.EMPTY_INPUT);
            }
        } catch (Exception e) {
            cr.setResultMessage(CommonMessage.GLOBAL.ERROR.ERROR);
            e.printStackTrace();
        }
        return isSaveOrden;
    }

    public CommonResponse generateOrdenInternaUpdate(CommonInput input) {
        cr = new CommonResponse();
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        // OrdOrden newOrden = input.getOrdOrden();
        try {
            OrdTipoOrden ordTipoOrden = new OrdTipoOrden();
            NucConsumidor consumidor = new NucConsumidor();
            NucConsumidor nucConsumidor = input.getNucConsumidor();
            OrdOrden ordOrden = input.getOrdOrden();
            CyrCorteReconexion corteReconexion = input.getCyrCorteReconexion();
            List<OrdDetalleDto> ordenDetalleDtoList = input.getOrdDetalleDtoList();
            UsuarioDto usuarioDto = input.getUsuarioDto();
            if (ordOrden.getIdTipoOrden() != null) {
                ordTipoOrden = ordOrden.getIdTipoOrden();
            } else {
                ordTipoOrden = input.getOrdTipoOrden();

                consumidor = nucConsumidorDao.findById(nucConsumidor.getId());
            }
            OrdTipoOrden tipoOrden = ordTipoOrdenDao.findById(ordTipoOrden.getId());
            if (consumidor.getIdRuta() == null) {
                cr.setResult(GlobalConstant.RESULT_INFO);
                throw new Exception(String.format(CommonMessage.ORDORDEN.WARNING.CONSUMIDOR_NO_RUTA));
            }
            if (ordOrden.getCodigo() == null) {
                cr.setResult(GlobalConstant.RESULT_INFO);
                throw new Exception(String.format(CommonMessage.ORDORDEN.WARNING.CODIGO_ORDEN_REQUERIDO));
            }

            OrdOrden ordOrdenUpdate = ordOrdenDao.findByCodigoOrden(ordOrden.getCodigo());
            if (ordOrden.getCodigo() == null) {
                cr.setResult(GlobalConstant.RESULT_INFO);
                throw new Exception(String.format(CommonMessage.ORDORDEN.WARNING.CODIGO_ORDEN_EXISTE));
            }

            CyrCorteReconexion corteReconexionUpdate = cyrCorteReconexionDao.findByNumeroCorte(corteReconexion.getNumero());
            if (ordOrden.getCodigo() == null) {
                cr.setResult(GlobalConstant.RESULT_INFO);
                throw new Exception(String.format(CommonMessage.ORDORDEN.WARNING.CODIGO_ORDEN_EXISTE));
            }
            Boolean isRutaCritica = this.validaRutaCritica(consumidor.getIdRuta().getIdRemesa().getId());
            Boolean isAplicaOrdenInterna = false;
            switch (tipoOrden.getCodigo()) {

                case CommonConstant.ORDTIPOORDEN.CORTE: {
                    cyrCorteReconexionBean.generateCorteSuspensionIndividualUpdate(input);
                    if (!isAplicaOrdenInterna) {
                        cr.setResult(GlobalConstant.RESULT_WARNING);
                        cr.setResultMessage(String.format(CommonMessage.ORDORDEN.WARNING.NO_GENERA_ORDEN, consumidor.getCodigo()));
                    }

                    break;
                }
                case CommonConstant.ORDTIPOORDEN.RECONEXION: {

                    isAplicaOrdenInterna = cyrCorteReconexionBean.generateReconexionRehabilitacionIndividualUpdate(input);
                    if (!isAplicaOrdenInterna) {
                        cr.setResult(GlobalConstant.RESULT_WARNING);
                        cr.setResultMessage(String.format(CommonMessage.ORDORDEN.WARNING.NO_GENERA_ORDEN, consumidor.getCodigo()));
                    }
                    break;
                }
                case CommonConstant.ORDTIPOORDEN.SUSPENSION_FALTA_PAGO: {
                    cyrCorteReconexionBean.generateCorteSuspensionIndividualUpdate(input);
                    if (!isAplicaOrdenInterna) {

                        cr.setResult(GlobalConstant.RESULT_WARNING);
                        cr.setResultMessage(String.format(CommonMessage.ORDORDEN.WARNING.NO_GENERA_ORDEN, consumidor.getCodigo()));

                    }
                    break;
                }
                case CommonConstant.ORDTIPOORDEN.REHABILITACION_FALTA_PAGO: {
                    isAplicaOrdenInterna = cyrCorteReconexionBean.generateReconexionRehabilitacionIndividualUpdate(input);
                    if (!isAplicaOrdenInterna) {

                        cr.setResult(GlobalConstant.RESULT_WARNING);
                        cr.setResultMessage(String.format(CommonMessage.ORDORDEN.WARNING.NO_GENERA_ORDEN, consumidor.getCodigo()));

                    }
                    break;
                }
            }

            if (isAplicaOrdenInterna) {
                cr.setResult(CommonConstant.RESULT_SUCCESS);
                cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.SUCCESS);
            }

        } catch (Exception e) {
            //cr.setResult(CommonConstant.RESULT_ERROR);
            cr.setResultMessage(e.getMessage());
            e.printStackTrace();

        }
        return cr;

    }

    public Boolean verificaCotizaTAS(NucRuta nucRuta) {
        cr = new CommonResponse();
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        Boolean isCotizaTAS = false;
        try {
            NucRuta nucRutas = nucRutaDao.findByRutaServicio2(nucRuta.getId());
            if (nucRutas != null) {
                isCotizaTAS = true;
            }
        } catch (Exception e) {
            cr.setResult(et.com.ejb.atc.data.CommonConstant.RESULT_ERROR);
            cr.setResultMessage(e.getMessage());
            e.printStackTrace();
        }
        return isCotizaTAS;

    }

    public CommonResponse recalculoTiemposOrden(CommonInput input) {
        cr = new CommonResponse();
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        List<OrdOrden> ordOrdenList;
        OrdOrden ordOrden;
        try {
            ordOrdenList = input.getOrdOrdenList();
            for (OrdOrden orden : ordOrdenList) {
                ordOrden = ordOrdenDao.findByCodigoOrden(orden.getCodigo());
                if (ordOrden != null && ordOrden.getId() != null) {
                    Boolean isUpdateEstado = ordOrdenEstadosBean.recalculaEstadosOrden(ordOrden, true);
//                    Boolean isUpdateEstado = this.emparejarCorteReconexiones(ordOrden);
                    if (isUpdateEstado) {
                        cr.setResult(et.com.ejb.atc.data.CommonConstant.RESULT_SUCCESS);
                        cr.setResultMessage(et.com.ejb.atc.data.CommonMessage.GLOBAL.SUCCESS.SUCCESS);
                    } else {
                        cr.setResult(GlobalConstant.RESULT_ERROR);
                        cr.setResultMessage(et.com.ejb.atc.data.CommonMessage.GLOBAL.ERROR.ERROR);
                    }
                } else {
                    cr.setResult(GlobalConstant.RESULT_ERROR);
                    cr.setResultMessage(et.com.ejb.atc.data.CommonMessage.GLOBAL.ERROR.EMPTY_INPUT);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            cr.setResult(GlobalConstant.RESULT_ERROR);
            cr.setResultMessage(et.com.ejb.atc.data.CommonMessage.GLOBAL.ERROR.ERROR);
        }
        return cr;
    }

    public CommonResponse recalculoTiemposOrdenMasivo(CommonInput input) {
        cr = new CommonResponse();
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        try {
            Date fechaDesde = input.getFechaDesde();
            Date fechaHasta = input.getFechaHasta();

            List<OrdOrden> ordOrdenList = ordOrdenDao.findByRangoFechas(fechaDesde, fechaHasta);
            for (OrdOrden ordOrden : ordOrdenList) {

                if (ordOrden != null && ordOrden.getId() != null) {
                    Boolean isUpdateEstado = ordOrdenEstadosBean.recalculaEstadosOrden(ordOrden, true);

                    if (isUpdateEstado) {
                        cr.setResult(CommonConstant.RESULT_SUCCESS);
                        cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.SUCCESS);
                    } else {
                        cr.setResult(GlobalConstant.RESULT_ERROR);
                        cr.setResultMessage(CommonMessage.GLOBAL.ERROR.ERROR);
                    }
                } else {
                    cr.setResult(GlobalConstant.RESULT_ERROR);
                    cr.setResultMessage(CommonMessage.GLOBAL.ERROR.EMPTY_INPUT);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            cr.setResult(GlobalConstant.RESULT_ERROR);
            cr.setResultMessage(et.com.ejb.atc.data.CommonMessage.GLOBAL.ERROR.ERROR);
        }
        return cr;
    }

    /**
     * Cumple orden en ruta critica
     *
     * @param input
     * @return
     */
    public CommonResponse mantenimiento(CommonInput request) {
        cr = new CommonResponse();
        cr.setResult(GlobalConstant.RESULT_ERROR);
        OrdOrden ordOrden = ordOrdenDao.findByCodigoOrden(request.getOrdOrden().getCodigo());
        if (ordOrden.getIdTipoOrden().getEscritorio() == true) {
            cr = cumpleOrdenInternaRutaCritica(request);
        } else {
            cr = cumpleOrdenRutaCritica(request);
        }
        return cr;
    }

    public CommonResponse findSistemaMedidicion(CommonInput input) {
        cr = new CommonResponse();
        try {
            NucConsumidor nucConsumidor = input.getNucConsumidor();
            if (nucConsumidor == null || nucConsumidor.getId() == null) {
                cr.setResult(CommonConstant.RESULT_WARNING);
                cr.setResultMessage(CommonMessage.GLOBAL.ERROR.EMPTY_INPUT);
                return cr;
            }

//            NucServicio nucServicio = nucServicioDao.findByIdConsumidor(nucConsumidor.getId(), CommonConstant.NUCTIPOSERVICIO.ENERGIA);
            List<Object[]> nucSistemaMedicionList = null;
//            if (nucServicio.getIdEstado().getCodigo() == CommonConstant.NUCESTADOS.BAJA) {
            nucSistemaMedicionList = ordOrdenDao.findSistemaMedidicion(nucConsumidor.getId());
            //nucDepositoGarantiaDao.findByIdConsumidorNoDevueltoCambioNombre(nucConsumidor.getId());
            cr.setResult(CommonConstant.RESULT_SUCCESS);
            cr.setObject(nucSistemaMedicionList);
        } catch (Exception ex) {
            cr.setResult(CommonConstant.RESULT_ERROR);
            cr.setResultMessage(ex.getMessage());
        }
        return cr;
    }

    public Boolean applyCorreccionSistemaMedicion(NucConsumidor nucConsumidor, List<OrdDetalleDto> ordenDetalleDtoList, UsuarioDto usuarioDto) {
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        Boolean result = false;

        try {

            if (nucConsumidor != null) {
                NucConsumidor consumidor = nucConsumidorDao.findById(nucConsumidor.getId());
                NucServicio servicio = nucServicioDao.findByIdConsumidor(consumidor.getId(), CommonConstant.NUCTIPOSERVICIO.ENERGIA);
                NucDatosTecnicos datosTecnicos = nucDatosTecnicosDao.findByIdServicio(servicio.getId());
                for (OrdDetalleDto ordDetalleDto : ordenDetalleDtoList) {

                    if (ordDetalleDto.getNombre().equals("sistemaMedicion")) {
                        NucSistemaMedicion sistemaMedicion = nucSistemaMedicionDao.findById(Integer.parseInt(ordDetalleDto.getValorActual()));
                        datosTecnicos.setIdSistemaMedicion(sistemaMedicion);
                        //Actualiza los datos de la solicitud
                        SolServicio solServicio = solServicioDao.findByIdConsumidorIdTiposolicitud(nucConsumidor.getId(), CommonConstant.SOLTIPOSOLICITUD.NUEVO_SUMINISTRO);
                        if (solServicio != null) {
                            SolDatosTecnicos solDatosTecnicos = solDatosTecnicosDao.findByIdServicio(solServicio.getId());
                            solDatosTecnicos.setIdSistemaMedicion(sistemaMedicion);
                            solDatosTecnicosDao.update(solDatosTecnicos);
                        }
                    }

                }
                datosTecnicos.setFechaActualizacion(calendar.getTime());
                datosTecnicos.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                nucDatosTecnicosDao.update(datosTecnicos);

                result = true;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return result;
    }

    public Boolean applyCorreccionSistemaMedicionRC(NucConsumidor nucConsumidor, List<OrdDetalle> ordenDetalleList) {
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        Boolean result = false;

        try {

            if (nucConsumidor != null) {
                NucConsumidor consumidor = nucConsumidorDao.findById(nucConsumidor.getId());
                NucServicio servicio = nucServicioDao.findByIdConsumidor(consumidor.getId(), CommonConstant.NUCTIPOSERVICIO.ENERGIA);
                NucDatosTecnicos datosTecnicos = nucDatosTecnicosDao.findByIdServicio(servicio.getId());
                for (OrdDetalle ordDetalle : ordenDetalleList) {

                    if (ordDetalle.getCampo().equals("sistemaMedicion")) {
                        NucSistemaMedicion sistemaMedicion = nucSistemaMedicionDao.findById(Integer.parseInt(ordDetalle.getValorActual()));
                        datosTecnicos.setIdSistemaMedicion(sistemaMedicion);
                        //Actualiza los datos de la solicitud
                        SolServicio solServicio = solServicioDao.findByIdConsumidorIdTiposolicitud(nucConsumidor.getId(), CommonConstant.SOLTIPOSOLICITUD.NUEVO_SUMINISTRO);
                        if (solServicio != null) {
                            SolDatosTecnicos solDatosTecnicos = solDatosTecnicosDao.findByIdServicio(solServicio.getId());
                            solDatosTecnicos.setIdSistemaMedicion(sistemaMedicion);
                            solDatosTecnicosDao.update(solDatosTecnicos);
                        }
                    }

                }
                datosTecnicos.setFechaActualizacion(calendar.getTime());
                datosTecnicos.setUsuarioActualizacion(CommonConstant.USUARIO.TAREA_PROGRAMADA);
                nucDatosTecnicosDao.update(datosTecnicos);

                result = true;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return result;
    }

    public Boolean validaOrdenPendiente(Integer idConsumidor, Integer idTipoOrden) throws Exception {
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        Boolean isOrdenPendiente = false;

        try {

            List<OrdOrden> ordOrdenList = ordOrdenDao.findByConsumidorTipoOrdenList(idConsumidor, idTipoOrden);
            for (OrdOrden ordOrden : ordOrdenList) {
                if ((ordOrden.getIdEstado().getCodigo() != CommonConstant.ORDESTADO.CUMPLIDA) && (ordOrden.getIdEstado().getCodigo() != CommonConstant.ORDESTADO.NO_REALIZADA) && (ordOrden.getIdEstado().getCodigo() != CommonConstant.ORDESTADO.ANULADA)) {

                    isOrdenPendiente = true;

                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            throw e;
        }
        return isOrdenPendiente;
    }

    public Boolean applyCambioMunicipio(NucConsumidor consumidor, NucProvincia nucProvincia, List<OrdDetalleDto> ordenDetalleDtoList, UsuarioDto usuarioDto) {
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        Boolean isMunicipio = false;
        try {
            NucProvincia provincia = nucProvinciaDao.findById(nucProvincia.getId());
            if (provincia != null) {
                for (OrdDetalleDto ordDetalleDto : ordenDetalleDtoList) {
                    if (ordDetalleDto.getNombre().equals("codigo_municipio")) {
                        NucMunicipio nucMunicipio = nucMunicipioDao.findByCodigoProvincia(new String(ordDetalleDto.getValorActual()), provincia.getId());
                        consumidor.setIdMunicipio(nucMunicipio);
                        consumidor.setFechaActualizacion(calendar.getTime());
                        consumidor.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                        nucConsumidorDao.update(consumidor);
                    }
                    isMunicipio = true;
                }
            } else {
                cr.setResultMessage(CommonMessage.ORDORDEN.WARNING.CONSUMIDOR_NO_AREA);
                cr.setResult(CommonConstant.RESULT_WARNING);
            }
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return isMunicipio;
    }

    public CommonResponse getSolTipoSolicitudAndSolSolcitudOrden(CommonInput input) {
        cr = new CommonResponse();
        try {
            //SolSolicitudInspeccion solSolicitudInspeccion = solSolicitudInspeccionDao.findByIdInspeccion(input.getInsInspeccion().getId());
            SolSolicitud solSolicitud = ordOrdenDao.getSolTipoSolicitud(input.getSolSolicitud().getNumeroSolicitudSistema());
            if (solSolicitud != null && solSolicitud.getId() > 0) {
                List<SolSolicitudOrden> solicituOrdenList = solSolicitudOrdenDao.findByIdSolicitud(solSolicitud.getId());
                cr.setSolSolicitudOrdenList(solicituOrdenList);//aqui uno select2 
                cr.setSolSolicitud(solSolicitud);//aqui uno select2    
                cr.setResult(CommonConstant.RESULT_SUCCESS);
                cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.OBJECT);
            } else {
                cr.setResult(GlobalConstant.RESULT_ERROR);
                cr.setResultMessage(CommonMessage.GLOBAL.ERROR.ERROR);
            }
        } catch (Exception ex) {
            cr.setResult(GlobalConstant.RESULT_ERROR);
            cr.setResultMessage(ex.getMessage());
            LOG.error(input, ex);
        }
        return cr;
    }

    public Boolean createOrdenCampo(SolSolicitud solicitud, UsuarioDto _usuarioDto, List<SolSolicitudOrden> solSolicitudOrdenList) {
        cr = new CommonResponse();
        Boolean isSaveOrden = false;
        cr.setResult(GlobalConstant.RESULT_ERROR);
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        UsuarioDto usuarioDto = _usuarioDto;
        try {
            SolServicio solServicio = solServicioDao.findByIdSolicitud(solicitud.getId());

            SolDatosTecnicos solDatosTecnicos = solDatosTecnicosDao.findByIdServicio(solServicio.getId());
            //NucServicio nucServicio = nucServicioDao.findByIdConsumidor(solServicio.getIdConsumidor().getId(), CommonConstant.NUCTIPOSERVICIO.ENERGIA);
            NucConsumidor nucConsumidor = nucConsumidorDao.findById(solServicio.getIdConsumidor().getId());

            NucArea nucArea = nucConsumidor.getIdRuta().getIdRemesa().getIdArea();
            NucServicio nucServicio = new NucServicio();
            NucServicioMedidor nucServicioMedidor = new NucServicioMedidor();
            NucLecturaMedidor nucLecturaMedidor = new NucLecturaMedidor();
            NucDatosTecnicos nucDatosTecnicos = new NucDatosTecnicos();
            Boolean asignaCTPT = false;
            if (solServicio.getIdConsumidor() != null) {
                nucServicio = nucServicioDao.findByIdConsumidor(solServicio.getIdConsumidor().getId(), CommonConstant.NUCTIPOSERVICIO.ENERGIA);
                nucDatosTecnicos = nucDatosTecnicosDao.findByIdServicio(nucServicio.getId());

                if (nucDatosTecnicos.getIdSistemaMedicion().getCodigo() == CommonConstant.NUCSISTEMAMEDICION.INDIRECTA_CON_MEDIDOR_CT_PT || nucDatosTecnicos.getIdSistemaMedicion().getCodigo() == CommonConstant.NUCSISTEMAMEDICION.SEMIDIRECTA_CON_MEDIDOR_CT) {
                    asignaCTPT = true;
                }
                nucServicioMedidor = nucServicioMedidorDao.findByMedidorConectado(nucServicio.getId());

                if (nucServicioMedidor != null) {
                    nucLecturaMedidor = nucLecturaMedidorDao.findByServicioMedidor(nucServicioMedidor.getId());
                }
            }
            if (solSolicitudOrdenList != null && solSolicitudOrdenList.size() > 0) {
                if (solicitud != null && solServicio != null) {
//                List<SolSolicitudOrden> solSolicitudOrdenList = solSolicitudOrdenDao.findByIdSolicitud(solicitud.getId());
                    for (SolSolicitudOrden solicitudOrden : solSolicitudOrdenList) {
                        OrdTipoOrden ordTipoOrden = ordTipoOrdenDao.findById(solicitudOrden.getIdTipoOrden().getId());
                        OrdOrden orden = new OrdOrden();
                        isSaveOrden = false;
                        if (solDatosTecnicos != null && solDatosTecnicos.getPropiedaMedidorEmpresa() != null) {

                            if (!solDatosTecnicos.getPropiedaMedidorEmpresa()) {
                                MedAsignaSolicitud medAsignaSolicitud = medAsignaSolicitudDao.findByIdSolicitud(solicitud.getId());
                                if (medAsignaSolicitud != null) {
                                    MedMedidor medMedidor = medMedidorDao.findById(medAsignaSolicitud.getIdMedidor().getId());

                                    orden.setIdMedidorConexion(medAsignaSolicitud.getIdMedidor());
                                    orden.setIndConexion(medMedidor.getIndiceEnergia());
                                    orden.setMultiplicadorCalculado(medMedidor.getMultiplicadorCalculado());
                                }
                            }
                            orden.setFase1(solDatosTecnicos.getFase1());
                            orden.setFase2(solDatosTecnicos.getFase2());
                            orden.setFase3(solDatosTecnicos.getFase3());
                            orden.setFase4(solDatosTecnicos.getFase4());

                        }
                        orden.setCodigo(Utils.getNextNumber(em, OrdOrden.class,
                                "codigo"));
                        orden.setIdTipoOrden(solicitudOrden.getIdTipoOrden());
                        orden.setIdConsumidor(solServicio.getIdConsumidor());
                        orden.setIdEstado(ordEstadoDao.findByCodigoEstado(CommonConstant.ORDESTADO.PENDIENTE));
                        orden.setIdSectorOrigen(solicitud.getIdSector());

                        int ordEstado = 0;
                        if (solicitud.getIdTipoSolicitud().getCodigo() == et.com.ejb.atc.data.CommonConstant.SOLTIPOSOLICITUD.NUEVO_SUMINISTRO
                                || new BigDecimal(new BigDecimal(ordTipoOrden.getCodigo()).intValue()).intValue() == CommonConstant.ORDTIPOORDEN.CAMBIO_MEDIDOR
                                || ordTipoOrden.getCodigo() == CommonConstant.ORDTIPOORDEN.INSTALACION_MEDIDOR
                                || (nucDatosTecnicos.getIdSistemaMedicion().getCodigo() != CommonConstant.NUCSISTEMAMEDICION.DIRECTA_SIN_MEDIDOR && nucServicioMedidor == null
                                && ordTipoOrden.getCodigo() == CommonConstant.ORDTIPOORDEN.REHABILITACION)) {
                            ordEstado = CommonConstant.ORDESTADO.ASIGNADA_MEDIDORES;
                        } else {
                            ordEstado = CommonConstant.ORDESTADO.PENDIENTE;
                        }
                        OrdEstado ordEstados = ordEstadoDao.findByCodigoEstado(ordEstado);
                        SolEstado solEstado = solEstadoDao.findByCodigo(et.com.ejb.atc.data.CommonConstant.SOLESTADO.ORDEN_GENERADA);

                        AtcEstadosSector atcEstadosSector = atcEstadosSectorDao.getSectorDestinoAtec(nucArea.getId(), null, solEstado.getId(), ordEstado, null, ordTipoOrden.getAsignaMedidor(), asignaCTPT);
                        if (atcEstadosSector != null) {
                            orden.setIdSectorDestino(atcEstadosSector.getIdSector());
                        }

//                    orden.setIdPuesto(solDatosTecnicos.getIdPuesto());
//                    orden.setIdPoste(solDatosTecnicos.getIdPoste());
                        orden.setIdRuta(solServicio.getIdRuta());
                        orden.setIdVoltaje(solDatosTecnicos.getIdVoltajeAsignado());
                        orden.setIdNivelCalidad(solServicio.getIdNivelCalidad());
                        orden.setRazonSocial(nucConsumidor.getRazonSocial());
                        orden.setIdCategoria(solServicio.getIdCategoria());
                        orden.setFechaRegistro(calendar.getTime());
                        orden.setFechaActualizacion(calendar.getTime());
                        orden.setUsuarioRegistro(_usuarioDto.getId_usuario_security());
                        orden.setUsuarioActualizacion(_usuarioDto.getId_usuario_security());
                        NucAgencia nucAgencia = nucAgenciaDao.findById(usuarioDto.getId_agencia());
                        orden.setIdAgencia(nucAgencia);
                        //if (ordTipoOrden.getAsignaMedidor() && ordTipoOrden.getCodigo() != CommonConstant.ORDTIPOORDEN.CONTRATO_NUEVO) {
                        if (ordTipoOrden.getCodigo() != CommonConstant.ORDTIPOORDEN.CONTRATO_NUEVO) {
                            //Recupera medidor anterior para la orden que asignan medidor
                            if (nucServicioMedidor != null) {
                                if (ordTipoOrden.getCodigo() != CommonConstant.ORDTIPOORDEN.CAMBIO_MEDIDOR) {
                                    orden.setIdMedidorConexion(nucServicioMedidor.getIdMedidor());
                                }

                                orden.setMultiplicadorCalculado(nucServicioMedidor.getIdMedidor().getMultiplicadorCalculado());
                                if (nucLecturaMedidor != null) {
                                    if (ordTipoOrden.getCodigo() != CommonConstant.ORDTIPOORDEN.CAMBIO_MEDIDOR) {
                                        orden.setIndConexion(nucLecturaMedidor.getIndiceUltimo());
                                    }
                                }
                            }
                        }

                        if (new BigDecimal(ordTipoOrden.getCodigo()).intValue() == CommonConstant.ORDTIPOORDEN.CAMBIO_MEDIDOR || ordTipoOrden.getRetiraMedidor()) {
                            //Recupera medidor anterior para la orden de cambio de medidor
                            if (nucServicioMedidor != null) {
                                orden.setMultiplicadorCalculado(nucServicioMedidor.getIdMedidor().getMultiplicadorCalculado());
                                orden.setIdMedidorDesconexion(nucServicioMedidor.getIdMedidor());
                                if (nucLecturaMedidor != null) {
                                    orden.setIndDesconexion(nucLecturaMedidor.getIndiceUltimo());
                                }
                            }
                        }
                        isSaveOrden = ordOrdenDao.create(orden);

                        //Adicionar a las solicitudes de orden existentes
                        SolSolicitudOrden solSolicitudOrdenNew = new SolSolicitudOrden();
                        solSolicitudOrdenNew.setIdSolicitud(solicitud);
                        solSolicitudOrdenNew.setIdTipoOrden(ordTipoOrden);
                        solSolicitudOrdenNew.setOrdId(orden);
                        Boolean isSaveSolicitudOrden = solSolicitudOrdenDao.create(solSolicitudOrdenNew);

                        if (isSaveOrden == true && isSaveSolicitudOrden == true) {
                            if (solicitud.getIdTipoSolicitud().getCodigo() == et.com.ejb.atc.data.CommonConstant.SOLTIPOSOLICITUD.NUEVO_SUMINISTRO
                                    || new BigDecimal(new BigDecimal(ordTipoOrden.getCodigo()).intValue()).intValue() == CommonConstant.ORDTIPOORDEN.CAMBIO_MEDIDOR
                                    || ordTipoOrden.getCodigo() == CommonConstant.ORDTIPOORDEN.INSTALACION_MEDIDOR
                                    || (nucDatosTecnicos.getIdSistemaMedicion().getCodigo()
                                    != CommonConstant.NUCSISTEMAMEDICION.DIRECTA_SIN_MEDIDOR
                                    && nucServicioMedidor == null
                                    && ordTipoOrden.getCodigo() == CommonConstant.ORDTIPOORDEN.REHABILITACION)) {
                                ordOrdenEstadosBean.updateEstadoOrden(orden, CommonConstant.ORDESTADO.ASIGNADA_MEDIDORES);
                            } else {
                                ordOrdenEstadosBean.updateEstadoOrden(orden, CommonConstant.ORDESTADO.PENDIENTE);
                            }

                            //Verifica si el cliente tiene CT / PT
                            if (new BigDecimal(ordTipoOrden.getCodigo()).intValue() == CommonConstant.ORDTIPOORDEN.CAMBIO_MEDIDOR || ordTipoOrden.getRetiraMedidor()) {
                                //Recupera medidor anterior para la orden de cambio de medidor o retiro de medidor
                                if (nucServicioMedidor != null) {
                                    NucServicioCt nucServicioCt = nucServicioCtDao.findConectadoByIdServicio(nucServicio.getId());
                                    NucServicioPt nucServicioPt = nucServicioPtDao.findConectadoByIdServicio(nucServicio.getId());
                                    //Actualiza la tabla ordasignaequipo
                                    OrdAsignaEquipo ordAsignaEquipo = new OrdAsignaEquipo();
                                    ordAsignaEquipo.setIdOrden(orden);
                                    if (nucServicioCt != null && nucServicioCt.getIdCt().getId() != null) {
                                        MedCt ct = medCtDao.findById(nucServicioCt.getIdCt().getId());
                                        ordAsignaEquipo.setIdMedCt(ct);
                                    }
                                    if (nucServicioPt != null && nucServicioPt.getIdPt().getId() != null) {
                                        MedPt pt = medPtDao.findById(nucServicioPt.getIdPt().getId());
                                        ordAsignaEquipo.setIdMedPt(pt);
                                    }
                                    ordAsignaEquipo.setIdMedidor(nucServicioMedidor.getIdMedidor());
                                    ordAsignaEquipoDao.create(ordAsignaEquipo);
                                }
                            }
                            cr.setResult(GlobalConstant.RESULT_SUCCESS);
                            cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.SUCCESS);
                        }
                    }
                }
            } else {
                cr.setResult(GlobalConstant.RESULT_ERROR);
                cr.setResultMessage(CommonMessage.GLOBAL.ERROR.EMPTY_INPUT);
            }
        } catch (Exception e) {
            cr.setResultMessage(CommonMessage.GLOBAL.ERROR.ERROR);
            e.printStackTrace();
        }
        return isSaveOrden;
    }

    public CommonResponse printPreInspeccionGDI(CommonInput input) {
        cr = new CommonResponse();
        cr.setResult(GlobalConstant.RESULT_ERROR);
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        Connection conn = null;
        String nombrejrxml = "";
        String nombrejasper = "";
        HashMap hm = new HashMap();
        try {
            conn = Utils.getConnection();
            OrdOrden ordOrden = ordOrdenDao.findByCodigoOrden(input.getOrdOrden().getCodigo());

            //if (ordOrden.getIdEstado().getCodigo().equals(CommonConstant.ORDESTADO.PENDIENTE)) {
            //cr.setResultMessage(CommonMessage.ORDORDEN.WARNING.ORDEN_NO_IMPRIME);
            //return cr;
            //}
            List<OrdDetalle> ordDetalleList = ordDetalleDao.findByIdOrden(ordOrden.getId());
            for (OrdDetalle detalle : ordDetalleList) {
                hm.put(detalle.getCampo(), detalle.getValorActual());
            }
            nombrejrxml = "ord_orden_gdi-v1.0.jrxml";
            nombrejasper = "ord_orden_gdi-v1.0.jasper";
            hm.put("ordenCodigo", ordOrden.getCodigo().intValue());
            hm.put("consumidorCodigo", ordOrden.getIdConsumidor().getCodigo().intValue());
            hm.put("observacion", ordOrden.getObservacion());
            JasperCompileManager.compileReportToFile(CommonConstant.basePathJrxml + nombrejrxml, CommonConstant.basePathJrxml + nombrejasper);
            JasperPrint jprint = (JasperPrint) JasperFillManager.fillReport(CommonConstant.basePathJrxml + nombrejasper, hm, conn);
            jprint.setOrientation(OrientationEnum.PORTRAIT);
            String pathExportPdf = CommonConstant.BASE_PATH_TMP + "orden" + formatDate.format(calendar.getTime()) + "-" + ordOrden.getCodigo() + ".pdf";
            JasperExportManager.exportReportToPdfFile(jprint, pathExportPdf);

            //OrdEstado ordEstado = ordEstadoDao.findByCodigoEstado(CommonConstant.ORDESTADO.CAMPO);
            //ordOrden.setIdEstado(ordEstado);
            if (ordOrden.getIdEstado().getCodigo().equals(CommonConstant.ORDESTADO.PENDIENTE)) {
                ordOrdenEstadosBean.updateEstadoOrden(ordOrden, CommonConstant.ORDESTADO.CAMPO);
                ordOrden.setFechaImpresion(calendar.getTime());
                if (input.getUsuarioDto() != null) {
                    ordOrden.setUsuarioActualizacion(input.getUsuarioDto().getId_usuario_security());
                }
                //print information and add to response
                ordOrdenDao.update(ordOrden);
            }
            cr.setBase64(Utils.getFileBase64(pathExportPdf));
            cr.setResult(GlobalConstant.RESULT_SUCCESS);
            cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.SUCCESS);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            Utils.closeConnection(conn);
        }
        return cr;
    }

    public CommonResponse applyPreInspeccionGDI(CommonInput input, boolean createMode) {
        cr = new CommonResponse();
        cr.setResult(GlobalConstant.RESULT_ERROR);
        OrdGeneracionDistribuidaDto ordGeneracionDistribuidaDto
                = input.getOrdGeneracionDistribuidaDto();
        List<OrdDetalle> ordDetalleList;
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        OrdOrden ordOrden;
        try {
            List<OrdDetalleDto> ordenDetalleDtoList = input.getOrdDetalleDtoList();
            if (input.getOrdOrden().getCodigo() == null) {
                NucConsumidor nucConsumidor = input.getNucConsumidor();
                OrdTipoOrden ordTipoOrden = input.getOrdTipoOrden();
                UsuarioDto usuarioDto = input.getUsuarioDto();
                ordOrden = new OrdOrden();
                NucConsumidor consumidor = nucConsumidorDao.findById(nucConsumidor.getId());
                OrdTipoOrden tipoOrden = ordTipoOrdenDao.findByCodigo(CommonConstant.ORDTIPOORDEN.PRE_INSPECCION_GDI);
                NucServicio nucServicio = nucServicioDao.findByIdConsumidor(consumidor.getId(), CommonConstant.NUCTIPOSERVICIO.ENERGIA);
                ordOrden
                        .setCodigo(Utils.getNextNumber(em, OrdOrden.class,
                                "codigo"));
                ordOrden.setIdTipoOrden(tipoOrden);
                ordOrden.setIdConsumidor(consumidor);
                ordOrden.setIdEstado(ordEstadoDao.findByCodigoEstado(CommonConstant.ORDESTADO.PENDIENTE));
                NucSector nucSector = nucSectorDao.findById(usuarioDto.getId_sector());
                NucAgencia nucAgencia = nucAgenciaDao.findById(usuarioDto.getId_agencia());
                ordOrden.setIdSectorOrigen(nucSector);
                ordOrden.setIdSectorDestino(nucSector);
                ordOrden.setIdRuta(consumidor.getIdRuta());
                ordOrden.setIdNivelCalidad(nucServicio.getIdNivelCalidad());
                ordOrden.setRazonSocial(nucConsumidor.getRazonSocial());
                ordOrden.setIdCategoria(nucServicio.getIdCategoria());
//                ordOrden.setFechaCumplimiento(calendar.getTime());
                ordOrden.setFechaCumplimiento(input.getOrdOrden().getFechaCumplimiento());
                ordOrden.setFechaRegistro(calendar.getTime());
                ordOrden.setFechaActualizacion(calendar.getTime());
                ordOrden.setUsuarioRegistro(usuarioDto.getId_usuario_security());
                ordOrden.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                if (nucAgencia != null) {
                    ordOrden.setIdAgencia(nucAgencia);
                }
                ordOrdenDao.create(ordOrden);
//                if (ordenDetalleDtoList != null) {
//                    for (OrdDetalleDto ordDetalleDto : ordenDetalleDtoList) {
//                         generateOrdenDetalle(ordOrden, ordDetalleDto.getNombre(), ordDetalleDto.getValorAnterior(), ordDetalleDto.getValorActual());
//                    }
//                }
                ordOrdenEstadosBean.updateEstadoOrden(ordOrden, CommonConstant.ORDESTADO.PENDIENTE);
                OrdOrdenEstado ordOrdenEstado = ordOrdenEstadoDao.getOrdenEstadoAnterior(ordOrden.getId()).get(0);
                List<OrdDocumento> ordDocumentoList
                        = input.getOrdDocumentoList();
                for (OrdDocumento ordDocumento : ordDocumentoList) {
                    byte[] data = Base64.decodeBase64(ordDocumento.getArchivo());
                    try {
                        Files.createDirectories(Paths.get(et.com.ejb.ord.data.CommonConstant.PATH_ORDENES_IMAGENES));
                        String filename = Calendar.getInstance().getTimeInMillis() + ordDocumento.getNombre();
                        OutputStream stream = new FileOutputStream(et.com.ejb.ord.data.CommonConstant.PATH_ORDENES_IMAGENES + filename);
                        stream.write(data);
                        ordDocumento.setArchivo(filename);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    ordDocumento.setReferencia(ordOrdenEstado.getId().toString());
                    ordDocumento.setIdOrden(ordOrden);
                    ordDocumento.setFechaRegistro(calendar.getTime());
                    ordDocumento.setFechaActualizacion(calendar.getTime());
                    if (input.getUsuarioDto() != null) {
                        ordDocumento.setUsuarioRegistro(input.getUsuarioDto().getId_usuario_security());
                        ordDocumento.setUsuarioActualizacion(input.getUsuarioDto().getId_usuario_security());
                    }

                    if (ordDocumento.getId() != null) {
                        ordDocumentoDao.update(ordDocumento);
                    } else {
                        ordDocumentoDao.create(ordDocumento);
                    }
                }
            } else {
                ordOrden = ordOrdenDao.findByCodigoOrden(input.getOrdOrden().getCodigo());
                if (!ordOrden.getIdEstado().getCodigo().equals(CommonConstant.ORDESTADO.CAMPO)) {
                    cr.setResultMessage(CommonMessage.ORDORDEN.WARNING.ESTADO_INADECUADO_CUMPLIMIENTO);
                    return cr;
                }
                ordOrdenEstadosBean.updateEstadoOrden(ordOrden, CommonConstant.ORDESTADO.CUMPLIDA);
                ordOrden.setObservacion(input.getOrdOrden().getObservacion());
                ordOrden.setFechaActualizacion(calendar.getTime());
                ordOrden.setFechaCumplimiento(input.getOrdOrden().getFechaCumplimiento());
                if (input.getUsuarioDto() != null) {
                    ordOrden.setUsuarioRegistro(input.getUsuarioDto().getId_usuario_security());
                }
                ordOrdenDao.update(ordOrden);
                if (ordenDetalleDtoList != null) {
                    ordDetalleDao.deleteByOrder(ordOrden.getId());
                    for (OrdDetalleDto ordDetalleDto : ordenDetalleDtoList) {
                        generateOrdenDetalle(ordOrden, ordDetalleDto.getNombre(), ordDetalleDto.getValorAnterior(), ordDetalleDto.getValorActual());
                    }
                }
                ordDetalleDao.deleteByOrder(ordOrden.getId());
            }
            if (ordenDetalleDtoList != null) {
                for (OrdDetalleDto ordDetalleDto : ordenDetalleDtoList) {
                    generateOrdenDetalle(ordOrden, ordDetalleDto.getNombre(), ordDetalleDto.getValorAnterior(), ordDetalleDto.getValorActual());
                }
            }
            if (ordOrden.getIdEstado().getCodigo().equals(
                    CommonConstant.ORDESTADO.CUMPLIDA)) {
                //add final report to common response
            }
            cr.setResult(GlobalConstant.RESULT_SUCCESS);
            //cr.setResultMessage
        } catch (Exception e) {
            e.printStackTrace();
            return cr;
        }
        return cr;
    }

    public CommonResponse applyPreInspeccionGDIPOT(CommonInput input, boolean createMode) {
        cr = new CommonResponse();
        cr.setResult(GlobalConstant.RESULT_ERROR);
        OrdGeneracionDistribuidaDto ordGeneracionDistribuidaDto
                = input.getOrdGeneracionDistribuidaDto();
        List<OrdDetalle> ordDetalleList;
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        OrdOrden ordOrden;
        String documentoPdf = "";
        try {
            List<OrdDetalleDto> ordenDetalleDtoList = input.getOrdDetalleDtoList();
            if (input.getOrdOrden().getCodigo() == null) {
                NucConsumidor nucConsumidor = input.getNucConsumidor();
                OrdTipoOrden ordTipoOrden = input.getOrdTipoOrden();
                UsuarioDto usuarioDto = input.getUsuarioDto();
                ordOrden = new OrdOrden();
                NucConsumidor consumidor = nucConsumidorDao.findById(nucConsumidor.getId());
                OrdTipoOrden tipoOrden = ordTipoOrdenDao.findByCodigo(CommonConstant.ORDTIPOORDEN.CONSULTA_HISTORICO_POTENCIA_GDI);
                NucServicio nucServicio = nucServicioDao.findByIdConsumidor(consumidor.getId(), CommonConstant.NUCTIPOSERVICIO.ENERGIA);
                ordOrden
                        .setCodigo(Utils.getNextNumber(em, OrdOrden.class,
                                "codigo"));
                ordOrden.setIdTipoOrden(tipoOrden);
                ordOrden.setIdConsumidor(consumidor);
                ordOrden.setIdEstado(ordEstadoDao.findByCodigoEstado(CommonConstant.ORDESTADO.PENDIENTE));
                NucSector nucSector = nucSectorDao.findById(usuarioDto.getId_sector());
                NucAgencia nucAgencia = nucAgenciaDao.findById(usuarioDto.getId_agencia());
                ordOrden.setIdSectorOrigen(nucSector);
                ordOrden.setIdSectorDestino(nucSector);
                ordOrden.setIdRuta(consumidor.getIdRuta());
                ordOrden.setIdNivelCalidad(nucServicio.getIdNivelCalidad());
                ordOrden.setRazonSocial(nucConsumidor.getRazonSocial());
                ordOrden.setIdCategoria(nucServicio.getIdCategoria());
                ordOrden.setFechaCumplimiento(calendar.getTime());
                ordOrden.setFechaRegistro(calendar.getTime());
                ordOrden.setFechaActualizacion(calendar.getTime());
                ordOrden.setUsuarioRegistro(usuarioDto.getId_usuario_security());
                ordOrden.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                ordOrden.setFechaTranscripcion(calendar.getTime());
                ordOrden.setObservacion(input.getOrdOrden().getObservacion());
                if (nucAgencia != null) {
                    ordOrden.setIdAgencia(nucAgencia);
                }
                ordOrdenDao.create(ordOrden);
                if (ordenDetalleDtoList != null) {
                    for (OrdDetalleDto ordDetalleDto : ordenDetalleDtoList) {
                        generateOrdenDetalle(ordOrden, ordDetalleDto.getNombre(), ordDetalleDto.getValorAnterior(), ordDetalleDto.getValorActual());
                    }
                }
                ordOrdenEstadosBean.updateEstadoOrden(ordOrden, CommonConstant.ORDESTADO.CUMPLIDA);
                boolean val = ordOrdenDao.verificatipo(consumidor.getId());
                if (val == false) {
                    documentoPdf = CommonConstant.BASE_PATH_TMP + "potencia_equivalente_promedio.pdf";
                    cr.setNombreArchivo("potencia_equivalente_promedio");
                    this.printConsultaConsumidor(consumidor.getCodigo(), documentoPdf, input);
                } else {
                    documentoPdf = CommonConstant.BASE_PATH_TMP + "potencia_equivalente_promedio_anexo2.pdf";
                    cr.setNombreArchivo("potencia_equivalente_promedio_anexo2");
                    this.printConsultaConsumidoranexo2(consumidor.getCodigo(), documentoPdf, input);
                }

                cr.setBase64(Utils.getFileBase64(documentoPdf));
                cr.setResult(CommonConstant.RESULT_SUCCESS);
                cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.SUCCESS);

            }

            cr.setResult(GlobalConstant.RESULT_SUCCESS);

            //cr.setResultMessage
        } catch (Exception e) {
            e.printStackTrace();
            return cr;
        }
        return cr;
    }

    public boolean printConsultaConsumidor(BigInteger idConsumidor, String pathExportPdf, CommonInput input) {
        HashMap hm = null;
        Connection conn = null;
        try {
            conn = et.com.ejb.csg.utils.Utils.getConnection();
            Calendar calendar = Calendar.getInstance();
            JasperCompileManager.compileReportToFile(CommonConstant.basePathJrxmlOrd + "potencia_equivalente_promedio.jrxml", CommonConstant.basePathJrxmlOrd + "potencia_equivalente_promedio.jasper");
            String usuarioStr = "";

            if (input.getHeaderDto() != null) {
                if (input.getHeaderDto().getUname() != null) {
                    usuarioStr = input.getHeaderDto().getUname();
                } else {
                    usuarioStr = "tomcat";
                }
            }

            hm = new HashMap();
            hm.put("consumidor", idConsumidor.longValue());
            // hm.put("usuario", usuarioStr);

            JasperPrint jprint = (JasperPrint) JasperFillManager.fillReport(CommonConstant.basePathJrxmlOrd + "potencia_equivalente_promedio.jasper", hm, conn);
            JasperExportManager.exportReportToPdfFile(jprint, pathExportPdf);
            return true;
        } catch (Exception e) {
            cr.setResultMessage(et.com.ejb.nuc.data.CommonMessage.GLOBAL.ERROR.ERROR);
            return false;
        } finally {
            Utils.closeConnection(conn);
        }
    }

    public boolean printConsultaConsumidoranexo2(BigInteger idConsumidor, String pathExportPdf, CommonInput input) {
        HashMap hm = null;
        Connection conn = null;
        try {
            conn = et.com.ejb.csg.utils.Utils.getConnection();
            Calendar calendar = Calendar.getInstance();
            JasperCompileManager.compileReportToFile(CommonConstant.basePathJrxmlOrd + "potencia_equivalente_promedio_anexo2.jrxml", CommonConstant.basePathJrxmlOrd + "potencia_equivalente_promedio_anexo2.jasper");
            String usuarioStr = "";

            if (input.getHeaderDto() != null) {
                if (input.getHeaderDto().getUname() != null) {
                    usuarioStr = input.getHeaderDto().getUname();
                } else {
                    usuarioStr = "tomcat";
                }
            }

            hm = new HashMap();
            hm.put("consumidor", idConsumidor.intValue());
            // hm.put("usuario", usuarioStr);

            JasperPrint jprint = (JasperPrint) JasperFillManager.fillReport(CommonConstant.basePathJrxmlOrd + "potencia_equivalente_promedio_anexo2.jasper", hm, conn);
            JasperExportManager.exportReportToPdfFile(jprint, pathExportPdf);
            return true;
        } catch (Exception e) {
            cr.setResultMessage(et.com.ejb.nuc.data.CommonMessage.GLOBAL.ERROR.ERROR);
            return false;
        } finally {
            Utils.closeConnection(conn);
        }
    }

    //www
    public Boolean applyModificacionReclamo(NucConsumidor nucConsumidor, RecReclamo recReclamo, List<OrdDetalleDto> ordenDetalleDtoList, UsuarioDto usuarioDto) {
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        Boolean result = false;
        //long diasTranscurridos = 0;
        //NucConsumidorContrato nucContrato;

        try {
            if (nucConsumidor != null && recReclamo != null && recReclamo.getId() != null) {
                RecReclamo reclamo = recReclamoDao.findById(recReclamo.getId());
                if (reclamo != null) {
                    for (OrdDetalleDto ordDetalleDto : ordenDetalleDtoList) {
                        if (ordDetalleDto.getNombre().equals(CommonConstant.CORRECCION_RECLAMOS.DESCRIPCION)) {
                            reclamo.setDescripcion(ordDetalleDto.getValorActual());
                        }
                        if (ordDetalleDto.getNombre().equals(CommonConstant.CORRECCION_RECLAMOS.CODIGO)) {
                            RecCodigoReclamo idCodigoReclamo = recCodigoReclamoDao.findById(Integer.parseInt(ordDetalleDto.getValorActual()));
                            if (idCodigoReclamo != null) {
                                reclamo.setIdCodigoReclamo(idCodigoReclamo);
                            }
                        }
                        if (ordDetalleDto.getNombre().equals(CommonConstant.CORRECCION_RECLAMOS.PRONUNCIAMIENTO)) {
                            //verificamos si el reclamo tiene pronunciamiento
                            if (reclamo.getRecPronunciamientoList().size() == 1) {
                                reclamo.getRecPronunciamientoList().get(0).setDetalle(ordDetalleDto.getValorActual());
                                //cambiamos la comunicacion el detalle
                                for (RecComunicacion rc : reclamo.getRecComunicacionList()) {
                                    if (rc.getFechaComunicacion() != null) {
                                        rc.setDescripcion(ordDetalleDto.getValorActual());
                                    }
                                }
                            }
                        }
                        //respaldo
                        if (ordDetalleDto.getNombre().equals(CommonConstant.CORRECCION_RECLAMOS.RESPALDO)) {
                            //verificamos si el reclamo tiene pronunciamiento
                            if (reclamo.getRecPronunciamientoList().size() == 1) {
                                reclamo.getRecPronunciamientoList().get(0).setRespaldoPronunciamiento(ordDetalleDto.getValorActual());
                            }
                        }

                        //respaldo accion
                        if (ordDetalleDto.getNombre().equals(CommonConstant.CORRECCION_RECLAMOS.ACCION)) {
                            //verificamos si el reclamo tiene pronunciamiento
                            if (reclamo.getRecPronunciamientoList().size() == 1) {
                                reclamo.getRecPronunciamientoList().get(0).setRespaldoPronunciamientoAccion(ordDetalleDto.getValorActual());
                            }
                        }

                    }
                    recReclamoDao.update(reclamo);
                    result = true;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return result;
    }

    public List<OrdDocumento> getListOrdDocumentoByOrdOrdenEstado(CommonInput input) {
        List<OrdDocumento> ordDocumentoListResponse = new ArrayList<>();
        List<OrdDocumento> ordDocumentoList = ordOrdenDao.getListOrdDocumentoByOrdOrdenEstado(input.getOrdOrdenEstado());
        try {
            for (OrdDocumento ordDocumentoItem : ordDocumentoList) {
                OrdDocumento ordDocumento = new OrdDocumento();
                if (ordDocumentoItem.getArchivo() != null) {
                    ordDocumento.setNombre(ordDocumentoItem.getNombre());
                    ordDocumento.setContentType(ordDocumentoItem.getContentType());
                    ordDocumento.setDescripcion(ordDocumentoItem.getDescripcion());
                    ordDocumento.setArchivo("data:" + ordDocumentoItem.getContentType() + ";base64," + ordDocumentoItem.getArchivo());
                } else {
                    File file = new File(CommonConstant.PATH_ORDENES_IMAGENES + ordDocumentoItem.getNombre());
                    byte[] encoded = Base64.encodeBase64(FileUtils.readFileToByteArray(file));
                    ordDocumento.setNombre(ordDocumentoItem.getNombre());
                    ordDocumento.setContentType(ordDocumentoItem.getContentType());
                    ordDocumento.setDescripcion(ordDocumentoItem.getDescripcion());
                    ordDocumento.setArchivo("data:" + ordDocumentoItem.getContentType() + ";base64," + new String(encoded, StandardCharsets.UTF_8));
                }
                ordDocumentoListResponse.add(ordDocumento);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        return ordDocumentoListResponse;
    }

    public Boolean updateMedidor(OrdOrden orden, OrdTipoOrden tipoOrden, MedMedidor medidor, int ordEstado, Character estadoAsigRetira, UsuarioDto usuarioDto, Date fechaUltimoIndice) {
        cr = new CommonResponse();
        cr.setResult(GlobalConstant.RESULT_ERROR);
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        Boolean isUpdateMedidor = false;
        Boolean isUpdateServicioMedidor = false;
        Boolean isUpdateLecturaMedidor = false;
        Boolean isUpdateMedidorTot = false;
        try {
            if (orden != null && tipoOrden != null && medidor != null) {
                Integer codigoCorrelativo = 1;
                NucServicio nucServicio = nucServicioDao.findByIdConsumidor(orden.getIdConsumidor().getId(), CommonConstant.NUCTIPOSERVICIO.ENERGIA);
                NucServicioMedidor servicioMedidor = nucServicioMedidorDao.findByMedidorConectado(nucServicio.getId());
                NucLecturaMedidor lecturaMedidor = new NucLecturaMedidor();
                if (servicioMedidor != null) {
                    codigoCorrelativo = servicioMedidor.getCodigoCorrelativo();
                    lecturaMedidor = nucLecturaMedidorDao.findByServicioMedidor(servicioMedidor.getId());
                }
                if (tipoOrden.getAsignaMedidor() && estadoAsigRetira.equals('C')) { // tipoOrden.getCodigo() == CommonConstant.ORDTIPOORDEN.CONTRATO_NUEVO

                    if (ordEstado == CommonConstant.ORDESTADO.CUMPLIDA) {
//                        isUpdateMedidor = medmedidorDao.updateConect(medidor.getId());
                        medMedidorBean.updateConexionConsumidor(medidor.getId(), orden.getIdConsumidor().getId(), usuarioDto.getId_usuario_security());
                        isUpdateMedidor = true;
                        codigoCorrelativo = codigoCorrelativo + 1;
                        NucServicioMedidor nucServicioMedidor = new NucServicioMedidor();
                        nucServicioMedidor.setIdServicio(nucServicio);
                        nucServicioMedidor.setIdMedidor(medidor);
                        nucServicioMedidor.setConectado(true);
                        nucServicioMedidor.setFechaRegistro(orden.getFechaCumplimiento());
                        nucServicioMedidor.setFechaActualizacion(orden.getFechaCumplimiento());
                        nucServicioMedidor.setUsuarioRegistro(usuarioDto.getId_usuario_security());
                        nucServicioMedidor.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                        nucServicioMedidor.setCodigoCorrelativo(codigoCorrelativo);
                        nucServicioMedidor.setMultiplicadorCalculado(medidor.getMultiplicadorCalculado());
                        isUpdateServicioMedidor = nucServicioMedidorDao.create(nucServicioMedidor);

                        NucLecturaMedidor nucLecturaMedidor = new NucLecturaMedidor();
                        nucLecturaMedidor.setIdServicioMedidor(nucServicioMedidor);
                        nucLecturaMedidor.setIndice(orden.getIndConexion());
                        nucLecturaMedidor.setIndiceUltimo(orden.getIndConexion());

                        nucLecturaMedidor.setFechaUltimoIndice(fechaUltimoIndice);

                        nucLecturaMedidor.setFechaRegistro(orden.getFechaCumplimiento());
                        nucLecturaMedidor.setFechaActualizacion(orden.getFechaCumplimiento());
                        isUpdateLecturaMedidor = nucLecturaMedidorDao.create(nucLecturaMedidor);

                        if (isUpdateMedidor && isUpdateServicioMedidor && isUpdateLecturaMedidor) {
                            isUpdateMedidorTot = true;
                            cr.setResult(CommonConstant.RESULT_SUCCESS);
                            cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.OBJECT);
                        }
                    } else if (isUpdateMedidor) {
                        isUpdateMedidorTot = true;
                        cr.setResult(CommonConstant.RESULT_SUCCESS);
                        cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.OBJECT);
                    }
                }

            }
        } catch (Exception e) {
            cr.setResultMessage(CommonMessage.GLOBAL.ERROR.ERROR);
            e.printStackTrace();
        }
        return isUpdateMedidorTot;
    }

    public Boolean emparejarCorteReconexiones(OrdOrden orden) {
        cr = new CommonResponse();
        cr.setResult(GlobalConstant.RESULT_ERROR);
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        Boolean isEmpareja = false;

        try {
            OrdTipoOrden tipoOrdenCorte = ordTipoOrdenDao.findByCodigo(CommonConstant.ORDTIPOORDEN.CORTE);
            OrdTipoOrden tipoOrdenSusp = ordTipoOrdenDao.findByCodigo(CommonConstant.ORDTIPOORDEN.SUSPENSION_FALTA_PAGO);
            OrdTipoOrden tipoOrdenRecon = ordTipoOrdenDao.findByCodigo(CommonConstant.ORDTIPOORDEN.RECONEXION);
            OrdTipoOrden tipoOrdenRehab = ordTipoOrdenDao.findByCodigo(CommonConstant.ORDTIPOORDEN.REHABILITACION_FALTA_PAGO);
            OrdTipoOrden tipoOrdenRehabServicio = ordTipoOrdenDao.findByCodigo(CommonConstant.ORDTIPOORDEN.REHABILITACION);

            if (orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.RECONEXION) {
                OrdOrden ultimaOrdenCorte = ordOrdenDao.findByConsumidorOrdenEfectivoMenorOrden(orden.getIdConsumidor().getId(), tipoOrdenCorte.getId(), orden.getId());
                OrdOrden ultimaOrdenSusp = ordOrdenDao.findByConsumidorOrdenEfectivoMenorOrden(orden.getIdConsumidor().getId(), tipoOrdenSusp.getId(), orden.getId());

                if (ultimaOrdenCorte != null) {
                    CyrCorteReconexion cyrCorteReconexion = cyrCorteReconexionDao.findByIdCorte(ultimaOrdenCorte.getId());
                    cyrCorteReconexion.setIdOdenReconexion(orden);
                    cyrCorteReconexion.setDependencia("NO DEPENDE");
                    isEmpareja = cyrCorteReconexionDao.update(cyrCorteReconexion);

                }
            }
            if (orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.REHABILITACION_FALTA_PAGO) {
                OrdOrden ultimaOrdenCorte = ordOrdenDao.findByConsumidorOrdenEfectivoMenorOrden(orden.getIdConsumidor().getId(), tipoOrdenCorte.getId(), orden.getId());
                OrdOrden ultimaOrdenSusp = ordOrdenDao.findByConsumidorOrdenEfectivoMenorOrden(orden.getIdConsumidor().getId(), tipoOrdenSusp.getId(), orden.getId());
                OrdOrden penultimaOrdenRecon = ordOrdenDao.findByConsumidorTipoOrdenEfectivoPenultimo(orden.getIdConsumidor().getId(), tipoOrdenRecon.getId(), orden.getId());
                OrdOrden penultimaOrdenRehab = ordOrdenDao.findByConsumidorTipoOrdenEfectivoPenultimoRehabilitacion(orden.getIdConsumidor().getId(), tipoOrdenRehab.getId(), tipoOrdenRehabServicio.getId(), orden.getId());
                if (ultimaOrdenCorte != null && ultimaOrdenSusp != null) {
                    if (ultimaOrdenSusp.getCodigo().compareTo(ultimaOrdenCorte.getCodigo()) > 0) {
                        if (penultimaOrdenRecon != null) {
                            if (penultimaOrdenRecon.getCodigo().compareTo(ultimaOrdenCorte.getCodigo()) > 0) {

                                CyrCorteReconexion cyrCorteReconexionSup = cyrCorteReconexionDao.findByIdCorte(ultimaOrdenSusp.getId());
                                cyrCorteReconexionSup.setIdOdenReconexion(orden);
                                cyrCorteReconexionSup.setDependencia("NO DEPENDE");
                                isEmpareja = cyrCorteReconexionDao.update(cyrCorteReconexionSup);
                            } else {
                                if (penultimaOrdenRehab != null) {
                                    if (penultimaOrdenRehab.getCodigo().compareTo(ultimaOrdenCorte.getCodigo()) > 0) {
                                        CyrCorteReconexion cyrCorteReconexionSup = cyrCorteReconexionDao.findByIdCorte(ultimaOrdenSusp.getId());
                                        cyrCorteReconexionSup.setIdOdenReconexion(orden);
                                        cyrCorteReconexionSup.setDependencia("NO DEPENDE");
                                        isEmpareja = cyrCorteReconexionDao.update(cyrCorteReconexionSup);
                                    } else {
                                        CyrCorteReconexion cyrCorteReconexion = cyrCorteReconexionDao.findByIdCorte(ultimaOrdenCorte.getId());
                                        cyrCorteReconexion.setIdOdenReconexion(orden);
                                        cyrCorteReconexion.setDependencia("NO DEPENDE");
                                        isEmpareja = cyrCorteReconexionDao.update(cyrCorteReconexion);

                                        CyrCorteReconexion cyrCorteReconexionSup = cyrCorteReconexionDao.findByIdCorte(ultimaOrdenSusp.getId());
                                        cyrCorteReconexionSup.setDependencia("SI DEPENDE");
                                        isEmpareja = cyrCorteReconexionDao.update(cyrCorteReconexionSup);
                                    }
                                } else {
                                    CyrCorteReconexion cyrCorteReconexion = cyrCorteReconexionDao.findByIdCorte(ultimaOrdenCorte.getId());
                                    cyrCorteReconexion.setIdOdenReconexion(orden);
                                    cyrCorteReconexion.setDependencia("NO DEPENDE");
                                    isEmpareja = cyrCorteReconexionDao.update(cyrCorteReconexion);

                                    CyrCorteReconexion cyrCorteReconexionSup = cyrCorteReconexionDao.findByIdCorte(ultimaOrdenSusp.getId());
                                    cyrCorteReconexionSup.setDependencia("SI DEPENDE");
                                    isEmpareja = cyrCorteReconexionDao.update(cyrCorteReconexionSup);
                                }
                            }
                        } else {
                            if (penultimaOrdenRehab != null) {
                                if (penultimaOrdenRehab.getCodigo().compareTo(ultimaOrdenCorte.getCodigo()) > 0) {
                                    CyrCorteReconexion cyrCorteReconexionSup = cyrCorteReconexionDao.findByIdCorte(ultimaOrdenSusp.getId());
                                    cyrCorteReconexionSup.setIdOdenReconexion(orden);
                                    cyrCorteReconexionSup.setDependencia("NO DEPENDE");
                                    isEmpareja = cyrCorteReconexionDao.update(cyrCorteReconexionSup);
                                } else {
                                    CyrCorteReconexion cyrCorteReconexion = cyrCorteReconexionDao.findByIdCorte(ultimaOrdenCorte.getId());
                                    cyrCorteReconexion.setIdOdenReconexion(orden);
                                    cyrCorteReconexion.setDependencia("NO DEPENDE");
                                    isEmpareja = cyrCorteReconexionDao.update(cyrCorteReconexion);

                                    CyrCorteReconexion cyrCorteReconexionSup = cyrCorteReconexionDao.findByIdCorte(ultimaOrdenSusp.getId());
                                    cyrCorteReconexionSup.setDependencia("SI DEPENDE");
                                    isEmpareja = cyrCorteReconexionDao.update(cyrCorteReconexionSup);
                                }
                            } else {
                                CyrCorteReconexion cyrCorteReconexion = cyrCorteReconexionDao.findByIdCorte(ultimaOrdenCorte.getId());
                                cyrCorteReconexion.setIdOdenReconexion(orden);
                                cyrCorteReconexion.setDependencia("NO DEPENDE");
                                isEmpareja = cyrCorteReconexionDao.update(cyrCorteReconexion);

                                CyrCorteReconexion cyrCorteReconexionSup = cyrCorteReconexionDao.findByIdCorte(ultimaOrdenSusp.getId());
                                cyrCorteReconexionSup.setDependencia("SI DEPENDE");
                                isEmpareja = cyrCorteReconexionDao.update(cyrCorteReconexionSup);
                            }

                        }

                    } else {
                        CyrCorteReconexion cyrCorteReconexion = cyrCorteReconexionDao.findByIdCorte(ultimaOrdenCorte.getId());
                        cyrCorteReconexion.setIdOdenReconexion(orden);
                        cyrCorteReconexion.setDependencia("NO DEPENDE");
                        isEmpareja = cyrCorteReconexionDao.update(cyrCorteReconexion);
                    }
                } else {
                    if (ultimaOrdenSusp != null) {
                        CyrCorteReconexion cyrCorteReconexionSup = cyrCorteReconexionDao.findByIdCorte(ultimaOrdenSusp.getId());
                        cyrCorteReconexionSup.setIdOdenReconexion(orden);
                        cyrCorteReconexionSup.setDependencia("NO DEPENDE");
                        isEmpareja = cyrCorteReconexionDao.update(cyrCorteReconexionSup);
                    } else {
                        CyrCorteReconexion cyrCorteReconexion = cyrCorteReconexionDao.findByIdCorte(ultimaOrdenCorte.getId());
                        cyrCorteReconexion.setIdOdenReconexion(orden);
                        cyrCorteReconexion.setDependencia("NO DEPENDE");
                        isEmpareja = cyrCorteReconexionDao.update(cyrCorteReconexion);
                    }
                }
            }

        } catch (Exception e) {
            cr.setResultMessage(CommonMessage.GLOBAL.ERROR.ERROR);
            e.printStackTrace();
        }
        return isEmpareja;
    }

    public Boolean applyCambioPoblacionRC(NucConsumidor consumidor, NucArea nucArea, List<OrdDetalle> ordenDetalleList, UsuarioDto usuarioDto) {
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        Boolean isPoblacion = false;
        try {
            NucArea area = nucAreaDao.findById(nucArea.getId());
            if (area != null) {
                for (OrdDetalle ordDetalle : ordenDetalleList) {
                    if (ordDetalle.getCampo().equals("codigo_poblacion")) {
                        if (ordDetalle.getValorActual() == null) {
                            consumidor.setIdPoblacion(null);
                            consumidor.setFechaActualizacion(calendar.getTime());
                            consumidor.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                            nucConsumidorDao.update(consumidor);

                        } else {
                            NucPoblacion nucPoblacion = nucPoblacionDao.findByCodigoArea(new Integer(ordDetalle.getValorActual()), area.getId());

                            if (nucPoblacion != null) {
                                consumidor.setIdPoblacion(nucPoblacion);
                                consumidor.setFechaActualizacion(calendar.getTime());
                                consumidor.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                                nucConsumidorDao.update(consumidor);
                            }
                        }

                    }
                    if (ordDetalle.getCampo().equals("codigo_barrio")) {
                        if (ordDetalle.getValorActual() == null) {
                            consumidor.setIdBarrio(null);
                            consumidor.setFechaActualizacion(calendar.getTime());
                            consumidor.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                            nucConsumidorDao.update(consumidor);

                        } else {
                            NucBarrio nucBarrio = nucBarrioDao.findByCodigoArea(ordDetalle.getValorActual(), area.getId());

                            if (nucBarrio != null) {
                                consumidor.setIdBarrio(nucBarrio);
                                consumidor.setFechaActualizacion(calendar.getTime());
                                consumidor.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                                nucConsumidorDao.update(consumidor);
                            }
                        }

                    }

                    isPoblacion = true;

                }
            } else {
                cr.setResultMessage(CommonMessage.ORDORDEN.WARNING.CONSUMIDOR_NO_AREA);
                cr.setResult(CommonConstant.RESULT_WARNING);
            }

        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return isPoblacion;
    }

    public Boolean updateServicioMedidor(OrdOrden orden, OrdTipoOrden tipoOrden, MedMedidor medidor, int ordEstado, Character estadoAsigRetira, UsuarioDto usuarioDto) {
        cr = new CommonResponse();
        cr.setResult(GlobalConstant.RESULT_ERROR);
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        Boolean isUpdateServicioMedidor = false;
        Boolean isUpdateServicioMedidorDesc = false;
        Boolean isUpdateLecturaMedidor = false;
        Boolean isUpdateMedidorTot = false;
        try {
            if (orden != null && tipoOrden != null && medidor != null) {
                Integer codigoCorrelativo = 1;
                NucServicio nucServicio = nucServicioDao.findByIdConsumidor(orden.getIdConsumidor().getId(), CommonConstant.NUCTIPOSERVICIO.ENERGIA);
                NucServicioMedidor servicioMedidor = nucServicioMedidorDao.findByMedidorConectado(nucServicio.getId());
                NucLecturaMedidor lecturaMedidor = new NucLecturaMedidor();
                if (servicioMedidor != null) {
                    codigoCorrelativo = servicioMedidor.getCodigoCorrelativo();
                    lecturaMedidor = nucLecturaMedidorDao.findByServicioMedidor(servicioMedidor.getId());
                }
                if (tipoOrden.getAsignaMedidor() && estadoAsigRetira.equals('C')) { // tipoOrden.getCodigo() == CommonConstant.ORDTIPOORDEN.CONTRATO_NUEVO
                    if (ordEstado == CommonConstant.ORDESTADO.CUMPLIDA) {
                        codigoCorrelativo = codigoCorrelativo + 1;
                        if (orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.CONTRATO_NUEVO_GDI || orden.getIdTipoOrden().getCodigo() == CommonConstant.ORDTIPOORDEN.INSTALACION_MED_CONTROL) {
                            NucServicioMedidor nucServicioMedidor = new NucServicioMedidor();
                            nucServicioMedidor.setIdServicio(nucServicio);
                            nucServicioMedidor.setIdMedidor(medidor);
                            nucServicioMedidor.setConectado(false);
                            nucServicioMedidor.setConectadoFisico(true);
                            nucServicioMedidor.setFechaRegistro(orden.getFechaCumplimiento());
                            nucServicioMedidor.setFechaActualizacion(orden.getFechaCumplimiento());
                            nucServicioMedidor.setUsuarioRegistro(usuarioDto.getId_usuario_security());
                            nucServicioMedidor.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                            nucServicioMedidor.setCodigoCorrelativo(codigoCorrelativo);
                            nucServicioMedidor.setMultiplicadorCalculado(medidor.getMultiplicadorCalculado());
                            isUpdateServicioMedidor = nucServicioMedidorDao.create(nucServicioMedidor);

                            NucLecturaMedidor nucLecturaMedidor = new NucLecturaMedidor();
                            nucLecturaMedidor.setIdServicioMedidor(nucServicioMedidor);
                            nucLecturaMedidor.setIndice(orden.getIndConexion());
                            nucLecturaMedidor.setIndiceUltimo(orden.getIndConexion());
                            nucLecturaMedidor.setFechaUltimoIndice(orden.getFechaCumplimiento());
                            nucLecturaMedidor.setFechaRegistro(orden.getFechaCumplimiento());
                            nucLecturaMedidor.setFechaActualizacion(orden.getFechaCumplimiento());
                            isUpdateLecturaMedidor = nucLecturaMedidorDao.create(nucLecturaMedidor);
                        } else {
                            NucServicioMedidor nucServicioMedidor = new NucServicioMedidor();
                            nucServicioMedidor.setIdServicio(nucServicio);
                            nucServicioMedidor.setIdMedidor(medidor);
                            nucServicioMedidor.setConectado(true);
                            nucServicioMedidor.setFechaRegistro(orden.getFechaCumplimiento());
                            nucServicioMedidor.setFechaActualizacion(orden.getFechaCumplimiento());
                            nucServicioMedidor.setUsuarioRegistro(usuarioDto.getId_usuario_security());
                            nucServicioMedidor.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                            nucServicioMedidor.setCodigoCorrelativo(codigoCorrelativo);
                            nucServicioMedidor.setMultiplicadorCalculado(medidor.getMultiplicadorCalculado());
                            isUpdateServicioMedidor = nucServicioMedidorDao.create(nucServicioMedidor);

                            NucLecturaMedidor nucLecturaMedidor = new NucLecturaMedidor();
                            nucLecturaMedidor.setIdServicioMedidor(nucServicioMedidor);
                            nucLecturaMedidor.setIndice(orden.getIndConexion());
                            nucLecturaMedidor.setIndiceUltimo(orden.getIndConexion());
                            if (tipoOrden.getCodigo() == CommonConstant.ORDTIPOORDEN.CONTRATO_NUEVO || tipoOrden.getCodigo() == CommonConstant.ORDTIPOORDEN.INSTALACION_MEDIDOR) {
                                nucLecturaMedidor.setFechaUltimoIndice(orden.getFechaCumplimiento());
                            } else {
//                            nucLecturaMedidor.setFechaUltimoIndice(orden.get);
                            }
                            nucLecturaMedidor.setFechaRegistro(orden.getFechaCumplimiento());
                            nucLecturaMedidor.setFechaActualizacion(orden.getFechaCumplimiento());
                            isUpdateLecturaMedidor = nucLecturaMedidorDao.create(nucLecturaMedidor);
                        }

                        if (isUpdateServicioMedidor && isUpdateLecturaMedidor) {
                            isUpdateMedidorTot = true;
                            cr.setResult(CommonConstant.RESULT_SUCCESS);
                            cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.OBJECT);
                        }
                    } else if (isUpdateServicioMedidor) {
                        isUpdateMedidorTot = true;
                        cr.setResult(CommonConstant.RESULT_SUCCESS);
                        cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.OBJECT);
                    }
                }
                if (tipoOrden.getRetiraMedidor() && estadoAsigRetira.equals('D')) {

                    if (ordEstado == CommonConstant.ORDESTADO.CUMPLIDA) {
                        if (servicioMedidor != null) {
                            servicioMedidor.setConectado(false);
                            servicioMedidor.setFechaActualizacion(orden.getFechaCumplimiento());
                            servicioMedidor.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                            isUpdateServicioMedidorDesc = nucServicioMedidorDao.update(servicioMedidor);
                        }
                        if (lecturaMedidor != null) {
                            lecturaMedidor.setIndiceDesconexion(orden.getIndDesconexion() != null ? orden.getIndDesconexion() : lecturaMedidor.getIndiceUltimo());
                            lecturaMedidor.setFechaDesconexion(orden.getFechaCumplimiento());
                            isUpdateLecturaMedidor = nucLecturaMedidorDao.update(lecturaMedidor);
                        }
                        if (isUpdateServicioMedidorDesc) {
                            isUpdateMedidorTot = true;
                            cr.setResult(CommonConstant.RESULT_SUCCESS);
                            cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.OBJECT);
                        }
                    } else if (isUpdateServicioMedidorDesc) {
                        isUpdateMedidorTot = true;
                        cr.setResult(CommonConstant.RESULT_SUCCESS);
                        cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.OBJECT);
                    }
                }

            }
        } catch (Exception e) {
            cr.setResultMessage(CommonMessage.GLOBAL.ERROR.ERROR);
            e.printStackTrace();
        }
        return isUpdateMedidorTot;
    }

    /**
     * Genera reporte de ordenes de cambio de medidor dado una lista de
     * idetificadores
     *
     * @param ordenes String en formato {int, int, int,....} que contiene las
     * ordenes a mostrar en el reporte
     * @return lines List<String> lista de lineas del reporte
     * @see OrdOrdenDao
     */
    private List<String> ordenInstalaciónMedidorReporte(String idOrdenes) {
        List<Object[]> ordenes = ordOrdenDao.getOrdenCambioMedidorByIds(idOrdenes);
        List<String> lines = new ArrayList<>();
        int index;
        for (int i = 1; i <= ordenes.size(); i++) {
            //report has 11 free espaces to be filled with orders and observations, then rest would be shown as blank line to beautify report
            int free_spaces = 11;
            index = i - 1;
            String[] observations = ordenes.get(index)[59].toString().split("\\{}");
            String[] orders = ordenes.get(index)[60].toString().split("\\{}");
            int reserved_orders = orders[0].equals("") ? 0 : (orders.length - 1);
            int reserved_observations = observations[0].equals("") ? 0 : observations.length;
            if (free_spaces <= reserved_orders + reserved_observations) {
                reserved_observations = free_spaces - reserved_orders;
            }
            int reserved = reserved_orders + reserved_observations;
            //int reserved = 0;
            lines.add(
                    String.format(LS4, "Fecha: " + ordenes.get(index)[58])
                    + String.format(L1, "")
                    + String.format(LS3, "ORDEN DE SERVICIO")
                    + String.format(LS4, "N° Orden: " + ordenes.get(index)[1]) + "\r"
            );
            lines.add(
                    String.format(LS4, "Fecha Asig. Med: " + ordenes.get(index)[4])
                    + String.format(L1, "")
                    + String.format(LS3, "")
                    + String.format(LS4, "N° Solicitud: " + ordenes.get(index)[36]) + "\r"
            );
//            if(reserved < 11) {
//                lines.add("");
//            }
            lines.add(
                    (reserved < 11 ? "\r\n" : "")
                    + String.format(LS6, "Orden")
                    + String.format(LS6, "Número") + "\r"
            );
            if (orders.length > 1) {
                for (int it = 0; it < reserved_orders + 1; it++) {
                    String[] order = orders[it].split("\\|-\\|");
                    lines.add(
                            String.format(LS6, order[0])
                            + String.format(LS6, order[1]) + "\r"
                    );
                }
            } else {
                lines.add(
                        String.format(LS6, ordenes.get(index)[1])
                        + String.format(LS6, ordenes.get(index)[2]) + "\r"
                );
            }
//            if(reserved < 5) {
//                lines.add("");
//            }
            lines.add(
                    (reserved < 5 ? "\r\n" : "")
                    + String.format(LS3, "DATOS CONSUMIDOR")
                    + String.format(L3, "N° Consumidor: " + ordenes.get(index)[5])
                    + String.format(LS2, "")
                    + String.format(L4, "Fecha generación: " + ordenes.get(index)[3]) + "\r"
            );
//            if(reserved < 7) {
//                lines.add("");
//            }
            lines.add(
                    (reserved < 7 ? "\r\n" : "")
                    + String.format(LS8, "Nombre: " + ordenes.get(index)[6])
                    + String.format(LS4, "Teléfono: " + String.join(" - ", ordenes.get(index)[15].toString(), ordenes.get(index)[16].toString())) + "\r"
            );
            lines.add(
                    String.format(LS8, "Zona: " + (ordenes.get(index)[10].toString().equals("") ? ordenes.get(index)[34] : ordenes.get(index)[10]))
                    + String.format(LS4, "Ruta: " + ordenes.get(index)[9]) + "\r"
            );
            lines.add(
                    String.format(LS8, "Barrio: " + ordenes.get(index)[28])
                    + String.format(LS4, "Remesa: " + ordenes.get(index)[8]) + "\r"
            );
            lines.add(
                    String.format(LS8, "Dirección: " + ordenes.get(index)[11])
                    + String.format(LS4, "Cuenta Antigua: " + ordenes.get(index)[26]) + "\r"
            );
            lines.add(
                    String.format(LS3, "Nro Casa: " + ordenes.get(index)[12])
                    + String.format(L2, "Piso: " + ordenes.get(index)[13])
                    + String.format(L3, "Dpto: " + ordenes.get(index)[14])
                    + String.format(LS4, "Categoría: " + ordenes.get(index)[17]) + "\r"
            );
//            if(reserved < 2) {
//                lines.add("");
//            }
            lines.add(
                    (reserved < 2 ? "\r\n" : "")
                    + String.format(LS12, "Obs.Sol: " + ordenes.get(index)[38]) + "\r"
            );
            lines.add(
                    String.format(LS12, "Obs.Ins: " + ordenes.get(index)[39])
                    + (reserved < 1 ? "\r\n" : "") + "\r"
            );
//            if(reserved < 1) {
//                lines.add("");
//            }
            for (int it = 0; it < reserved_observations; it++) {
                String[] observation = observations[it].split("\\|-\\|");
                lines.add(
                        String.format(LS2, "Mat. Adicional")
                        + String.format(L6, observation[1])
                        + String.format(L2, observation[2] + TOFILL)
                        + String.format(LS2, observation[4]) + "\r"
                );
            }

            lines.add(
                    (reserved < 9 ? "\r\n" : "")
                    + String.format(LS4, "DATOS CONEXIÓN")
                    + String.format(L4, "Relación CT's: " + ordenes.get(index)[48])
                    + String.format(LS4, "Relación PT's: " + ordenes.get(index)[49]) + "\r"
            );
//            if(reserved < 3) {
//                lines.add("");
//            }
            lines.add(
                    (reserved < 3 ? "\r\n" : "")
                    + String.format(LS3, "Código: " + ordenes.get(index)[19])
                    + String.format(L2, "  PRECINTOS  ")
                    + this.addDataRow("Ser.| Num.|Ser.| Num.|Ser.| Num.|Ser.| Num.".split("\\|"), 4) + "\r"
            );
            lines.add(
                    String.format(LS3, "Medidor: " + ordenes.get(index)[18])
                    + String.format(L2, FILLMINUS)
                    + this.addLineRow(4) + "\r"
            );
            lines.add(
                    String.format(LS3, "Const.:" + ordenes.get(index)[21])
                    + String.format(L2, "Tapa de Medidor")
                    + this.addDataRow(ordenes.get(index)[40].toString().split(" "), 4) + "\r"
            );
            lines.add(
                    String.format(LS3, "Multi.: " + ordenes.get(index)[22])
                    + String.format(L2, FILLMINUS)
                    + this.addLineRow(4) + "\r"
            );
            lines.add(
                    String.format(LS3, "Pto. Medición: " + ordenes.get(index)[29])
                    + String.format(L2, "Cubrebornera")
                    + this.addDataRow(ordenes.get(index)[41].toString().split(" "), 4) + "\r"
            );
            lines.add(
                    String.format(LS3, "Índice: " + ordenes.get(index)[20])
                    + String.format(L2, FILLMINUS)
                    + this.addLineRow(4) + "\r"
            );
            lines.add(
                    String.format(LS3, "")
                    + String.format(L2, "Caja de Medidor")
                    + this.addDataRow(ordenes.get(index)[42].toString().split(" "), 4) + "\r"
            );
            lines.add(
                    String.format(LS3, "")
                    + String.format(L2, FILLMINUS)
                    + this.addLineRow(4) + "\r"
            );
            lines.add(
                    String.format(LS3, "")
                    + String.format(L2, "Caja de Distrib.")
                    + this.addDataRow(ordenes.get(index)[43].toString().split(" "), 4) + "\r"
            );
            lines.add(
                    String.format(LS3, "")
                    + String.format(L2, FILLMINUS)
                    + this.addLineRow(4) + "\r"
            );
            lines.add(
                    String.format(LS3, "")
                    + String.format(L2, "Demandimetro")
                    + this.addDataRow(ordenes.get(index)[44].toString().split(" "), 4) + "\r"
            );
            lines.add(
                    String.format(LS3, "")
                    + String.format(L2, FILLMINUS)
                    + this.addLineRow(4) + "\r"
            );
            lines.add(
                    String.format(LS3, "")
                    + String.format(L2, "TEST SWTCH")
                    + this.addDataRow(ordenes.get(index)[45].toString().split(" "), 4) + "\r"
            );
//            if(reserved < 8) {
//                lines.add("");
//            }
            lines.add(
                    (reserved < 8 ? "\r\n" : "")
                    + String.format(LS4, "RES. TRABAJO DE CAMPO")
                    + String.format(L2, "Motivo" + TOCHECK)
                    + String.format(L2, "Conclusión" + TOCHECK)
                    + String.format(LS4, "Dat. Con. Fases Inspección") + "\r"
            );
            lines.add(
                    String.format(LS4, "Trab. Ejecutado" + TOFILLSHORT)
                    + String.format(L2, "#H.R." + TOCHECK)
                    + String.format(L2, "#Inf.Ensayo" + TOCHECK)
                    + String.format(L1, "")
                    + String.format(LS3, " 1 2 3 N") + "\r"
            );
            lines.add(
                    String.format(LS4, "Trab. No Realizado" + TOFILLSHORT)
                    + String.format(L4, "Código Operario: " + TOFILLSHORT)
                    + String.format(L1, "")
                    + String.format(LS3, "|"
                            + (ordenes.get(index)[30].toString().equals("true") ? "X" : "_") + "|"
                            + (ordenes.get(index)[31].toString().equals("true") ? "X" : "_") + "|"
                            + (ordenes.get(index)[32].toString().equals("true") ? "X" : "_") + "|"
                            + (ordenes.get(index)[33].toString().equals("true") ? "X" : "_") + "|") + "\r"
            );
            lines.add(
                    String.format(LS4, "Imp. de Acceso" + TOFILLSHORT)
                    + String.format(L4, "Fecha Conexión: " + TOFILLSHORT)
                    + String.format(LS4, "Dat. Con. Fases Ejecución") + "\r"
            );
            lines.add(
                    String.format(LS4, "Obs. Trab. Contratista" + TOFILLSHORT)
                    + String.format(L4, "Hora Conexión:" + TOFILLSHORT)
                    + String.format(L1, "")
                    + String.format(LS3, " 1 2 3 N") + "\r"
            );
            lines.add(
                    String.format(LS4, "Observación:" + TOFILL)
                    + String.format(L4, "")
                    + String.format(L1, "")
                    + String.format(LS3, "|_|_|_|_|") + "\r"
            );
//            if(reserved < 6) {
//                lines.add("");
//            }
            lines.add(
                    (reserved < 6 ? "\r\n" : "")
                    + String.format(LS4, "")
                    + String.format(L4, TOFILL + TOFILL)
                    + String.format(LS4, "") + "\r"
            );
            lines.add(
                    String.format(LS4, "")
                    + String.format(L4, "    Firma del Consumidor")
                    + String.format(LS4, "") + "\r"
            );
        }
        return lines;
    }
//    //VERIFICA CANTIDAD DE VARIOS SERVICIOS
//
//    public void validaVariosServicios(NucConsumidor nucConsumidor, NucCategoria nucCategoria) {
//        try {
////            NucCategoria categoria = nucCategoriaDao.findById(nucCategoria.getId());
//            NucConsumidor consumidor = nucConsumidorDao.findById(nucConsumidor.getId());
//
////            if (categoria.getIdTipoCategoria().getId() == CommonConstant.NUCTIPOCATEGORIA.DOMICILIARIO) {
//            if (nucConsumidorDao.getVariosServicioDocumetoRazonSocial(consumidor.getNumeroDocumento(), consumidor.getRazonSocial(), 2, 999)) {
//                consumidor.setVariosServicios(true);
//                nucConsumidorDao.update(consumidor);
//            }
////            }
//        } catch (Exception e) {
//            cr.setResultMessage(CommonMessage.GLOBAL.ERROR.ERROR);
//            e.printStackTrace();
//        }
//
//    }

    private List<String> ordenConexionGdi(String idOrdenes) {
        List<Object[]> ordenes = ordOrdenDao.getOrdenCambioMedidorByIds(idOrdenes);
        String ord = (idOrdenes.replace("{", " ").replace("}", " ")).trim();
        int idOrd = Integer.valueOf(ord);
        OrdOrden ordenContratoGdi = ordOrdenDao.findById(idOrd);
        /*buscamos orden de instalacion medidor de control*/
        OrdOrden ordenInsMedControl = ordOrdenDao.findByOrdenInstalacionMedidorControl(ordenContratoGdi.getIdConsumidor().getId());
        String idOrdInsmc = ("{" + String.valueOf(ordenInsMedControl.getId()) + "}").trim();

        // List<Object[]> ordenesContratoNuevoGdi = ordOrdenDao.getOrdenConexionGdiByIds(idOrdInsmc);
        /*orden conexion contrato juevo gdi*/
        OrdOrden ordenMedidorGdi = ordOrdenDao.findByOrdenInstalacionMedidorGdi(ordenContratoGdi.getIdConsumidor().getId());
        String idOrdMedGdi = ("{" + String.valueOf(ordenMedidorGdi.getId()) + "}").trim();
        List<Object[]> ordenesContratoNuevoGdi = ordOrdenDao.getOrdenConexionGdiByIds(idOrdMedGdi);
        List<Object[]> ordenesInstMedControl = ordOrdenDao.getOrdenCambioMedidorByIds(idOrdInsmc);
        List<String> lines = new ArrayList<>();
        int index;
        for (int i = 1; i <= ordenes.size(); i++) {
            //report has 11 free espaces to be filled with orders and observations, then rest would be shown as blank line to beautify report
            int free_spaces = 11;
            index = i - 1;
            String[] observations = ordenes.get(index)[59].toString().split("\\{}");
            String[] orders = ordenes.get(index)[60].toString().split("\\{}");
            int reserved_orders = orders[0].equals("") ? 0 : (orders.length - 1);
            int reserved_observations = observations[0].equals("") ? 0 : observations.length;
            if (free_spaces <= reserved_orders + reserved_observations) {
                reserved_observations = free_spaces - reserved_orders;
            }
            int reserved = reserved_orders + reserved_observations;

            lines.add(
                    String.format(LS4, "Fecha: " + ordenes.get(index)[58])
                    + String.format(L1, "")
                    + String.format(LS3, "ORDEN DE SERVICIO")
                    + String.format(LS4, "N° Orden: " + ordenes.get(index)[1]) + "\r"
            );
            lines.add(
                    String.format(LS4, "Fecha Asig. Med: " + ordenes.get(index)[4])
                    + String.format(L1, "")
                    + String.format(LS3, "")
                    + String.format(LS4, "N° Solicitud: " + ordenes.get(index)[36]) + "\r"
            );

            lines.add(
                    (reserved < 11 ? "\r\n" : "")
                    + String.format(LS6, "Orden")
                    + String.format(LS6, "Número") + "\r"
            );
            if (orders.length > 1) {
                for (int it = 0; it < reserved_orders + 1; it++) {
                    String[] order = orders[it].split("\\|-\\|");
                    lines.add(
                            String.format(LS6, order[0])
                            + String.format(LS6, order[1]) + "\r"
                    );
                }
            } else {
                lines.add(
                        String.format(LS6, ordenes.get(index)[1])
                        + String.format(LS6, ordenes.get(index)[2]) + "\r"
                );
            }

            lines.add(
                    (reserved < 5 ? "\r\n" : "")
                    + String.format(LS3, "DATOS CONSUMIDOR")
                    + String.format(L3, "N° Consumidor: " + ordenes.get(index)[5])
                    + String.format(LS2, "")
                    + String.format(L4, "Fecha generación: " + ordenes.get(index)[3]) + "\r"
            );

            lines.add(
                    (reserved < 7 ? "\r\n" : "")
                    + String.format(LS8, "Nombre: " + ordenes.get(index)[6])
                    + String.format(LS4, "Teléfono: " + String.join(" - ", ordenes.get(index)[15].toString(), ordenes.get(index)[16].toString())) + "\r"
            );
            lines.add(
                    String.format(LS8, "Zona: " + (ordenes.get(index)[10].toString().equals("") ? ordenes.get(index)[34] : ordenes.get(index)[10]))
                    + String.format(LS4, "Ruta: " + ordenes.get(index)[9]) + "\r"
            );
            lines.add(
                    String.format(LS8, "Barrio: " + ordenes.get(index)[28])
                    + String.format(LS4, "Remesa: " + ordenes.get(index)[8]) + "\r"
            );
            lines.add(
                    String.format(LS8, "Dirección: " + ordenes.get(index)[11])
                    + String.format(LS4, "Cuenta Antigua: " + ordenes.get(index)[26]) + "\r"
            );
            lines.add(
                    String.format(LS3, "Nro Casa: " + ordenes.get(index)[12])
                    + String.format(L2, "Piso: " + ordenes.get(index)[13])
                    + String.format(L3, "Dpto: " + ordenes.get(index)[14])
                    + String.format(LS4, "Categoría: " + ordenes.get(index)[17]) + "\r"
            );

            lines.add(
                    (reserved < 2 ? "\r\n" : "")
                    + String.format(LS12, "Obs.Sol: " + ordenes.get(index)[38]) + "\r"
            );
            lines.add(
                    String.format(LS12, "Obs.Ins: " + ordenes.get(index)[39])
                    + (reserved < 1 ? "\r\n" : "") + "\r"
            );

            for (int it = 0; it < reserved_observations; it++) {
                String[] observation = observations[it].split("\\|-\\|");
                lines.add(
                        String.format(LS2, "Mat. Adicional")
                        + String.format(L6, observation[1])
                        + String.format(L2, observation[2] + TOFILL)
                        + String.format(LS2, observation[4]) + "\r"
                );
            }

            lines.add(
                    (reserved < 10 ? "\r\n" : "")
                    + String.format(LS4, "DATOS MEDIDOR BIDIRECCIONAL")
                    + String.format(L4, "Relación CT's: " + ordenesContratoNuevoGdi.get(index)[48])
                    + String.format(LS4, "Relación PT's: " + ordenesContratoNuevoGdi.get(index)[49]) + "\r"
            );

            lines.add(
                    (reserved < 4 ? "\r\n" : "")
                    + String.format(LS3, "Código:" + ordenesContratoNuevoGdi.get(index)[19])
                    + String.format(L2, "  PRECINTOS  ")
                    //+ this.addDataRowExtended("Ser.| Num.|Ser.| Num.|Ser.| Num.|Ser.| Num.".split("\\|"), 4) + "\r"
                    + this.addDataRow("Ser.| Num.|Ser.| Num.|Ser.| Num.|Ser.| Num.".split("\\|"), 4) + "\r"
            );

            lines.add(
                    String.format(LS3, "Medidor:" + ordenesContratoNuevoGdi.get(index)[18])
                    + String.format(L2, FILLMINUS)
                    + this.addLineRow(4) + "\r"
            );

            lines.add(
                    String.format(LS3, "Const.:" + ordenesContratoNuevoGdi.get(index)[21])
                    + String.format(L2, "Tapa de Medidor")
                    + this.addDataRow(ordenesContratoNuevoGdi.get(index)[40].toString().split(" "), 4) + "\r"
            );
            lines.add(
                    String.format(LS3, "Multi.: " + ordenesContratoNuevoGdi.get(index)[22])
                    + String.format(L2, FILLMINUS)
                    + this.addLineRow(4) + "\r"
            );
            lines.add(
                    String.format(LS3, "Pto. Medición: " + ordenesContratoNuevoGdi.get(index)[29])
                    + String.format(L2, "Cubrebornera")
                    + this.addDataRow(ordenesContratoNuevoGdi.get(index)[41].toString().split(" "), 4) + "\r"
            );
            lines.add(
                    String.format(LS3, "Índice Directo: " + ordenesContratoNuevoGdi.get(index)[20])
                    + String.format(L2, FILLMINUS)
                    + this.addLineRow(4) + "\r"
            );
            lines.add(
                    String.format(LS3, "Índice Reverso:" + ordenesContratoNuevoGdi.get(index)[64])
                    + String.format(L2, "Caja de Medidor")
                    + this.addDataRow(ordenesContratoNuevoGdi.get(index)[42].toString().split(" "), 4) + "\r"
            );
            lines.add(
                    String.format(LS3, "")
                    + String.format(L2, FILLMINUS)
                    + this.addLineRow(4) + "\r"
            );
            lines.add(
                    String.format(LS3, "")
                    + String.format(L2, "Caja de Distrib.")
                    + this.addDataRow(ordenesContratoNuevoGdi.get(index)[43].toString().split(" "), 4) + "\r"
            );
            lines.add(
                    String.format(LS3, "")
                    + String.format(L2, FILLMINUS)
                    + this.addLineRow(4) + "\r"
            );
            lines.add(
                    String.format(LS3, "")
                    + String.format(L2, "Demandimetro")
                    + this.addDataRow(ordenesContratoNuevoGdi.get(index)[44].toString().split(" "), 4) + "\r"
            );
            lines.add(
                    String.format(LS3, "")
                    + String.format(L2, FILLMINUS)
                    + this.addLineRow(4) + "\r"
            );
            lines.add(
                    String.format(LS3, "")
                    + String.format(L2, "TEST SWTCH")
                    + this.addDataRow(ordenesContratoNuevoGdi.get(index)[45].toString().split(" "), 4) + "\r"
            );
            Integer sistemaMedicion = ordenesContratoNuevoGdi.get(index)[63] != null ? Integer.parseInt(ordenes.get(index)[63].toString()) : null;
            if (sistemaMedicion != null && (sistemaMedicion == 3 || sistemaMedicion == 4)) {
                lines.add(
                        String.format(LS3, "")
                        + String.format(L2, FILLMINUS)
                        + this.addLineRow(4) + "\r"
                );
                lines.add(
                        String.format(LS3, "")
                        + String.format(L2, "CAJA CT'S")
                        + this.addDataRow(ordenesContratoNuevoGdi.get(index)[61].toString().split(" "), 4) + "\r"
                );
                lines.add(
                        String.format(LS3, "")
                        + String.format(L2, FILLMINUS)
                        + this.addLineRow(4) + "\r"
                );
                lines.add(
                        String.format(LS3, "")
                        + String.format(L2, "CELDA MEDICIÓN")
                        + this.addDataRow(ordenesContratoNuevoGdi.get(index)[62].toString().split(" "), 4) + "\r"
                );
            }

            /**
             * *********CONEXIÓN MEDIDOR DE CONTROL************
             */
            lines.add(
                    (reserved < 9 ? "\r\n" : "")
                    + String.format(LS4, "CONEXIÓN MEDIDOR DE CONTROL")
                    + String.format(L4, "Relación CT's: " + ordenesInstMedControl.get(index)[48])
                    + String.format(LS4, "Relación PT's: " + ordenesInstMedControl.get(index)[49]) + "\r"
            );

            lines.add(
                    (reserved < 3 ? "\r\n" : "")
                    + String.format(LS3, "Código: " + ordenesInstMedControl.get(index)[19])
                    + String.format(L2, "  PRECINTOS  ")
                    + this.addDataRow("Ser.| Num.|Ser.| Num.|Ser.| Num.|Ser.| Num.".split("\\|"), 4) + "\r"
            );

            lines.add(
                    String.format(LS3, "Medidor: " + ordenesInstMedControl.get(index)[18])
                    + String.format(L2, FILLMINUS)
                    + this.addLineRow(4) + "\r"
            );
            lines.add(
                    String.format(LS3, "Const.:" + ordenesInstMedControl.get(index)[21])
                    + String.format(L2, "Tapa de Medidor")
                    + this.addDataRow(ordenesInstMedControl.get(index)[40].toString().split(" "), 4) + "\r"
            );
            lines.add(
                    String.format(LS3, "Multi.: " + ordenesInstMedControl.get(index)[22])
                    + String.format(L2, FILLMINUS)
                    + this.addLineRow(4) + "\r"
            );
            lines.add(
                    String.format(LS3, "Pto. Medición: " + ordenesInstMedControl.get(index)[29])
                    + String.format(L2, "Cubrebornera")
                    + this.addDataRow(ordenesInstMedControl.get(index)[41].toString().split(" "), 4) + "\r"
            );
            lines.add(
                    String.format(LS3, "Índice: " + ordenesInstMedControl.get(index)[20])
                    + String.format(L2, FILLMINUS)
                    + this.addLineRow(4) + "\r"
            );
            lines.add(
                    String.format(LS3, "")
                    + String.format(L2, "Caja de Medidor")
                    + this.addDataRow(ordenesInstMedControl.get(index)[42].toString().split(" "), 4) + "\r"
            );
            lines.add(
                    String.format(LS3, "")
                    + String.format(L2, FILLMINUS)
                    + this.addLineRow(4) + "\r"
            );
            lines.add(
                    String.format(LS3, "")
                    + String.format(L2, "Caja de Distrib.")
                    + this.addDataRow(ordenesInstMedControl.get(index)[43].toString().split(" "), 4) + "\r"
            );
            lines.add(
                    String.format(LS3, "")
                    + String.format(L2, FILLMINUS)
                    + this.addLineRow(4) + "\r"
            );
            lines.add(
                    String.format(LS3, "")
                    + String.format(L2, "Demandimetro")
                    + this.addDataRow(ordenesInstMedControl.get(index)[44].toString().split(" "), 4) + "\r"
            );
            lines.add(
                    String.format(LS3, "")
                    + String.format(L2, FILLMINUS)
                    + this.addLineRow(4) + "\r"
            );
            lines.add(
                    String.format(LS3, "")
                    + String.format(L2, "TEST SWTCH")
                    + this.addDataRow(ordenesInstMedControl.get(index)[45].toString().split(" "), 4) + "\r"
            );
            Integer sistemaMedicion2 = ordenesInstMedControl.get(index)[63] != null ? Integer.parseInt(ordenes.get(index)[63].toString()) : null;
            if (sistemaMedicion2 != null && (sistemaMedicion2 == 3 || sistemaMedicion2 == 4)) {
                lines.add(
                        String.format(LS3, "")
                        + String.format(L2, FILLMINUS)
                        + this.addLineRow(4) + "\r"
                );
                lines.add(
                        String.format(LS3, "")
                        + String.format(L2, "CAJA CT'S")
                        + this.addDataRow(ordenesInstMedControl.get(index)[61].toString().split(" "), 4) + "\r"
                );
                lines.add(
                        String.format(LS3, "")
                        + String.format(L2, FILLMINUS)
                        + this.addLineRow(4) + "\r"
                );
                lines.add(
                        String.format(LS3, "")
                        + String.format(L2, "CELDA MEDICIÓN")
                        + this.addDataRow(ordenesInstMedControl.get(index)[62].toString().split(" "), 4) + "\r"
                );
            }

            lines.add(
                    (reserved < 8 ? "\r\n" : "")
                    + String.format(LS4, "RES. TRABAJO DE CAMPO")
                    + String.format(L2, "Motivo" + TOCHECK)
                    + String.format(L2, "Conclusión" + TOCHECK) + "\r"
            // + String.format(LS4, "Dat. Con. Fases Inspección") 
            );
            lines.add(
                    String.format(LS4, "Trab. Ejecutado" + TOFILLSHORT)
                    + String.format(L2, "#H.R." + TOCHECK)
                    + String.format(L2, "#Inf.Ensayo" + TOCHECK)
                    + String.format(L1, "") + "\r"
            //+ String.format(LS3, " 1 2 3 N") 
            );
            lines.add(
                    String.format(LS4, "Trab. No Realizado" + TOFILLSHORT)
                    + String.format(L4, "Código Operario: " + TOFILLSHORT)
                    + String.format(L1, "")
                    /*+ String.format(LS3, "|"
                            + (ordenes.get(index)[30].toString().equals("true") ? "X" : "_") + "|"
                            + (ordenes.get(index)[31].toString().equals("true") ? "X" : "_") + "|"
                            + (ordenes.get(index)[32].toString().equals("true") ? "X" : "_") + "|"
                            + (ordenes.get(index)[33].toString().equals("true") ? "X" : "_") + "|")*/ + "\r"
            );
            lines.add(
                    String.format(LS4, "Imp. de Acceso" + TOFILLSHORT)
                    + String.format(L4, "Fecha Conexión: " + TOFILLSHORT)
                    + String.format(LS4, "Dat. Con. Fases Ejecución") + "\r"
            );
            lines.add(
                    String.format(LS4, "Obs. Trab. Contratista" + TOFILLSHORT)
                    + String.format(L4, "Hora Conexión:" + TOFILLSHORT)
                    + String.format(L1, "")
                    + String.format(LS3, " 1 2 3 N") + "\r"
            );
            lines.add(
                    String.format(LS4, "Observación:" + TOFILL)
                    + String.format(L4, "")
                    + String.format(L1, "")
                    + String.format(LS3, "|_|_|_|_|") + "\r"
            );

            lines.add(
                    (reserved < 6 ? "\r\n" : "")
                    + String.format(LS4, "")
                    + String.format(L4, TOFILL + TOFILL)
                    + String.format(LS4, "") + "\r"
            );
            lines.add(
                    String.format(LS4, "")
                    + String.format(L4, "    Firma del Consumidor")
                    + String.format(LS4, "") + "\r"
            );
        }
        return lines;
    }

//    public void actualizarVariosServicios(List<NucConsumidor> nucConsumidorList) {
//        try {
//
//            for (NucConsumidor nucConsumidor : nucConsumidorList) {
//                //Valida si esta en  ruta critica
//                if (!this.validaRutaCritica(nucConsumidor.getIdRuta().getIdRemesa().getId())) {
//                    nucConsumidor.setVariosServicios(true);
//                    nucConsumidorDao.update(nucConsumidor);
//                }
//            }
//
//        } catch (Exception e) {
//            cr.setResultMessage(CommonMessage.GLOBAL.ERROR.ERROR);
//            e.printStackTrace();
//        }
//
//    }
    public CommonResponse emparejarCortesReposiciones(CommonInput input) {
        cr = new CommonResponse();
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        List<OrdOrden> ordOrdenList;
        OrdOrden ordOrden;
        try {
            ordOrdenList = input.getOrdOrdenList();
            for (OrdOrden orden : ordOrdenList) {
                ordOrden = ordOrdenDao.findByCodigoOrden(orden.getCodigo());
                if (ordOrden != null && ordOrden.getId() != null) {

                    Boolean isUpdateEstado = this.emparejarCorteReconexiones(ordOrden);
                    if (isUpdateEstado) {
                        cr.setResult(et.com.ejb.atc.data.CommonConstant.RESULT_SUCCESS);
                        cr.setResultMessage(et.com.ejb.atc.data.CommonMessage.GLOBAL.SUCCESS.SUCCESS);
                    } else {
                        cr.setResult(GlobalConstant.RESULT_ERROR);
                        cr.setResultMessage(et.com.ejb.atc.data.CommonMessage.GLOBAL.ERROR.ERROR);
                    }
                } else {
                    cr.setResult(GlobalConstant.RESULT_ERROR);
                    cr.setResultMessage(et.com.ejb.atc.data.CommonMessage.GLOBAL.ERROR.EMPTY_INPUT);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            cr.setResult(GlobalConstant.RESULT_ERROR);
            cr.setResultMessage(et.com.ejb.atc.data.CommonMessage.GLOBAL.ERROR.ERROR);
        }
        return cr;
    }

    public Boolean applyCorreccionTelefonoCorreo(NucConsumidor nucConsumidor, List<OrdDetalleDto> ordenDetalleDtoList, UsuarioDto usuarioDto) {
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        Boolean isCorrigeTelefonoCorreo = false;
        try {
            if (nucConsumidor != null) {
                NucConsumidor consumidor = nucConsumidorDao.findById(nucConsumidor.getId());

                for (OrdDetalleDto ordDetalleDto : ordenDetalleDtoList) {
                    if (ordDetalleDto.getNombre().equals("email")) {
                        if (ordDetalleDto.getValorActual() != null) {
                            consumidor.setEmail(ordDetalleDto.getValorActual());
                        }
                    }
                    if (ordDetalleDto.getNombre().equals("celular")) {
                        if (ordDetalleDto.getValorActual() != null) {
                            consumidor.setCelular(ordDetalleDto.getValorActual());
                        }
                    }

                    if (ordDetalleDto.getNombre().equals("telefono")) {
                        if (ordDetalleDto.getValorActual() != null) {
                            consumidor.setTelefono(ordDetalleDto.getValorActual());
                        }
                    }
                }

                consumidor.setFechaActualizacion(calendar.getTime());
                consumidor.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                nucConsumidorDao.update(consumidor);
                isCorrigeTelefonoCorreo = true;
            }
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return isCorrigeTelefonoCorreo;
    }

    public boolean printOrdenCorreccionTelefonoCorreo(int idOrden, String celularAnterior, String telefonoAnterior, String celularActual, String telefonoActual, String oldEmail, String newEmail, String pathTmpFile) {
        HashMap hm;
        List<String> lines;
        try {
            if (celularActual == null) {
                celularActual = "";
            }
            if (telefonoActual == null) {
                telefonoActual = "";
            }
            if (newEmail == null) {
                newEmail = "";
            }

            hm = new HashMap();
            hm.put("idOrden", idOrden);
            hm.put("celularAnterior", celularAnterior);
            hm.put("celularActual", celularActual);
            hm.put("telefonoAnterior", telefonoAnterior);
            hm.put("telefonoActual", telefonoActual);
            hm.put("actualEmail", newEmail);
            hm.put("anteriorEmail", oldEmail);
            lines = this.ordenCorreccionTelefonoCorreoReporte(idOrden, hm);
            Path file = Paths.get(pathTmpFile);
            Files.write(file, lines, StandardCharsets.UTF_8);
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }

    private List<String> ordenCorreccionTelefonoCorreoReporte(int idOrden, HashMap hm) {
        Object[] orden = ordOrdenDao.getOrdenCorreccion(idOrden);
        TextPrinter textPrinter = new TextPrinter();
        String[] art = {
            "* Los datos proporcionados son considerados como declaración jurada, en el marco del",
            "  artículo 8 del párrafo II del D.S. 26302.",
            "* Acepto que mi factura electrónica sea enviada al correo electrónico registrado.",
            "  En caso de modificación debe comunicar a la Distribuidora con una anticipación de 20 días",
            "  hábiles administrativos."
        };
        String[] callcenter = {
            "* Para consultas, favor apersonarse a las oficinas de Atencion Consumidor o llamar a ",
            "  nuestra línea única FONOLUZ al teléfono 800173333."
        };

        // Separamos los datos de "observación" y "solicitado por"
        String arr[] = orden[8].toString().split(" SOLICITADO POR:: ");
        String observacion = arr[0];
        String solicitadoPor = arr[1];

        /* INICIO REPORTE */
        textPrinter.add(
                textPrinter.format("ORDEN DE SERVICIO NÚMERO " + orden[1], 3, 9, true),
                textPrinter.format("Fecha: " + orden[21], 3, true)
        );
        textPrinter.add(
                textPrinter.format("MODIFICACIÓN DE TELEFONO Y CORREO ELECTRÓNICO", 3, 9, true),
                textPrinter.format("Hora: " + orden[23], 3, true)
        );
        textPrinter.add(
                textPrinter.format("", 3, 9, true),
                textPrinter.format(orden[20], 3, true)
        );
        textPrinter.addAuto(
                "______________________________________________________________________________________"
        );
        textPrinter.addAuto(
                "Razón Social: " + orden[19]
        );
        textPrinter.addAuto(
                "Paterno: " + orden[5],
                "Materno: " + orden[6]
        );
        textPrinter.addAuto(
                "Nombres: " + orden[4]
        );
        textPrinter.addAuto(
                "C.I.: " + orden[2],
                "Expedido en: " + orden[3],
                "Número de NIT: " + orden[7]
        );

        textPrinter.addAuto(
                "Solicitado por: " + solicitadoPor + "   Teléfono: " + orden[12] + "   Celular: " + orden[25]
        );
        String condicionConsumidor = "";
        if (orden[26] == null) {
            condicionConsumidor = "NO TIENE";
        } else {
            condicionConsumidor = String.valueOf(orden[26]);
        }
        textPrinter.addAuto(
                "N° consumidor: " + orden[18] + "   Condición Consumidor: " + condicionConsumidor
        );
        textPrinter.addAuto(
                "Categoría tarifaria: " + orden[27]
        );

        textPrinter.addAuto(
                "______________________________________________________________________________________"
        );

        textPrinter.addAuto(
                "Dirección: " + orden[9]
        );
        textPrinter.addAuto(
                "Nro. :" + orden[10],
                "Piso/Departamento: " + orden[11],
                "Condición : " + orden[15]
        );
        textPrinter.addAuto(
                "Zona: " + orden[13],
                "Barrio: " + orden[14]
        );

        textPrinter.addEmpty();
        String anteriorEmail = (String) hm.get("anteriorEmail");
        anteriorEmail = ((anteriorEmail == null) ? "" : anteriorEmail);
        textPrinter.addAuto(
                "E-mail Anterior : " + anteriorEmail
        );
        textPrinter.addAuto(
                "E-mail Actual : " + hm.get("actualEmail")
        );

        textPrinter.addEmpty();
        String celularAnterior = (String) hm.get("celularAnterior");
        celularAnterior = ((celularAnterior == null) ? "" : celularAnterior);
        textPrinter.addAuto(
                "Celular Anterior: " + celularAnterior
        );
        textPrinter.addAuto(
                "Celular Actual: " + hm.get("celularActual")
        );
        textPrinter.addEmpty();
        String telefonoAnterior = (String) hm.get("telefonoAnterior");
        telefonoAnterior = ((telefonoAnterior == null) ? "" : telefonoAnterior);
        textPrinter.addAuto(
                "Teléfono Anterior: " + telefonoAnterior
        );
        textPrinter.addAuto(
                "Teléfono Actual: " + hm.get("telefonoActual")
        );

        textPrinter.addEmpty();
        textPrinter.addAuto(
                "Observación: " + observacion
        );
        textPrinter.addAuto(
                "______________________________________________________________________________________"
        );
        textPrinter.addEmpty();

        textPrinter.addAuto(
                art[0]
        );
        textPrinter.addAuto(
                art[1]
        );
        textPrinter.addAuto(
                art[2]
        );
        textPrinter.addAuto(
                art[3]
        );
        textPrinter.addAuto(
                art[4]
        );
        textPrinter.addAuto(
                callcenter[0]
        );
        textPrinter.addAuto(
                callcenter[1]
        );
        textPrinter.addEmpty();
        textPrinter.addEmpty();
        textPrinter.addAuto(
                3,
                textPrinter.addToFill(),
                textPrinter.addToFill(),
                textPrinter.addToFill()
        );
        textPrinter.addAuto(
                3,
                "Firma Titular",
                "Firma Solicitante",
                "Firma Adm. Com."
        );
        return textPrinter.getText();
    }

    public CommonResponse reimprimirOrdenInterna(CommonInput input) {
        OrdOrden orden = ordOrdenDao.findById(input.getOrdOrden().getId());
        try {

            List<OrdDetalle> ordDetalleList = ordDetalleDao.findByOrden(orden.getId());

            String direccionAnterior = "";
            String direccionActual = "";
            String numeroCasaAnterior = "";
            String numeroCasaActual = "";
            String numeroDepartamenteAnt = "";
            String numeroDepartamenteActual = "";
            String pisoDepartamenteAnt = "";
            String pisoDepartamenteActual = "";

            for (OrdDetalle ordDetalle : ordDetalleList) {
                if (ordDetalle.getCampo().equals("direccion")) {
                    if (ordDetalle.getValorAnterior() != null) {
                        direccionAnterior = ordDetalle.getValorAnterior();
                    }
                    if (ordDetalle.getValorActual() != null) {
                        direccionActual = ordDetalle.getValorActual();
                    }
                }
                if (ordDetalle.getCampo().equals("NUMERO")) {
                    if (ordDetalle.getValorAnterior() != null) {
                        numeroCasaAnterior = ordDetalle.getValorAnterior();
                    }
                    if (ordDetalle.getValorActual() != null) {
                        numeroCasaActual = ordDetalle.getValorActual();
                    }
                }
                if (ordDetalle.getCampo().equals("NUMERODEPARTAMENTO")) {
                    if (ordDetalle.getValorAnterior() != null) {
                        numeroDepartamenteAnt = ordDetalle.getValorAnterior();
                    }
                    if (ordDetalle.getValorActual() != null) {
                        numeroDepartamenteActual = ordDetalle.getValorActual();
                    }

                }
                if (ordDetalle.getCampo().equals("PISO")) {
                    if (ordDetalle.getValorAnterior() != null) {
                        pisoDepartamenteAnt = ordDetalle.getValorAnterior();
                    }
                    if (ordDetalle.getValorActual() != null) {
                        pisoDepartamenteActual = ordDetalle.getValorActual();
                    }
                }
            }
            SimpleDateFormat format = new SimpleDateFormat("ddMMyyyyHHmmss");
            String ordenPdf = CommonConstant.BASE_PATH_TMP + "ordenCorreccionDireccionReimp-" + format.format(calendar.getTime()) + ".pdf";
            String ordenTxt = CommonConstant.BASE_PATH_TMP + "ordenCorreccionDireccionReimp-" + format.format(calendar.getTime()) + ".txt";
            this.printOrdenCorreccion(orden.getId(), direccionAnterior, numeroCasaAnterior, pisoDepartamenteAnt, numeroDepartamenteAnt, direccionActual, numeroCasaActual, pisoDepartamenteActual, numeroDepartamenteActual, ordenTxt);
            cr.setBase64(Utils.getFileBase64(ordenTxt));
            cr.setOrdOrden(orden);
        } catch (Exception e) {
            e.printStackTrace();

        }

        return cr;

    }

    public CommonResponse createOrdenInternaFechas(CommonInput input) {
        cr = new CommonResponse();
        NucConsumidor nucConsumidor = input.getNucConsumidor();
        OrdTipoOrden ordTipoOrden = input.getOrdTipoOrden();
        List<OrdDetalleDto> ordenDetalleDtoList = input.getOrdDetalleDtoList();
        OrdOrden ordenObservacion = input.getOrdOrden();
        UsuarioDto usuarioDto = input.getUsuarioDto();
        Boolean isSaveOrden = false;
        OrdOrden orden = new OrdOrden();
        NucVoltaje nucVoltaje;
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        try {
            if (nucConsumidor != null && ordTipoOrden != null) {
                if (ordenObservacion == null) {
                    cr.setResult(GlobalConstant.RESULT_WARNING);
                    cr.setResultMessage(String.format(CommonMessage.ORDORDEN.WARNING.OBSSERVACION_VACIA));
                    return cr;
                }
                NucConsumidor consumidor = nucConsumidorDao.findById(nucConsumidor.getId());
                OrdTipoOrden tipoOrden = new OrdTipoOrden();
                if (ordTipoOrden.getCodigo() != null) {
                    tipoOrden = ordTipoOrdenDao.findByCodigo(ordTipoOrden.getCodigo());
                } else {
                    tipoOrden = ordTipoOrdenDao.findById(ordTipoOrden.getId());
                }
                NucServicio nucServicio = nucServicioDao.findByIdConsumidor(consumidor.getId(), CommonConstant.NUCTIPOSERVICIO.ENERGIA);
                NucDatosTecnicos nucDatosTecnicos = nucDatosTecnicosDao.findByIdServicio(nucServicio.getId());

                RedTecnicaConsumidor redTecnicaConsumidor = redTecnicaConsumidorDao.findByIdConsumidor(consumidor.getId());
                orden.setCodigo(Utils.getNextNumber(em, OrdOrden.class, "codigo"));
                orden.setIdTipoOrden(tipoOrden);
                orden.setIdConsumidor(consumidor);
                orden.setIdEstado(ordEstadoDao.findByCodigoEstado(CommonConstant.ORDESTADO.CUMPLIDA));
                NucSector nucSector = nucSectorDao.findById(usuarioDto.getId_sector());
                NucAgencia nucAgencia = nucAgenciaDao.findById(usuarioDto.getId_agencia());
                orden.setIdSectorOrigen(nucSector);
                orden.setIdSectorDestino(nucSector);
                if (redTecnicaConsumidor != null) {
                    orden.setIdPuesto(redTecnicaConsumidor.getIdRedPuesto());
                    orden.setIdPoste(redTecnicaConsumidor.getIdRedPoste());
                }
                orden.setIdRuta(consumidor.getIdRuta()); //falta la relacion
                orden.setIdVoltaje(nucDatosTecnicos.getIdVoltajeAsignado());
                orden.setIdNivelCalidad(nucServicio.getIdNivelCalidad());
                orden.setRazonSocial(nucConsumidor.getRazonSocial());
                orden.setIdCategoria(nucServicio.getIdCategoria());
                orden.setObservacion(ordenObservacion.getObservacion());
                orden.setFechaCumplimiento(calendar.getTime());
                orden.setFechaRegistro(calendar.getTime());
                orden.setFechaActualizacion(calendar.getTime());
                orden.setUsuarioRegistro(usuarioDto.getId_usuario_security());
                orden.setUsuarioActualizacion(usuarioDto.getId_usuario_security());
                if (nucAgencia != null) {
                    orden.setIdAgencia(nucAgencia);
                }
                isSaveOrden = ordOrdenDao.create(orden);
                Boolean isEstadoOrden = false;
                //Detalle de orden de servicio
                Boolean isOrdDetalle = false;
                if (ordenDetalleDtoList != null) {
                    for (OrdDetalleDto ordDetalleDto : ordenDetalleDtoList) {
                        if (tipoOrden.getCodigo() == CommonConstant.ORDTIPOORDEN.CAMBIO_VOLTAJE) {
                            if (ordDetalleDto.getNombre().equals("fase1") || ordDetalleDto.getNombre().equals("fase2") || ordDetalleDto.getNombre().equals("fase3") || ordDetalleDto.getNombre().equals("fase4")) {
                                isOrdDetalle = generateOrdenDetalle(orden, ordDetalleDto.getNombre(), ordDetalleDto.getValorAnterior(), ordDetalleDto.getValorActual());
                            } else {
                                nucVoltaje = nucVoltajeDao.findById(Integer.parseInt(ordDetalleDto.getValorActual()));
                                isOrdDetalle = generateOrdenDetalle(orden, ordDetalleDto.getNombre(), ordDetalleDto.getValorAnterior(), nucVoltaje.getDescripcion());
                            }
                        } else {
                            isOrdDetalle = generateOrdenDetalle(orden, ordDetalleDto.getNombre(), ordDetalleDto.getValorAnterior(), ordDetalleDto.getValorActual());
                        }
                    }
                }
                if (isSaveOrden && isEstadoOrden) {
                    cr.setOrdOrden(orden);
                    cr.setResult(GlobalConstant.RESULT_SUCCESS);
                    cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.SUCCESS);
                } else {
                    cr.setResult(GlobalConstant.RESULT_ERROR);
                    cr.setResultMessage(CommonMessage.GLOBAL.ERROR.ERROR);
                }
            } else {
                cr.setResultMessage(CommonMessage.GLOBAL.ERROR.EMPTY_INPUT);
            }

        } catch (Exception e) {
            cr.setResult(GlobalConstant.RESULT_ERROR);
            cr.setResultMessage(CommonMessage.GLOBAL.ERROR.ERROR);
            e.printStackTrace();
        }
        return cr;
    }
    
    public CommonResponse ejecutarAdjuntarCarta(CommonInput input) throws Exception {
        cr = new CommonResponse();
        cr.setResult(GlobalConstant.RESULT_ERROR);
        calendar = Calendar.getInstance();
        calendar.set(Calendar.SECOND, 00);
        UsuarioDto usuarioDto = input.getUsuarioDto();
        try {
            OrdTipoOrden tipoOrden = ordTipoOrdenDao.findByCodigo(input.getOrdTipoOrden().getId());
            OrdEstado ordEstado = ordEstadoDao.findByCodigoEstado(CommonConstant.ORDESTADO.CUMPLIDA);
            NucConsumidor nucConsumidor = nucConsumidorDao.findById(input.getNucConsumidor().getId());
            NucAgencia nucAgencia = nucAgenciaDao.findById(usuarioDto.getId_agencia());
            NucSector nucSector = nucSectorDao.findById(usuarioDto.getId_sector());
            OrdOrden orden = new OrdOrden();
            orden.setIdConsumidor(nucConsumidor);
            orden.setIdTipoOrden(tipoOrden);
            orden.setIdEstado(ordEstado);
            orden.setFechaRegistro(calendar.getTime());
            orden.setUsuarioRegistro(usuarioDto.getId_usuario_security());
            orden.setIdAgencia(nucAgencia);
            orden.setIdSectorOrigen(nucSector);
            orden.setObservacion(input.getOrdOrden().getObservacion());
            ordOrdenDao.create(orden);
            //CREA DOCUMENTOS ADJUNTOS
            List<OrdDocumento> ordDocumentoList = input.getOrdDocumentoList();
            if (ordDocumentoList != null) {
                for (OrdDocumento ordDocumento : ordDocumentoList) {
                    byte[] data = Base64.decodeBase64(ordDocumento.getArchivo());
                    try {
                        Files.createDirectories(Paths.get(CommonConstant.PATH_ORDENES_IMAGENES));
                        String filename = Calendar.getInstance().getTimeInMillis() + "_" + ordDocumento.getNombre();
                        OutputStream stream = new FileOutputStream(CommonConstant.PATH_ORDENES_IMAGENES + filename);
                        stream.write(data);
                        ordDocumento.setNombre(filename);
                        ordDocumento.setArchivo(null);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    ordDocumento.setIdOrden(orden);
                    ordDocumento.setContentType(ordDocumento.getContentType());
                    ordDocumento.setDescripcion(ordDocumento.getDescripcion());
                    ordDocumento.setFechaRegistro(calendar.getTime());
                    ordDocumento.setFechaActualizacion(calendar.getTime());
                    ordDocumento.setUsuarioRegistro(orden.getUsuarioRegistro());
                    ordDocumento.setUsuarioActualizacion(orden.getUsuarioActualizacion());
                    ordDocumentoDao.create(ordDocumento);
                }
            }
            cr.setResultMessage(CommonMessage.GLOBAL.SUCCESS.SUCCESS);
            cr.setResult(GlobalConstant.RESULT_SUCCESS);
        } catch (Exception e) {
            cr.setResult(CommonConstant.RESULT_ERROR);
            cr.setResultMessage(CommonMessage.GLOBAL.ERROR.ERROR);
            e.printStackTrace();
            transaction.rollback();
        }
        return cr;
    }
    
    public List<OrdDocumento> findDocsByIdConsumidor(CommonInput input) {
        cr = new CommonResponse();
        List<OrdDocumento> ordDocumentoListResponse = new ArrayList<>();
        OrdTipoOrden ordTipoOrden = ordTipoOrdenDao.findByCodigo(CommonConstant.ORDTIPOORDEN.ADJUNTAR_CARTA_CONSUMIDOR);
        try {
            List<OrdOrden> ordOrdenList = ordOrdenDao.findOrdByConsumidor(input.getNucConsumidor().getId(), ordTipoOrden.getId());
            if (ordOrdenList != null) {
                for (OrdOrden ordOrdenItem : ordOrdenList) {
                    List<OrdDocumento> ordDocumentoList = ordOrdenDao.findByDocsByIdOrden(ordOrdenItem.getId());
                    for (OrdDocumento ordDocumentoItem : ordDocumentoList) {
                        OrdDocumento ordDocumento = new OrdDocumento();
                        if (ordDocumentoItem.getArchivo() != null) {
                            ordDocumento.setNombre(ordDocumentoItem.getNombre());
                            ordDocumento.setFechaRegistro(ordDocumentoItem.getFechaRegistro());
                            ordDocumento.setContentType(ordDocumentoItem.getContentType());
                            ordDocumento.setDescripcion(ordDocumentoItem.getDescripcion());
                            ordDocumento.setArchivo("data:" + ordDocumentoItem.getContentType() + ";base64," + ordDocumentoItem.getArchivo());
                        } else {
                            File file = new File(CommonConstant.PATH_ORDENES_IMAGENES + ordDocumentoItem.getNombre());
                            byte[] encoded = Base64.encodeBase64(FileUtils.readFileToByteArray(file));
                            ordDocumento.setNombre(ordDocumentoItem.getNombre());
                            ordDocumento.setFechaRegistro(ordDocumentoItem.getFechaRegistro());
                            ordDocumento.setContentType(ordDocumentoItem.getContentType());
                            ordDocumento.setDescripcion(ordDocumentoItem.getDescripcion());
                            ordDocumento.setArchivo("data:" + ordDocumentoItem.getContentType() + ";base64," + new String(encoded, StandardCharsets.UTF_8));
                        }
                        ordDocumentoListResponse.add(ordDocumento);
                    }
                }
            } else {
                cr.setResult(CommonConstant.RESULT_INFO);
                cr.setResultMessage(CommonMessage.GLOBAL.INFO.EMPTY_LIST);
            }
        } catch (Exception ex) {
            cr.setResult(CommonConstant.RESULT_ERROR);
            cr.setResultMessage(ex.getMessage());
        }
        return ordDocumentoListResponse;
    }
}